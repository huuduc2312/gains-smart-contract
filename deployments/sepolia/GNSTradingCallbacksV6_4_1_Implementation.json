{
  "address": "0xbD6067FF8a57C5aFAc82a9B5A8e4368cC382EF87",
  "abi": [
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongParams",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeValueDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeValueDai",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiVaultFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "ClosingFeeSharesPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "DaiVaultFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "distributed",
          "type": "bool"
        }
      ],
      "name": "GovFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "GovFeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limitIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterfaceV5.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiSentToTrader",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "exactExecution",
          "type": "bool"
        }
      ],
      "name": "LimitExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4_1.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketCloseCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiSentToTrader",
          "type": "uint256"
        }
      ],
      "name": "MarketExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4_1.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketOpenCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterfaceV5.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4_1.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "NftOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "PairMaxLeverageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "ReferralFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "SssFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "TriggerFeeCharged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canExecuteTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "closeTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiVaultFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftCloseOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftOpenOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPairsMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govFeesDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract GNSStakingInterfaceV6_4_1",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultToApprove",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_daiVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "openTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daiVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "setClosingFeeSharesP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "setPairMaxLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "setPairMaxLeverageArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "maxSlippageP",
              "type": "uint40"
            },
            {
              "internalType": "uint216",
              "name": "_placeholder",
              "type": "uint216"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.TradeData",
          "name": "_tradeData",
          "type": "tuple"
        }
      ],
      "name": "setTradeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sl",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "created",
              "type": "uint32"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.LastUpdated",
          "name": "_lastUpdated",
          "type": "tuple"
        }
      ],
      "name": "setTradeLastUpdated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sssFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract GNSStakingInterfaceV6_4_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeData",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "maxSlippageP",
          "type": "uint40"
        },
        {
          "internalType": "uint216",
          "name": "_placeholder",
          "type": "uint216"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeLastUpdated",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "sl",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "created",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x37df16a1b4c21b65a4369398d910cbe0949d732e79f59aa5e00c20baf7822f38",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0xbD6067FF8a57C5aFAc82a9B5A8e4368cC382EF87",
    "transactionIndex": 29,
    "gasUsed": "4748082",
    "logsBloom": "0x
    "blockHash": "0xceed02b0a61e83a6e99676c2b99df06aed69c7d42010ac77d3b78da6087c4092",
    "transactionHash": "0x37df16a1b4c21b65a4369398d910cbe0949d732e79f59aa5e00c20baf7822f38",
    "logs": [],
    "blockNumber": 6071133,
    "cumulativeGasUsed": "8762909",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3de9b6e15483ad742bf6d6f2874273e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeValueDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValueDai\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiVaultFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sssFeeP\",\"type\":\"uint256\"}],\"name\":\"ClosingFeeSharesPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"DaiVaultFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"distributed\",\"type\":\"bool\"}],\"name\":\"GovFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"GovFeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiSentToTrader\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exactExecution\",\"type\":\"bool\"}],\"name\":\"LimitExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4_1.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketCloseCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiSentToTrader\",\"type\":\"uint256\"}],\"name\":\"MarketExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4_1.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketOpenCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4_1.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"NftOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"PairMaxLeverageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"ReferralFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"SssFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"TriggerFeeCharged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canExecuteTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"closeTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiVaultFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftCloseOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftOpenOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairsMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govFeesDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract GNSStakingInterfaceV6_4_1\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultToApprove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daiVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"openTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daiVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"}],\"name\":\"setClosingFeeSharesP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setPairMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setPairMaxLeverageArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.TradeData\",\"name\":\"_tradeData\",\"type\":\"tuple\"}],\"name\":\"setTradeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.LastUpdated\",\"name\":\"_lastUpdated\",\"type\":\"tuple\"}],\"name\":\"setTradeLastUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sssFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract GNSStakingInterfaceV6_4_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeLastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GNSTradingCallbacksV6_4_1.sol\":\"GNSTradingCallbacksV6_4_1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/contracts/GNSTradingCallbacksV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"../interfaces/GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"../interfaces/GNSReferralsInterfaceV6_2.sol\\\";\\nimport \\\"../interfaces/GNSStakingInterfaceV6_4_1.sol\\\";\\nimport \\\"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\\\";\\nimport \\\"../interfaces/IGNSOracleRewardsV6_4_1.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\n\\ncontract GNSTradingCallbacksV6_4_1 is Initializable {\\n    // Contracts (constant)\\n    StorageInterfaceV5 public storageT;\\n    IGNSOracleRewardsV6_4_1 public nftRewards;\\n    GNSPairInfosInterfaceV6 public pairInfos;\\n    GNSReferralsInterfaceV6_2 public referrals;\\n    GNSStakingInterfaceV6_4_1 public staking;\\n\\n    // Params (constant)\\n    uint private constant PRECISION = 1e10; // 10 decimals\\n    uint private constant MAX_SL_P = 75; // -75% PNL\\n    uint private constant MAX_GAIN_P = 900; // 900% PnL (10x)\\n    uint private constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\\n\\n    // Params (adjustable)\\n    uint public daiVaultFeeP; // % of closing fee going to DAI vault (eg. 40)\\n    uint public lpFeeP; // % of closing fee going to GNS/DAI LPs (eg. 20)\\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable (DEPRECATED)\\n\\n    // Last Updated State\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated))))\\n        public tradeLastUpdated; // Block numbers for last updated\\n\\n    // v6.3.2 Storage/State\\n    GNSBorrowingFeesInterfaceV6_4 public borrowingFees;\\n    mapping(uint => uint) public pairMaxLeverage;\\n\\n    // v6.4 Storage\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData))))\\n        public tradeData; // More storage for trades / limit orders\\n\\n    // v6.4.1 State\\n    uint public govFeesDai; // 1e18\\n\\n    // Custom data types\\n    struct AggregatorAnswer {\\n        uint orderId;\\n        uint price;\\n        uint spreadP;\\n        uint open;\\n        uint high;\\n        uint low;\\n    }\\n\\n    // Useful to avoid stack too deep errors\\n    struct Values {\\n        uint posDai;\\n        uint levPosDai;\\n        // uint tokenPriceDai;\\n        int profitP;\\n        uint price;\\n        uint liqPrice;\\n        uint daiSentToTrader;\\n        uint reward1;\\n        uint reward2;\\n        uint reward3;\\n        bool exactExecution;\\n    }\\n\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    struct OpenTradePrepInput {\\n        uint executionPrice;\\n        uint wantedPrice;\\n        uint marketPrice;\\n        uint spreadP;\\n        bool buy;\\n        uint pairIndex;\\n        uint positionSize;\\n        uint leverage;\\n        uint maxSlippageP;\\n        uint tp;\\n        uint sl;\\n    }\\n\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n\\n    enum CancelReason {\\n        NONE,\\n        PAUSED,\\n        MARKET_CLOSED,\\n        SLIPPAGE,\\n        TP_REACHED,\\n        SL_REACHED,\\n        EXPOSURE_LIMITS,\\n        PRICE_IMPACT,\\n        MAX_LEVERAGE,\\n        NO_TRADE,\\n        WRONG_TRADE,\\n        NOT_HIT\\n    }\\n\\n    // Events\\n    event MarketExecuted(\\n        uint indexed orderId,\\n        StorageInterfaceV5.Trade t,\\n        bool open,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeDai,\\n        int percentProfit, // before fees\\n        uint daiSentToTrader\\n    );\\n\\n    event LimitExecuted(\\n        uint indexed orderId,\\n        uint limitIndex,\\n        StorageInterfaceV5.Trade t,\\n        address indexed nftHolder,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeDai,\\n        int percentProfit,\\n        uint daiSentToTrader,\\n        bool exactExecution\\n    );\\n\\n    event MarketOpenCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        CancelReason cancelReason\\n    );\\n    event MarketCloseCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        CancelReason cancelReason\\n    );\\n    event NftOrderCanceled(\\n        uint indexed orderId,\\n        address indexed nftHolder,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        CancelReason cancelReason\\n    );\\n\\n    event ClosingFeeSharesPUpdated(\\n        uint daiVaultFeeP,\\n        uint lpFeeP,\\n        uint sssFeeP\\n    );\\n\\n    event Pause(bool paused);\\n    event Done(bool done);\\n    event GovFeesClaimed(uint valueDai);\\n\\n    event GovFeeCharged(\\n        address indexed trader,\\n        uint valueDai,\\n        bool distributed\\n    );\\n    event ReferralFeeCharged(address indexed trader, uint valueDai);\\n    event TriggerFeeCharged(address indexed trader, uint valueDai);\\n    event SssFeeCharged(address indexed trader, uint valueDai);\\n    event DaiVaultFeeCharged(address indexed trader, uint valueDai);\\n    event BorrowingFeeCharged(\\n        address indexed trader,\\n        uint tradeValueDai,\\n        uint feeValueDai\\n    );\\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\\n\\n    // Custom errors (save gas)\\n    error WrongParams();\\n    error Forbidden();\\n\\n    function initialize(\\n        StorageInterfaceV5 _storageT,\\n        IGNSOracleRewardsV6_4_1 _nftRewards,\\n        GNSPairInfosInterfaceV6 _pairInfos,\\n        GNSReferralsInterfaceV6_2 _referrals,\\n        GNSStakingInterfaceV6_4_1 _staking,\\n        GNSBorrowingFeesInterfaceV6_4 _borrowingFees,\\n        address vaultToApprove,\\n        uint _daiVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP,\\n        uint _canExecuteTimeout\\n    ) external initializer {\\n        if (\\n            address(_storageT) == address(0) ||\\n            address(_nftRewards) == address(0) ||\\n            address(_pairInfos) == address(0) ||\\n            address(_referrals) == address(0) ||\\n            address(_staking) == address(0) ||\\n            address(_borrowingFees) == address(0) ||\\n            vaultToApprove == address(0) ||\\n            _daiVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\\n        ) {\\n            revert WrongParams();\\n        }\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        staking = _staking;\\n        borrowingFees = _borrowingFees;\\n\\n        daiVaultFeeP = _daiVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        canExecuteTimeout = _canExecuteTimeout;\\n\\n        TokenInterfaceV5 t = storageT.dai();\\n        t.approve(address(staking), type(uint256).max);\\n        t.approve(vaultToApprove, type(uint256).max);\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        _isGov();\\n        _;\\n    }\\n    modifier onlyPriceAggregator() {\\n        _isPriceAggregator();\\n        _;\\n    }\\n    modifier notDone() {\\n        _isNotDone();\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        _isTrading();\\n        _;\\n    }\\n    modifier onlyManager() {\\n        _isManager();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function _isGov() private view {\\n        if (msg.sender != storageT.gov()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isPriceAggregator() private view {\\n        if (msg.sender != address(storageT.priceAggregator())) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isNotDone() private view {\\n        if (isDone) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isTrading() private view {\\n        if (msg.sender != storageT.trading()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isManager() private view {\\n        if (msg.sender != pairInfos.manager()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    // Manage params\\n    function setPairMaxLeverage(\\n        uint pairIndex,\\n        uint maxLeverage\\n    ) external onlyManager {\\n        _setPairMaxLeverage(pairIndex, maxLeverage);\\n    }\\n\\n    function setPairMaxLeverageArray(\\n        uint[] calldata indices,\\n        uint[] calldata values\\n    ) external onlyManager {\\n        uint len = indices.length;\\n\\n        if (len != values.length) {\\n            revert WrongParams();\\n        }\\n\\n        for (uint i; i < len; ) {\\n            _setPairMaxLeverage(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\\n        pairMaxLeverage[pairIndex] = maxLeverage;\\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\\n    }\\n\\n    function setClosingFeeSharesP(\\n        uint _daiVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP\\n    ) external onlyGov {\\n        if (_daiVaultFeeP + _lpFeeP + _sssFeeP != 100) {\\n            revert WrongParams();\\n        }\\n\\n        daiVaultFeeP = _daiVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        emit ClosingFeeSharesPUpdated(_daiVaultFeeP, _lpFeeP, _sssFeeP);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n\\n        emit Pause(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n\\n        emit Done(isDone);\\n    }\\n\\n    // Claim fees\\n    function claimGovFees() external onlyGov {\\n        uint valueDai = govFeesDai;\\n        govFeesDai = 0;\\n\\n        _transferFromStorageToAddress(storageT.gov(), valueDai);\\n\\n        emit GovFeesClaimed(valueDai);\\n    }\\n\\n    // Callbacks\\n    function openTradeMarketCallback(\\n        AggregatorAnswer memory a\\n    ) external /*onlyPriceAggregator*/ notDone {\\n        StorageInterfaceV5.PendingMarketOrder memory o = _getPendingMarketOrder(\\n            a.orderId\\n        );\\n\\n        if (o.block == 0) {\\n            return;\\n        }\\n\\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        (\\n            uint priceImpactP,\\n            uint priceAfterImpact,\\n            CancelReason cancelReason\\n        ) = _openTradePrep(\\n                OpenTradePrepInput(\\n                    a.price,\\n                    o.wantedPrice,\\n                    a.price,\\n                    a.spreadP,\\n                    t.buy,\\n                    t.pairIndex,\\n                    t.positionSizeDai,\\n                    t.leverage,\\n                    o.slippageP,\\n                    t.tp,\\n                    t.sl\\n                )\\n            );\\n\\n        t.openPrice = priceAfterImpact;\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            (\\n                StorageInterfaceV5.Trade\\n                    memory finalTrade /*, uint tokenPriceDai */,\\n\\n            ) = _registerTrade(t, false, 0);\\n\\n            emit MarketExecuted(\\n                a.orderId,\\n                finalTrade,\\n                true,\\n                finalTrade.openPrice,\\n                priceImpactP,\\n                finalTrade.positionSizeDai,\\n                0,\\n                0\\n            );\\n        } else {\\n            // Gov fee to pay for oracle cost\\n            uint govFees = _handleGovFees(\\n                t.trader,\\n                t.pairIndex,\\n                t.positionSizeDai * t.leverage,\\n                true\\n            );\\n            _transferFromStorageToAddress(\\n                t.trader,\\n                t.positionSizeDai - govFees\\n            );\\n\\n            emit MarketOpenCanceled(\\n                a.orderId,\\n                t.trader,\\n                t.pairIndex,\\n                cancelReason\\n            );\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, true);\\n    }\\n\\n    function closeTradeMarketCallback(\\n        AggregatorAnswer memory a\\n    ) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingMarketOrder memory o = _getPendingMarketOrder(\\n            a.orderId\\n        );\\n\\n        if (o.block == 0) {\\n            return;\\n        }\\n\\n        StorageInterfaceV5.Trade memory t = _getOpenTrade(\\n            o.trade.trader,\\n            o.trade.pairIndex,\\n            o.trade.index\\n        );\\n\\n        CancelReason cancelReason = t.leverage == 0\\n            ? CancelReason.NO_TRADE\\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\\n\\n        if (cancelReason != CancelReason.NO_TRADE) {\\n            StorageInterfaceV5.TradeInfo memory i = _getOpenTradeInfo(\\n                t.trader,\\n                t.pairIndex,\\n                t.index\\n            );\\n            AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n            Values memory v;\\n            // v.levPosDai =\\n            //     (t.initialPosToken * i.tokenPriceDai * t.leverage) /\\n            //     PRECISION;\\n            v.levPosDai = t.positionSizeDai * t.leverage;\\n            // v.tokenPriceDai = aggregator.tokenPriceDai();\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = _currentPercentProfit(\\n                    t.openPrice,\\n                    a.price,\\n                    t.buy,\\n                    t.leverage\\n                );\\n                v.posDai = v.levPosDai / t.leverage;\\n\\n                v.daiSentToTrader = _unregisterTrade(\\n                    t,\\n                    true,\\n                    v.profitP,\\n                    v.posDai,\\n                    i.openInterestDai,\\n                    (v.levPosDai *\\n                        aggregator.pairsStorage().pairCloseFeeP(t.pairIndex)) /\\n                        100 /\\n                        PRECISION,\\n                    (v.levPosDai *\\n                        aggregator.pairsStorage().pairNftLimitOrderFeeP(\\n                            t.pairIndex\\n                        )) /\\n                        100 /\\n                        PRECISION\\n                );\\n\\n                emit MarketExecuted(\\n                    a.orderId,\\n                    t,\\n                    false,\\n                    a.price,\\n                    0,\\n                    v.posDai,\\n                    v.profitP,\\n                    v.daiSentToTrader\\n                );\\n            } else {\\n                // Gov fee to pay for oracle cost\\n                // uint govFee = _handleGovFees(\\n                //     t.trader,\\n                //     t.pairIndex,\\n                //     v.levPosDai,\\n                //     t.positionSizeDai > 0\\n                // );\\n                // t.initialPosToken -= (govFee * PRECISION) / i.tokenPriceDai;\\n\\n                storageT.updateTrade(t);\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit MarketCloseCanceled(\\n                a.orderId,\\n                o.trade.trader,\\n                o.trade.pairIndex,\\n                o.trade.index,\\n                cancelReason\\n            );\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, false);\\n    }\\n\\n    function executeNftOpenOrderCallback(\\n        AggregatorAnswer memory a\\n    ) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingNftOrder memory n = storageT\\n            .reqID_pendingNftOrder(a.orderId);\\n\\n        CancelReason cancelReason = !storageT.hasOpenLimitOrder(\\n            n.trader,\\n            n.pairIndex,\\n            n.index\\n        )\\n            ? CancelReason.NO_TRADE\\n            : CancelReason.NONE;\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterfaceV5.OpenLimitOrder memory o = storageT\\n                .getOpenLimitOrder(n.trader, n.pairIndex, n.index);\\n\\n            IGNSOracleRewardsV6_4_1.OpenLimitOrderType t = nftRewards\\n                .openLimitOrderTypes(n.trader, n.pairIndex, n.index);\\n\\n            cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice)\\n                ? CancelReason.NONE\\n                : CancelReason.NOT_HIT;\\n\\n            // Note: o.minPrice always equals o.maxPrice so can use either\\n            (\\n                uint priceImpactP,\\n                uint priceAfterImpact,\\n                CancelReason _cancelReason\\n            ) = _openTradePrep(\\n                    OpenTradePrepInput(\\n                        cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\\n                        o.maxPrice,\\n                        a.open,\\n                        a.spreadP,\\n                        o.buy,\\n                        o.pairIndex,\\n                        o.positionSize,\\n                        o.leverage,\\n                        tradeData[o.trader][o.pairIndex][o.index][\\n                            TradeType.LIMIT\\n                        ].maxSlippageP,\\n                        o.tp,\\n                        o.sl\\n                    )\\n                );\\n\\n            bool exactExecution = cancelReason == CancelReason.NONE;\\n\\n            cancelReason = !exactExecution &&\\n                (\\n                    o.maxPrice == 0 ||\\n                        t == IGNSOracleRewardsV6_4_1.OpenLimitOrderType.MOMENTUM\\n                        ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\\n                        : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\\n                )\\n                ? CancelReason.NOT_HIT\\n                : _cancelReason;\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                (\\n                    StorageInterfaceV5.Trade\\n                        memory finalTrade /*, uint tokenPriceDai */,\\n\\n                ) = _registerTrade(\\n                        StorageInterfaceV5.Trade(\\n                            o.trader,\\n                            o.pairIndex,\\n                            0,\\n                            // 0,\\n                            o.positionSize,\\n                            priceAfterImpact,\\n                            o.buy,\\n                            o.leverage,\\n                            o.tp,\\n                            o.sl\\n                        ),\\n                        true,\\n                        n.index\\n                    );\\n\\n                storageT.unregisterOpenLimitOrder(\\n                    o.trader,\\n                    o.pairIndex,\\n                    o.index\\n                );\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    n.index,\\n                    finalTrade,\\n                    n.nftHolder,\\n                    StorageInterfaceV5.LimitOrder.OPEN,\\n                    finalTrade.openPrice,\\n                    priceImpactP,\\n                    // (finalTrade.initialPosToken * tokenPriceDai) / PRECISION,\\n                    finalTrade.positionSizeDai,\\n                    0,\\n                    0,\\n                    exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(\\n                a.orderId,\\n                n.nftHolder,\\n                StorageInterfaceV5.LimitOrder.OPEN,\\n                cancelReason\\n            );\\n        }\\n\\n        // nftRewards.unregisterTrigger(\\n        //     IGNSOracleRewardsV6_4_1.TriggeredLimitId(\\n        //         n.trader,\\n        //         n.pairIndex,\\n        //         n.index,\\n        //         n.orderType\\n        //     )\\n        // );\\n\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    function executeNftCloseOrderCallback(\\n        AggregatorAnswer memory a\\n    ) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingNftOrder memory o = storageT\\n            .reqID_pendingNftOrder(a.orderId);\\n        IGNSOracleRewardsV6_4_1.TriggeredLimitId\\n            memory triggeredLimitId = IGNSOracleRewardsV6_4_1.TriggeredLimitId(\\n                o.trader,\\n                o.pairIndex,\\n                o.index,\\n                o.orderType\\n            );\\n        StorageInterfaceV5.Trade memory t = _getOpenTrade(\\n            o.trader,\\n            o.pairIndex,\\n            o.index\\n        );\\n\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n        CancelReason cancelReason = a.open == 0\\n            ? CancelReason.MARKET_CLOSED\\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterfaceV5.TradeInfo memory i = _getOpenTradeInfo(\\n                t.trader,\\n                t.pairIndex,\\n                t.index\\n            );\\n\\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n            Values memory v;\\n            // v.levPosDai =\\n            //     (t.initialPosToken * i.tokenPriceDai * t.leverage) /\\n            //     PRECISION;\\n            v.levPosDai = t.positionSizeDai * t.leverage;\\n            // v.posDai = v.levPosDai / t.leverage;\\n            v.posDai = t.positionSizeDai;\\n\\n            if (o.orderType == StorageInterfaceV5.LimitOrder.LIQ) {\\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    GNSBorrowingFeesInterfaceV6_4.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        v.posDai,\\n                        t.leverage\\n                    )\\n                );\\n            }\\n\\n            v.price = o.orderType == StorageInterfaceV5.LimitOrder.TP\\n                ? t.tp\\n                : (\\n                    o.orderType == StorageInterfaceV5.LimitOrder.SL\\n                        ? t.sl\\n                        : v.liqPrice\\n                );\\n\\n            v.exactExecution =\\n                v.price > 0 &&\\n                a.low <= v.price &&\\n                a.high >= v.price;\\n\\n            if (v.exactExecution) {\\n                v.reward1 = o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                    ? (v.posDai * 5) / 100\\n                    : (v.levPosDai *\\n                        pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) /\\n                        100 /\\n                        PRECISION;\\n            } else {\\n                v.price = a.open;\\n\\n                v.reward1 = o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                    ? (\\n                        (t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice)\\n                            ? (v.posDai * 5) / 100\\n                            : 0\\n                    )\\n                    : (\\n                        ((o.orderType == StorageInterfaceV5.LimitOrder.TP &&\\n                            t.tp > 0 &&\\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\\n                            (o.orderType == StorageInterfaceV5.LimitOrder.SL &&\\n                                t.sl > 0 &&\\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\\n                            ? (v.levPosDai *\\n                                pairsStored.pairNftLimitOrderFeeP(\\n                                    t.pairIndex\\n                                )) /\\n                                100 /\\n                                PRECISION\\n                            : 0\\n                    );\\n            }\\n\\n            cancelReason = v.reward1 == 0\\n                ? CancelReason.NOT_HIT\\n                : CancelReason.NONE;\\n\\n            // If can be triggered\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = _currentPercentProfit(\\n                    t.openPrice,\\n                    v.price,\\n                    t.buy,\\n                    t.leverage\\n                );\\n                // v.tokenPriceDai = aggregator.tokenPriceDai();\\n\\n                v.daiSentToTrader = _unregisterTrade(\\n                    t,\\n                    false,\\n                    v.profitP,\\n                    v.posDai,\\n                    i.openInterestDai,\\n                    o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                        ? v.reward1\\n                        : (v.levPosDai *\\n                            pairsStored.pairCloseFeeP(t.pairIndex)) /\\n                            100 /\\n                            PRECISION,\\n                    v.reward1\\n                );\\n\\n                // _handleOracleRewards(\\n                //     triggeredLimitId,\\n                //     t.trader,\\n                //     (v.reward1 * 2) / 10,\\n                //     v.tokenPriceDai\\n                // );\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    o.index,\\n                    t,\\n                    o.nftHolder,\\n                    o.orderType,\\n                    v.price,\\n                    0,\\n                    v.posDai,\\n                    v.profitP,\\n                    v.daiSentToTrader,\\n                    v.exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(\\n                a.orderId,\\n                o.nftHolder,\\n                o.orderType,\\n                cancelReason\\n            );\\n        }\\n\\n        // nftRewards.unregisterTrigger(triggeredLimitId);\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    // Shared code between market & limit callbacks\\n    function _registerTrade(\\n        StorageInterfaceV5.Trade memory trade,\\n        bool isLimitOrder,\\n        uint limitIndex\\n    ) private returns (StorageInterfaceV5.Trade memory, uint) {\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        Values memory v;\\n\\n        v.levPosDai = trade.positionSizeDai * trade.leverage;\\n        // v.tokenPriceDai = aggregator.tokenPriceDai();\\n\\n        // 1. Charge referral fee (if applicable) and send DAI amount to vault\\n        // if (referrals.getTraderReferrer(trade.trader) != address(0)) {\\n        //     // Use this variable to store lev pos dai for dev/gov fees after referral fees\\n        //     // and before volumeReferredDai increases\\n        //     v.posDai =\\n        //         (v.levPosDai *\\n        //             (100 *\\n        //                 PRECISION -\\n        //                 referrals.getPercentOfOpenFeeP(trade.trader))) /\\n        //         100 /\\n        //         PRECISION;\\n\\n        //     v.reward1 = referrals.distributePotentialReward(\\n        //         trade.trader,\\n        //         v.levPosDai,\\n        //         pairsStored.pairOpenFeeP(trade.pairIndex),\\n        //         v.tokenPriceDai\\n        //     );\\n\\n        //     _sendToVault(v.reward1, trade.trader);\\n        //     trade.positionSizeDai -= v.reward1;\\n\\n        //     emit ReferralFeeCharged(trade.trader, v.reward1);\\n        // }\\n\\n        // 2. Calculate gov fee (- referral fee if applicable)\\n        uint govFee = _handleGovFees(\\n            trade.trader,\\n            trade.pairIndex,\\n            (v.posDai > 0 ? v.posDai : v.levPosDai),\\n            true\\n        );\\n        v.reward1 = govFee; // SSS fee (previously dev fee)\\n\\n        // 3. Calculate Market/Limit fee\\n        v.reward2 =\\n            (v.levPosDai * pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) /\\n            100 /\\n            PRECISION;\\n\\n        // 3.1 Deduct gov fee, SSS fee (previously dev fee), Market/Limit fee\\n        trade.positionSizeDai -= govFee + v.reward1 + v.reward2;\\n\\n        // 3.2 Distribute Oracle fee and send DAI amount to vault if applicable\\n        if (isLimitOrder) {\\n            v.reward3 = (v.reward2 * 2) / 10; // 20% of limit fees\\n            _sendToVault(v.reward3, trade.trader);\\n\\n            // _handleOracleRewards(\\n            //     IGNSOracleRewardsV6_4_1.TriggeredLimitId(\\n            //         trade.trader,\\n            //         trade.pairIndex,\\n            //         limitIndex,\\n            //         StorageInterfaceV5.LimitOrder.OPEN\\n            //     ),\\n            //     trade.trader,\\n            //     v.reward3,\\n            //     v.tokenPriceDai\\n            // );\\n        }\\n\\n        // 3.3 Distribute SSS fee (previous dev fee + market/limit fee - oracle reward)\\n        _distributeStakingReward(\\n            trade.trader,\\n            v.reward1 + v.reward2 - v.reward3\\n        );\\n\\n        // 4. Set trade final details\\n        trade.index = storageT.firstEmptyTradeIndex(\\n            trade.trader,\\n            trade.pairIndex\\n        );\\n        // trade.initialPosToken =\\n        //     (trade.positionSizeDai * PRECISION) /\\n        //     v.tokenPriceDai;\\n\\n        trade.tp = _correctTp(\\n            trade.openPrice,\\n            trade.leverage,\\n            trade.tp,\\n            trade.buy\\n        );\\n        trade.sl = _correctSl(\\n            trade.openPrice,\\n            trade.leverage,\\n            trade.sl,\\n            trade.buy\\n        );\\n\\n        // 5. Call other contracts\\n        pairInfos.storeTradeInitialAccFees(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy\\n        );\\n        pairsStored.updateGroupCollateral(\\n            trade.pairIndex,\\n            trade.positionSizeDai,\\n            trade.buy,\\n            true\\n        );\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.positionSizeDai * trade.leverage,\\n            true,\\n            trade.buy\\n        );\\n\\n        // 6. Store final trade in storage contract\\n        storageT.storeTrade(\\n            trade,\\n            StorageInterfaceV5.TradeInfo(\\n                0,\\n                // v.tokenPriceDai,\\n                trade.positionSizeDai * trade.leverage,\\n                0,\\n                0,\\n                false\\n            )\\n        );\\n\\n        // 7. Store tradeLastUpdated\\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][\\n            trade.pairIndex\\n        ][trade.index][TradeType.MARKET];\\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\\n        lastUpdated.tp = currBlock;\\n        lastUpdated.sl = currBlock;\\n        lastUpdated.created = currBlock;\\n\\n        return (\\n            trade,\\n            //  v.tokenPriceDai\\n            0\\n        );\\n    }\\n\\n    function _unregisterTrade(\\n        StorageInterfaceV5.Trade memory trade,\\n        bool marketOrder,\\n        int percentProfit, // PRECISION\\n        uint currentDaiPos, // 1e18\\n        uint openInterestDai, // 1e18\\n        uint closingFeeDai, // 1e18\\n        uint nftFeeDai // 1e18 (= SSS reward if market order)\\n    ) private returns (uint daiSentToTrader) {\\n        IGToken vault = storageT.vault();\\n\\n        // 1. Calculate net PnL (after all closing and holding fees)\\n        (daiSentToTrader, ) = _getTradeValue(\\n            trade,\\n            currentDaiPos,\\n            percentProfit,\\n            closingFeeDai + nftFeeDai\\n        );\\n\\n        // 2. Calls to other contracts\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            openInterestDai,\\n            false,\\n            trade.buy\\n        );\\n        _getPairsStorage().updateGroupCollateral(\\n            trade.pairIndex,\\n            openInterestDai / trade.leverage,\\n            trade.buy,\\n            false\\n        );\\n\\n        // 3. Unregister trade from storage\\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\\n\\n        // 4.1 If collateral in storage\\n        if (trade.positionSizeDai > 0) {\\n            Values memory v;\\n\\n            // 5. DAI vault reward\\n            v.reward2 = (closingFeeDai * daiVaultFeeP) / 100;\\n            _transferFromStorageToAddress(address(this), v.reward2);\\n            vault.distributeReward(v.reward2);\\n\\n            emit DaiVaultFeeCharged(trade.trader, v.reward2);\\n\\n            // 6. SSS reward\\n            v.reward3 =\\n                (marketOrder ? nftFeeDai : (nftFeeDai * 8) / 10) +\\n                (closingFeeDai * sssFeeP) /\\n                100;\\n            _distributeStakingReward(trade.trader, v.reward3);\\n\\n            // 7. Take DAI from vault if winning trade\\n            // or send DAI to vault if losing trade\\n            uint daiLeftInStorage = currentDaiPos - v.reward3 - v.reward2;\\n\\n            if (daiSentToTrader > daiLeftInStorage) {\\n                vault.sendAssets(\\n                    daiSentToTrader - daiLeftInStorage,\\n                    trade.trader\\n                );\\n                _transferFromStorageToAddress(trade.trader, daiLeftInStorage);\\n            } else {\\n                _sendToVault(daiLeftInStorage - daiSentToTrader, trade.trader);\\n                _transferFromStorageToAddress(trade.trader, daiSentToTrader);\\n            }\\n\\n            // 4.2 If collateral in vault, just send dai to trader from vault\\n        } else {\\n            vault.sendAssets(daiSentToTrader, trade.trader);\\n        }\\n    }\\n\\n    // Setters (external)\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata _id,\\n        LastUpdated memory _lastUpdated\\n    ) external onlyTrading {\\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][\\n            _id.tradeType\\n        ] = _lastUpdated;\\n    }\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata _id,\\n        TradeData memory _tradeData\\n    ) external onlyTrading {\\n        tradeData[_id.trader][_id.pairIndex][_id.index][\\n            _id.tradeType\\n        ] = _tradeData;\\n    }\\n\\n    // Getters (private)\\n    function _getTradeValue(\\n        StorageInterfaceV5.Trade memory trade,\\n        uint currentDaiPos, // 1e18\\n        int percentProfit, // PRECISION\\n        uint closingFees // 1e18\\n    ) private returns (uint value, uint borrowingFee) {\\n        int netProfitP;\\n\\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(\\n            trade,\\n            currentDaiPos,\\n            percentProfit\\n        );\\n        value = pairInfos.getTradeValue(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy,\\n            currentDaiPos,\\n            trade.leverage,\\n            netProfitP,\\n            closingFees\\n        );\\n\\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\\n    }\\n\\n    function _getBorrowingFeeAdjustedPercentProfit(\\n        StorageInterfaceV5.Trade memory trade,\\n        uint currentDaiPos, // 1e18\\n        int percentProfit // PRECISION\\n    ) private view returns (int netProfitP, uint borrowingFee) {\\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\\n            GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput(\\n                trade.trader,\\n                trade.pairIndex,\\n                trade.index,\\n                trade.buy,\\n                currentDaiPos,\\n                trade.leverage\\n            )\\n        );\\n        netProfitP =\\n            percentProfit -\\n            int((borrowingFee * 100 * PRECISION) / currentDaiPos);\\n    }\\n\\n    function _withinMaxLeverage(\\n        uint pairIndex,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\\n        return\\n            pairMaxLev == 0\\n                ? leverage <= _getPairsStorage().pairMaxLeverage(pairIndex)\\n                : leverage <= pairMaxLev;\\n    }\\n\\n    function _withinExposureLimits(\\n        uint pairIndex,\\n        bool buy,\\n        uint positionSizeDai,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint levPositionSizeDai = positionSizeDai * leverage;\\n\\n        return\\n            storageT.openInterestDai(pairIndex, buy ? 0 : 1) +\\n                levPositionSizeDai <=\\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeDai);\\n    }\\n\\n    function _currentPercentProfit(\\n        uint openPrice,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) private pure returns (int p) {\\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\\n\\n        p = openPrice > 0\\n            ? ((\\n                buy\\n                    ? int(currentPrice) - int(openPrice)\\n                    : int(openPrice) - int(currentPrice)\\n            ) *\\n                100 *\\n                int(PRECISION) *\\n                int(leverage)) / int(openPrice)\\n            : int(0);\\n\\n        p = p > maxPnlP ? maxPnlP : p;\\n    }\\n\\n    function _correctTp(\\n        uint openPrice,\\n        uint leverage,\\n        uint tp,\\n        bool buy\\n    ) private pure returns (uint) {\\n        if (\\n            tp == 0 ||\\n            _currentPercentProfit(openPrice, tp, buy, leverage) ==\\n            int(MAX_GAIN_P) * int(PRECISION)\\n        ) {\\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\\n\\n            return\\n                buy\\n                    ? openPrice + tpDiff\\n                    : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\\n        }\\n\\n        return tp;\\n    }\\n\\n    function _correctSl(\\n        uint openPrice,\\n        uint leverage,\\n        uint sl,\\n        bool buy\\n    ) private pure returns (uint) {\\n        if (\\n            sl > 0 &&\\n            _currentPercentProfit(openPrice, sl, buy, leverage) <\\n            int(MAX_SL_P) * int(PRECISION) * -1\\n        ) {\\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\\n\\n            return buy ? openPrice - slDiff : openPrice + slDiff;\\n        }\\n\\n        return sl;\\n    }\\n\\n    function _marketExecutionPrice(\\n        uint price,\\n        uint spreadP,\\n        bool long\\n    ) private pure returns (uint) {\\n        uint priceDiff = (price * spreadP) / 100 / PRECISION;\\n\\n        return long ? price + priceDiff : price - priceDiff;\\n    }\\n\\n    function _openTradePrep(\\n        OpenTradePrepInput memory c\\n    )\\n        private\\n        view\\n        returns (\\n            uint priceImpactP,\\n            uint priceAfterImpact,\\n            CancelReason cancelReason\\n        )\\n    {\\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\\n            _marketExecutionPrice(c.executionPrice, c.spreadP, c.buy),\\n            c.pairIndex,\\n            c.buy,\\n            c.positionSize * c.leverage\\n        );\\n\\n        uint maxSlippage = c.maxSlippageP > 0\\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\\n            : c.wantedPrice / 100; // 1% by default\\n\\n        cancelReason = isPaused\\n            ? CancelReason.PAUSED\\n            : (\\n                c.marketPrice == 0\\n                    ? CancelReason.MARKET_CLOSED\\n                    : (\\n                        c.buy\\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\\n                    )\\n                    ? CancelReason.SLIPPAGE\\n                    : (c.tp > 0 &&\\n                        (\\n                            c.buy\\n                                ? priceAfterImpact >= c.tp\\n                                : priceAfterImpact <= c.tp\\n                        ))\\n                    ? CancelReason.TP_REACHED\\n                    : (c.sl > 0 &&\\n                        (\\n                            c.buy\\n                                ? priceAfterImpact <= c.sl\\n                                : priceAfterImpact >= c.sl\\n                        ))\\n                    ? CancelReason.SL_REACHED\\n                    : !_withinExposureLimits(\\n                        c.pairIndex,\\n                        c.buy,\\n                        c.positionSize,\\n                        c.leverage\\n                    )\\n                    ? CancelReason.EXPOSURE_LIMITS\\n                    : priceImpactP * c.leverage >\\n                        pairInfos.maxNegativePnlOnOpenP()\\n                    ? CancelReason.PRICE_IMPACT\\n                    : !_withinMaxLeverage(c.pairIndex, c.leverage)\\n                    ? CancelReason.MAX_LEVERAGE\\n                    : CancelReason.NONE\\n            );\\n    }\\n\\n    function _getPendingMarketOrder(\\n        uint orderId\\n    ) private view returns (StorageInterfaceV5.PendingMarketOrder memory) {\\n        return storageT.reqID_pendingMarketOrder(orderId);\\n    }\\n\\n    function _getPairsStorage() private view returns (PairsStorageInterfaceV6) {\\n        return storageT.priceAggregator().pairsStorage();\\n    }\\n\\n    function _getOpenTrade(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterfaceV5.Trade memory) {\\n        return storageT.openTrades(trader, pairIndex, index);\\n    }\\n\\n    function _getOpenTradeInfo(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterfaceV5.TradeInfo memory) {\\n        return storageT.openTradesInfo(trader, pairIndex, index);\\n    }\\n\\n    // Utils (private)\\n    function _distributeStakingReward(address trader, uint amountDai) private {\\n        _transferFromStorageToAddress(address(this), amountDai);\\n        staking.distributeRewardDai(amountDai);\\n        emit SssFeeCharged(trader, amountDai);\\n    }\\n\\n    function _sendToVault(uint amountDai, address trader) private {\\n        _transferFromStorageToAddress(address(this), amountDai);\\n        storageT.vault().receiveAssets(amountDai, trader);\\n    }\\n\\n    function _transferFromStorageToAddress(address to, uint amountDai) private {\\n        storageT.transferDai(address(storageT), to, amountDai);\\n    }\\n\\n    // function _handleOracleRewards(\\n    //     IGNSOracleRewardsV6_4_1.TriggeredLimitId memory triggeredLimitId,\\n    //     address trader,\\n    //     uint oracleRewardDai,\\n    //     uint tokenPriceDai\\n    // ) private {\\n    //     uint oracleRewardToken = ((oracleRewardDai * PRECISION) /\\n    //         tokenPriceDai);\\n    //     nftRewards.distributeOracleReward(triggeredLimitId, oracleRewardToken);\\n\\n    //     emit TriggerFeeCharged(trader, oracleRewardDai);\\n    // }\\n\\n    function _handleGovFees(\\n        address trader,\\n        uint pairIndex,\\n        uint leveragedPositionSize,\\n        bool distribute\\n    ) private returns (uint govFee) {\\n        govFee =\\n            (leveragedPositionSize *\\n                storageT.priceAggregator().openFeeP(pairIndex)) /\\n            PRECISION /\\n            100;\\n\\n        if (distribute) {\\n            govFeesDai += govFee;\\n        }\\n\\n        emit GovFeeCharged(trader, govFee, distribute);\\n    }\\n\\n    // Getters (public)\\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\\n        uint len = _getPairsStorage().pairsCount();\\n        uint[] memory lev = new uint[](len);\\n\\n        for (uint i; i < len; ) {\\n            lev[i] = pairMaxLeverage[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return lev;\\n    }\\n}\\n\",\"keccak256\":\"0xadd1841dfe9f860a49eb72f7101e8098d184ced65dd9921045831ecc6cc7d8d5\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ChainlinkFeedInterfaceV5 {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0xd13756cf435ea7e26ec8dbceed69f93553b142029e3c1753367769dde6d9cfd7\",\"license\":\"MIT\"},\"contracts/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSBorrowingFeesInterfaceV6_4 {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1e71c17d0c0428b673324ef58a8d8fb03ff3caeb6802558347f1aeb5ee49dd8a\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSPairInfosInterfaceV6 {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71feae30036c784a9685909bfc1c8132fca5384a5a80db79f35b5864470a90a6\",\"license\":\"MIT\"},\"contracts/interfaces/GNSReferralsInterfaceV6_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSReferralsInterfaceV6_2 {\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referral\\n    ) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeDai,\\n        uint pairOpenFeeP,\\n        uint tokenPriceDai\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(\\n        address trader\\n    ) external view returns (address referrer);\\n}\\n\",\"keccak256\":\"0x1e272b18fda8f42e080107f38fdad48148cd913acdae2f6eecec5790597a92da\",\"license\":\"MIT\"},\"contracts/interfaces/GNSStakingInterfaceV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSStakingInterfaceV6_4_1 {\\n    // Structs\\n    struct User {\\n        uint128 stakedTokens; // 1e18\\n        uint128 debtDai; // 1e18\\n    }\\n\\n    struct UnlockSchedule {\\n        uint128 totalTokens;\\n        uint128 claimedTokens;\\n        uint128 debtDai;\\n        uint48 start; // block.timestamp (seconds)\\n        uint48 duration; // in seconds\\n        bool revocable;\\n        UnlockType unlockType;\\n        uint16 __placeholder;\\n    }\\n\\n    struct UnlockScheduleInput {\\n        uint128 totalTokens;\\n        uint48 start; // block.timestamp (seconds)\\n        uint48 duration; // in seconds\\n        bool revocable;\\n        UnlockType unlockType;\\n    }\\n\\n    enum UnlockType {\\n        LINEAR,\\n        CLIFF\\n    }\\n\\n    function govFund() external returns (address);\\n\\n    function distributeRewardDai(uint amount) external;\\n\\n    function createUnlockSchedule(\\n        UnlockScheduleInput memory schedule,\\n        address user\\n    ) external;\\n\\n    function getUnlockSchedules(\\n        address user\\n    ) external view returns (UnlockSchedule[] memory schedules);\\n\\n    function unlockedAmount(\\n        UnlockSchedule memory v,\\n        uint48 timestamp\\n    ) external view returns (uint128 amount);\\n\\n    function releasable(\\n        UnlockSchedule memory v,\\n        uint48 timestamp\\n    ) external view returns (uint128 amount);\\n}\\n\",\"keccak256\":\"0xea01b678637b3859d96af101afa681e61e2e5d0d79dde4c58edf37c2ce82274d\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IGNSOracleRewardsV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport {StorageInterfaceV5} from \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface IGNSOracleRewardsV6_4_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeTrigger(TriggeredLimitId calldata) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeOracleReward(TriggeredLimitId calldata, uint) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x92824c7696db412fa7b11d7c2ececacd8a2fd496a687058b6b8e416da4c12b43\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1fd411df874a31e89b8a26375446f6bf9d14279a1e02ee1e6541f0f2a1bec9da\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x17570efd5c6708b7adc07cd3fdb11a5983bc5db9f7b3d0bf0f50b34f95ea6358\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosDai(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd274cbab16c2f7a08cd33c1c59921fae308aef6dea851621c5f1540e8c7733f6\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity ^0.8.7;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        // uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        // uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function openTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function openTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders()\\n        external\\n        view\\n        returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(\\n        TriggeredLimitId calldata,\\n        address,\\n        uint\\n    ) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(\\n        TriggeredLimitId calldata,\\n        uint,\\n        uint\\n    ) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(\\n        uint,\\n        address,\\n        uint,\\n        address,\\n        uint,\\n        uint\\n    ) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    // function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(\\n        address,\\n        uint,\\n        uint,\\n        TradeType\\n    ) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata,\\n        LastUpdated memory\\n    ) external;\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata,\\n        TradeData memory\\n    ) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x822f477e8cd542d4524b943f98576e915cae1efd6008fbe0834d7cc98f586e94\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface TokenInterfaceV5 {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1ad2a4fa990051fb693928d91a6c3192cfd68604d12436e7459c4d9f96cccd5\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0x6c7fba5c30c9f2c493d0fa6bfa8fb4414e8d74aa253cddb145b1496269cb6c1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60e0604052600436101561001257600080fd5b600060a05260003560e01c8062e0fa8914612b975780630241e05014612abd5780631346b0ff14612a9257806316fff07414612a6557806318407fe014612a4557806321c861961461295a57806323f7197b14611998578063281b693c1461196a57806337edb1381461182d57806346f93a63146117cb57806348829122146117a45780634cf088d914611779578063531cc9651461174e5780635ad9f9931461172357806361ba6c3d14611705578063676c5164146116e55780637bb6c11c146116c55780637d490caf1461169f5780637e09ae8a146115765780638456cb59146115105780638f062227146114e85780639bd24d831461146a578063a38ea9a81461144a578063ae8421e1146113da578063b187bd26146113b5578063b47ee40814610644578063b736ca8214610254578063c68078b9146101be578063c68365df1461019e5763d3dc75391461016a57600080fd5b346101985760a05180600319360112610195576003546040516001600160a01b039091168152602090f35b80fd5b60a05180fd5b346101985760a05180600319360112610195576020600654604051908152f35b34610198576060366003190112610198576044356024356004356101e0612f22565b60646101f5846101f08585612dc9565b612dc9565b03610242577f0caa98ed9a1605da290817d1f67b1b83c63f9229abeca5123df5d90581c495589260609282600555806006558160075560405192835260208301526040820152a160a05180f35b604051635863f78960e01b8152600490fd5b3461019857610160366003190112610198576001600160a01b0360043581811690818103610198576024359083821680920361019857604435848116809103610198576064359085821680920361019857608435928684168094036101985760a4358781168091036101985760c4359388851680950361063f5760a051549760ff8960081c16159889809a610632575b801561061b575b156105bf5760a05160ff1982166001178155908a6105ad575b50501580156105a5575b801561059d575b8015610595575b801561058d575b8015610585575b801561057d575b801561055d575b8015610550575b61024257889360a0519384549062010000600160b01b039060101b169062010000600160b01b0319161780945560018060a01b031997886001541617600155876002541617600255866003541617600355600454958581881617600455600b541617600b5560e4356005556101043560065561012435600755610144356009556040519063f4b9fa7560e01b82528160048160209a8b9460101c165afa9081156104d25760a0519161051a575b5016926040519263095ea7b360e01b9182855260a0511617600484015260001993846024850152868460448160a051855af19384156104d25787946104df575b5090604491604051958694859384526004840152602483015260a051905af180156104d25761049e575b50610462575b60a05180f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060a05161ff0019815416905560405160018152a18061045c565b8281813d83116104cb575b6104b38183612cf9565b81010312610198576104c490612dec565b5082610456565b503d6104a9565b6040513d60a051823e3d90fd5b91909382813d8311610513575b6104f68183612cf9565b8101031261019857869361050b604493612dec565b50909161042c565b503d6104ec565b90508681813d8311610549575b6105318183612cf9565b810103126101985751818116810361019857876103ec565b503d610527565b506005610144351161033f565b506064610576610124356101f06101043560e435612dc9565b1415610338565b508415610331565b50811561032a565b508515610323565b50801561031c565b508315610315565b50861561030e565b61ffff19166101011790558a80610304565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156102eb5750600160ff8216146102eb565b50600160ff8216106102e4565b600080fd5b346101985761065236612d1c565b61065a614356565b610662613770565b60018060a01b0360a0515460101c168151604051906399794d3560e01b8252600482015260c081602481855afa9081156104d25760a05191611386575b50604081810151606083015160808401519251636e6f99cd60e11b81529492602092869283926106de929091906001600160a01b031660048501614417565b0381845afa9283156104d25760a0519361134a575b5060a051809315600014611345575060095b8093600c8210156111385750156107dc575b50600c8210156107c45781610789575b505060a051805491519160101c6001600160a01b031690813b1561019557506040519163201d8bdb60e01b835260048301528160248160a05180945af180156104d2576107745760a05180f35b61077d90612c78565b60a051801561045c5780fd5b600080516020615465833981519152604084519260018060a01b03905116936107bc825191600383526020830190612f84565ba38180610727565b634e487b7160e01b60a051526021600452602460a051fd5b604082810151606084015160808501519251632e21e28b60e21b815295506101a0928692839261081992916001600160a01b031660048501614417565b0381845afa9081156104d25760a05191611245575b600154604084810151606086015160808701519251636a6f32f560e11b8152975060209388936001600160a01b03918216938593849361087393921660048501614417565b03915afa9384156104d25760a05194611208575b506080850151906101408301518092101591826111f9575b5060a05191156111f157815b600c831015611138575061099e60a05183156000146111e657610140850151905b856101408101519160608b01519060408c015160a0840151151560208501519060608601519260c08701519460018060a01b038851169052600d60205260a05160408120906020890151905260205260a051604081209060408901519052602052604060a05120600160005260205264ffffffffff604060002054169561010060e0890151980151986040519a6109628c612c8b565b8b5260208b015260408a01526060890152608088015260a087015260c086015260e08501526101008401526101208301526101408201526147a4565b8495929593919315159788611154575b5060a051971561114f5750600b5b8097600c8210156111385750156109d7575b50505050610717565b602060049160018060a01b0384511694828501519060608601519060a0870151151560c08801519160e0890151936101008a0151956040519b610a198d612ca7565b8c52888c015260a05160408c015260608b015260808a015260a089015260c088015260e0870152610100860152610a4e614442565b50604051633078fff560e01b815292839182905afa9081156104d25760049160209160a0519161111b575b506040516335b03c1760e01b815292839182906001600160a01b03165afa9081156104d25760a051916110ec575b50610ab061379e565b610ac3606085015160c086015190612f64565b602082810182815286519187015184519193610af1936001600160a01b0316929081156110e4575091615240565b60c083018190529051602086810151604051634e46e97d60e11b815260048101919091529190826024816001600160a01b0389165afa9182156104d25760a051926110ae575b50610b7b926402540be4006064610b54610b7195610b6695612f64565b040460e086015260c085015190612dc9565b60e084015190612dc9565b6060860151612f77565b606085015260e081015190818060011b046002148215171561109657610be6600a610bec9360011b04610bc061010084019180835260018060a01b038951169061511f565b610bde60018060a01b038851169360e060c082015191015190612dc9565b905190612f77565b90615093565b60a05154835160208581015160405163292c161760e01b8152939192849260101c6001600160a01b039081169284928392610c2c92911660048401612df9565b03915afa9081156104d25760a05191611064575b506040840152610c66608084015160c085015160e08601519060a08701511515926146b6565b60e0840152610c8c608084015160c08501516101008601519060a0870151151592614739565b61010084015260025483516020850151604086015160a08701516001600160a01b039384169490931692151591833b156101985760405194630735e1cd60e11b865260048601526024850152604484015260648301528160848160a05180945af180156104d25761104f575b506020830151606084015160a08501519092901515906001600160a01b0381163b1561019857610d42936040518095819482936310787e2f60e11b845260a0519760048501614487565b60a051919003926001600160a01b03165af180156104d25761103a575b50600b54825160208401516040850151606086015160c087015192946001600160a01b03948516949293921691610d9591612f64565b9160a0870151151594823b1561019857610dc96040519687958694859463ce67edfb60e01b865260a05199600487016144c5565b039160a051905af180156104d257611025575b5060018060a01b0360a0515460101c16610dff606084015160c085015190612f64565b9060405191610e0d83612cc3565b60a05183526020830190815260a0516040840190815260a051906060850191825260a0519260808601938452843b1561019857604051634b50fa1160e11b815295610e5b600488018a612f91565b516101248701525161014486015251610164850152516101848401525115156101a4830152816101c48160a05180945af180156104d257611010575b5060018060a01b0382511660a05152600a60205260a05160408120906020840151905260205260a051604081209060408401519052602052604060a0512060008052602052610f0f604060002063ffffffff610ef161538d565b16908163ffffffff19825416178155610f0a828261452d565b614550565b60a05160018060a01b03815460101c1660018060a01b03835116926040602082015191015192823b15610195575090610f6493929160405180958194829363b4b0f56760e01b845260a0519760048501614417565b039160a051905af180156104d257610ffb575b506102206000805160206154a58339815191529187519360808701519160018060a01b03885116966080820151610fbd6060840151936040519687526020870190612f91565b60036101408601526101608501526101808401526101a083015260a0516101c083015260a0516101e083015215610200820152a383808080806109ce565b61100490612c78565b60a0518015610f775780fd5b61101990612c78565b60a0518015610e975780fd5b61102e90612c78565b60a0518015610ddc5780fd5b61104390612c78565b60a0518015610d5f5780fd5b61105890612c78565b60a0518015610cf85780fd5b90506020813d60201161108e575b8161107f60209383612cf9565b8101031261063f575189610c40565b3d9150611072565b634e487b7160e01b60a051526011600452602460a051fd5b91506020823d6020116110dc575b816110c960209383612cf9565b8101031261063f57905190610b7b610b37565b3d91506110bc565b905091615240565b61110e915060203d602011611114575b6111068183612cf9565b81019061377f565b88610aa7565b503d6110fc565b6111329150823d8411611114576111068183612cf9565b8a610a79565b634e487b7160e01b9052602160045260a051602490fd5b6109bc565b909750610140830151159081156111d2575b5060a05180916000146111a457505060a082015115611193576060880151610140830151115b96896109ae565b60608801516101408301511061118c565b505060a0820151156111c15760608801516101408301511061118c565b60608801516101408301511161118c565b905060038110156107c45760021489611166565b6060880151906108cc565b600b916108ab565b60a0870151111591508661089f565b9093506020813d60201161123d575b8161122460209383612cf9565b8101031261019857516003811015610198579285610887565b3d9150611217565b90506101a0833d6101a01161133d575b816112636101a09383612cf9565b81010312610198576040516001600160401b036101a082019081119082111761132757610873936101a0820160405261129b81612e14565b8252602081015160208301526040810151604083015260608101516060830152608081015160808301526112d160a08201612dec565b60a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080910151908201529061082e565b634e487b7160e01b600052604160045260246000fd5b3d9150611255565b610705565b9092506020813d60201161137e575b8161136660209383612cf9565b810103126101985761137790612dec565b91846106f3565b3d9150611359565b6113a8915060c03d60c0116113ae575b6113a08183612cf9565b8101906143b0565b8361069f565b503d611396565b346101985760a0518060031936011261019557602060ff600854166040519015158152f35b346101985760a05180600319360112610195576113f5612f22565b7fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888602060085461ff0060ff8260081c161560081b169061ff001916178060085560ff6040519160081c1615158152a160a05180f35b346101985760a05180600319360112610195576020600554604051908152f35b346101985760806114b761147d36612d64565b9260018060a09493941b031660a05152600a60205260a0519060408220915260205260a05190604082209152602052604060a05120612d9b565b546040519063ffffffff908181168352818160201c166020840152818160401c16604084015260601c166060820152f35b346101985760a0518060031936011261019557602060ff60085460081c166040519015158152f35b346101985760a051806003193601126101955761152b612f22565b7f9422424b175dda897495a07b091ef74a3ef715cf6d866fc972954c1c7f459304602060085460ff80821615168060ff198316176008556040519160a051161715158152a160a05180f35b34610198573660031901610100811261019857608013610198576080366083190112610198576040516115a881612c5d565b63ffffffff90608435828116810361063f57815260a43591808316830361063f576020820192835260c435818116810361063f576040830190815260e43590828216820361063f57606084019182526115ff6145a2565b6001600160a01b0361160f61458c565b1660a05152600a60205260a0516040812090602435905260205260a0516040812090604435905260205260a05160408120606435916002831015610195575061045c9685611661611678948294612d9b565b97511663ffffffff1988541617875551168561452d565b51835463ffffffff60401b191660409190911b63ffffffff60401b16178355511690614550565b346101985761045c6116b036612d1c565b6116b8614356565b6116c0613770565b61381b565b346101985760a05180600319360112610195576020600754604051908152f35b346101985760a05180600319360112610195576020600954604051908152f35b346101985761045c61171636612d1c565b61171e613770565b612ff1565b346101985760a05180600319360112610195576001546040516001600160a01b039091168152602090f35b346101985760a0518060031936011261019557600b546040516001600160a01b039091168152602090f35b346101985760a05180600319360112610195576004546040516001600160a01b039091168152602090f35b34610198576040366003190112610198576117bd612e28565b61045c602435600435612ee5565b346101985760406118156117de36612d64565b9260018060a09493941b031660a05152600d60205260a05190858220915260205260a0519084822091526020528260a05120612d9b565b5481519064ffffffffff8116825260281c6020820152f35b346101985760a05180600319360112610195576001600160a01b03611850614e86565b16604051809163b81b2b7160e01b825281600460209485935afa9081156104d25760a0519161193d575b5061188481615376565b6118916040519182612cf9565b81815261189d82615376565b8184019290601f190136843760a0515b8181106118f857505090604051928392818401908285525180915260408401929160a0515b8281106118e157505050500390f35b8351855286955093810193928101926001016118d2565b8060a05152600c855260a05160408120549084518310156119265750600582901b84018601526001016118ad565b634e487b7160e01b9052603260045260a051602490fd5b90508181813d8311611963575b6119548183612cf9565b8101031261063f57518261187a565b503d61194a565b346101985760203660031901126101985760043560a05152600c6020526020604060a0512054604051908152f35b34610198576119a636612d1c565b6119ae614356565b6119b6613770565b60a0515481516040516399794d3560e01b815260048101919091529060101c6001600160a01b031660c082602481845afa9182156104d25760a05192612939575b5060408201516060830151608084015160a0850151926001600160a01b03169060048410156107c45760609260405192611a3084612c5d565b8352602083015260408201520152611a5e60018060a01b036040840151166060840151608085015191614f20565b604051633078fff560e01b81529190602083600481855afa9283156104d25760a05193612918575b506060850151159260a0518094600014612902575060025b8094600c821015611138575015611b6d575b505050600c8110156107c45780611b1e575b505060a051805491519160101c6001600160a01b031690813b1561019557506040519163201d8bdb60e01b835260048301528160248160a05180945af180156104d257611b0f5760a05180f35b611b1890612c78565b8061045c565b82519060a0600180821b038451169301519060048210156107c45760008051602061546583398151915291611b65604092611b5b84518094614435565b6020830190612f84565ba38180611ac2565b6004919293506020611b9160018060a01b0385511682860151604087015191614fa3565b6040516335b03c1760e01b815293909284919082906001600160a01b03165afa9182156104d25760a051926128e1575b50611bca61379e565b91611bde606085015160c086015190612f64565b60208401526060840151835260a086015160048110156107c4576002146127ab575b60a086015160048110156107c45760a0519061277f575060e08401515b806060850152801515908161276f575b81612760575b501580156101208501526125755760a086015160048110156107c4576002036124e55782518060058102046005148115171561109657600560649102045b60c08401525b60c0830151159460a05180966000146124e05750600b5b8096600c821015611138575015611ca7575b5050611ab0565b611cc76080860151606086015160a088015115159060c0890151926145fd565b928360408601526020855191015160a089015160048110156107c457600203612453576004935060c08601515b60c087015191602060a051956040519788809263fbfa77cf60e01b82525afa9586156104d25760a05196612432575b50611d2e8383612dc9565b9660018060a01b03600b541697602060a060c48d600180841b03815116908481015190604081015160c08683015115159201519260405194611d6f86612cde565b855287850152604084015260608301528a6080830152838201526040519c8d938492632d28a81760e01b8452600180831b0381511660048501528681015160248501526040810151604485015260608101511515606485015260808101516084850152015160a48301525afa9889156104d25760a051996123fe575b50606489028981046064148a151715611096578064e8d4a510008b02046402540be400149015171561109657611e34602092611e2e8864e8d4a510008d026137fb565b906145e4565b9060018060a01b03600254169160018060a01b038d51168d8581015160408201519060c060a084015115159301519360405180608052636ceaca6760e01b905260046080510152602460805101526044608051015260646080510152886084608051015260a4608051015260c4608051015260e46080510152610104608051809260a051905af19687156104d25760a051976123c8575b600080516020615485833981519152604060018060a01b038c5116928151908b82526020820152a2600b54895160208b015160408c015160a08d01511515936001600160a01b03938416931690813b15610198578592611f456040519687958694859463ce67edfb60e01b865260a05199600487016144f9565b039160a051905af180156104d2576123b3575b506001600160a01b03611f69614e86565b16611f7e60208b01519260c08c0151906137fb565b60a08b0151151592823b1561239b5791611fb39391888094604051968795869485936310787e2f60e11b8552600485016144a6565b03925af180156123905790859161239f575b50508354885160208a015160408b01519260101c6001600160a01b039081169216823b1561239b57916120139391888094604051968795869485936390d112b960e01b855260048501614417565b03925af180156123905790859161237c575b50506060880151156123055761203961379e565b91612058606461204b60055485612f64565b048060e0860152306151ea565b60e08301516001600160a01b0387163b156123015760405163940a4e4560e01b815260048101919091528581602481836001600160a01b038c165af180156122f6579086916122de575b505060018060a01b03895116600080516020615405833981519152602060e0860151604051908152a284156122ad57612124936120f660e09360646120ef61211b95925b60075490612f64565b0490612dc9565b61010085018181528b519091612114916001600160a01b0316615093565b5190612f77565b91015190612f77565b918383811115612271578361213891612f77565b86516001600160a01b0390811692919082163b1561226d57918391612174938360405180968195829463e66a6e3b60e01b845260048401614573565b03926001600160a01b03165af180156122625761224e575b505083516121a391906001600160a01b03166151ea565b60a082015284519060808501519260018060a01b038651169360a08701519160048310156107c457836102209360606000805160206154a583398151915296015182519061221c60408501519361221161012060a0880151970151151597604051998a5260208a0190612f91565b610140880190614435565b61016086015260a0516101808601526101a08501526101c08401526101e0830152610200820152a38380808080611ca0565b6122588291612c78565b610195578061218c565b6040513d84823e3d90fd5b8380fd5b9050612281915061229292612f77565b84516001600160a01b03169061511f565b82516122a89082906001600160a01b03166151ea565b6121a3565b90818060031b046008148215171561109657612124936120f661211b9260646120ef600a60e09760031b04926120e6565b6122e790612c78565b6122f257848d6120a2565b8480fd5b6040513d88823e3d90fd5b8580fd5b505085519192916001600160a01b03908116915082163b15612378576123458392839260405194858094819363e66a6e3b60e01b83528a60048401614573565b03926001600160a01b03165af1801561226257612364575b50506121a3565b61236e8291612c78565b610195578061235d565b8280fd5b61238590612c78565b61226d57838c612025565b6040513d87823e3d90fd5b8780fd5b6123a890612c78565b61226d57838c611fc5565b6123be919550612c78565b60a051938c611f58565b965060203d6020116123f7575b6123e181608051612cf9565b6020608051809281010312610198575196611ecb565b503d6123d5565b9098506020813d60201161242a575b8161241a60209383612cf9565b810103126101985751978e611deb565b3d915061240d565b61244c91965060203d602011611114576111068183612cf9565b948c611d23565b6020860151936020808901516024604051809481936341b51a0d60e11b8352600483015260018060a01b03165afa9081156104d25760a051916124ad575b5060646124a66402540be40092600497612f64565b0404611cf4565b90506020813d6020116124d8575b816124c860209383612cf9565b8101031261019857516064612491565b3d91506124bb565b611c8e565b60208381015185820151604051634e46e97d60e11b8152600481019190915291826024816001600160a01b0387165afa9182156104d25760a0519261253f575b506125386402540be40092606492612f64565b0404611c71565b91506020823d60201161256d575b8161255a60209383612cf9565b8101031261019857905190612538612525565b3d915061254d565b6060870151606084015260a086015160048110156107c45760a0519060020361260d575060a084810151905190156125fc576060880151608085015110155b156125f757835190816005810204600514821517156125e05750600560649102045b60c0840152611c77565b634e487b7160e01b9052601160045260a051602490fd5b6125d6565b6060880151608085015111156125b4565b60a087015190600482101561113857501580612753575b80612726575b80156126cb575b60a05190156125f7575060208381015185820151604051634e46e97d60e11b8152600481019190915291826024816001600160a01b0387165afa9182156104d25760a05192612695575b5061268e6402540be40092606492612f64565b04046125d6565b91506020823d6020116126c3575b816126b060209383612cf9565b810103126101985790519061268e61267b565b3d91506126a3565b5060a086015160048110156107c45760011480612718575b8015612631575060a0840151156127065760608701516101008501511015612631565b60608701516101008501511115612631565b5061010084015115156126e3565b5060a08401511561274257606087015160e0850151111561262a565b606087015160e0850151101561262a565b5060e08401511515612624565b90506080880151101588611c33565b80915060a0890151111590611c2d565b60a087015190600482101561113857506001036127a157610100840151611c1d565b6080830151611c1d565b600b5484516020860151604080880151608089015160a08a0151895160c08c01519451939792966001600160a01b03908116959316929115156001600160401b0360e08601908111908611176128c95760209760e49660e08701604052865288860197885260408601998a52606086019081526080860191825260a0860192835260c08601938452604051998a988997633837d79d60e11b895260018060a01b03905116600489015251602488015251604487015251606486015251151560848501525160a48401525160c48301525afa9081156104d25760a05191612897575b506080840152611c00565b90506020813d6020116128c1575b816128b260209383612cf9565b8101031261019857518861288c565b3d91506128a5565b634e487b7160e01b60a051526041600452602460a051fd5b6128fb91925060203d602011611114576111068183612cf9565b9086611bc1565b60c083015161291357506009611a9e565b611a9e565b61293291935060203d602011611114576111068183612cf9565b9185611a86565b61295391925060c03d60c0116113ae576113a08183612cf9565b90836119f7565b3461019857366003190160c081126101985760801361019857604036608319011261019857604080519081016001600160401b038111828210176128c95760405264ffffffffff608435818116810361019857825260a435906001600160d81b038216820361019857602083019182526129d26145a2565b6001600160a01b036129e261458c565b1660a05152600d60205260a0516040812090602435905260205260a0516040812090604435905260205260a05160408120606435916002831015610195575090612a2b91612d9b565b9251915160281b64ffffffffff1916911617905560a05180f35b346101985760a05180600319360112610195576020600e54604051908152f35b346101985760a05180600319360112610195575460405160109190911c6001600160a01b03168152602090f35b346101985760a05180600319360112610195576002546040516001600160a01b039091168152602090f35b346101985760a0518060031936011261019557612ad8612f22565b600e805460a0519182905590546040516312d43a5160e01b8152906020908290600490829060101c6001600160a01b03165afa9081156104d25760a05191612b44575b600080516020615445833981519152602084612b3781866151ea565b604051908152a160a05180f35b90506020813d8211612b8f575b81612b5e60209383612cf9565b810103126101985781612b3760008051602061544583398151915293612b85602094612e14565b9350935050612b1b565b3d9150612b51565b3461063f57604036600319011261063f576001600160401b0360043581811161063f57612bc8903690600401612c2d565b909160243590811161063f57612be2903690600401612c2d565b90612beb612e28565b8183036102425760a0515b838110612c035760a05180f35b80612c27612c146001938789612ebf565b35612c20838787612ebf565b3590612ee5565b01612bf6565b9181601f8401121561063f578235916001600160401b03831161063f576020808501948460051b01011161063f57565b608081019081106001600160401b0382111761132757604052565b6001600160401b03811161132757604052565b61016081019081106001600160401b0382111761132757604052565b61012081019081106001600160401b0382111761132757604052565b60a081019081106001600160401b0382111761132757604052565b60c081019081106001600160401b0382111761132757604052565b601f909101601f19168101906001600160401b0382119082101761132757604052565b60c090600319011261063f57604051612d3481612cde565b6004358152602435602082015260443560408201526064356060820152608435608082015260a43560a082015290565b608090600319011261063f576004356001600160a01b038116810361063f57906024359060443590606435600281101561063f5790565b906002811015612db357600052602052604060002090565b634e487b7160e01b600052602160045260246000fd5b91908201809211612dd657565b634e487b7160e01b600052601160045260246000fd5b5190811515820361063f57565b6001600160a01b039091168152602081019190915260400190565b51906001600160a01b038216820361063f57565b60025460405163481c6a7560e01b81526001600160a01b03916020908290600490829086165afa908115612eb357600091612e7a575b50163303612e6857565b604051631dd2188d60e31b8152600490fd5b906020823d8211612eab575b81612e9360209383612cf9565b810103126101955750612ea590612e14565b38612e5e565b3d9150612e86565b6040513d6000823e3d90fd5b9190811015612ecf5760051b0190565b634e487b7160e01b600052603260045260246000fd5b9060207f95924bc10431f9a625a06fe5a27d55f4348510b2da42a18fe3bf2a6f2c4eab679183600052600c825280604060002055604051908152a2565b6000546040516312d43a5160e01b81526001600160a01b03916020908290600490829060101c86165afa908115612eb357600091612e7a5750163303612e6857565b81810292918115918404141715612dd657565b91908203918211612dd657565b90600c821015612db35752565b60018060a01b0381511682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a0810151151560a083015260c081015160c083015260e081015160e083015261010080910151910152565b805190612fff600092614d7e565b60208101511561376b57613095815191602084015160408201519160408601519060a08601511515906020870151606088015190606060c08a01519301519360e08a0151956101008b015197604051996130588b612c8b565b818b5260208b015260408a01526060890152608088015260a087015260c086015260e08501526101008401526101208301526101408201526147a4565b9060808493940152600c81101561375757806136cd57506130b4614442565b508354604051633078fff560e01b8152906020908290600490829060101c6001600160a01b03165afa9081156123905760049160209187916136b0575b506040516335b03c1760e01b815292839182906001600160a01b03165afa908115612390578591613691575b5061312661379e565b613139606084015160c085015190612f64565b60208083018281528551918601518451919493613168936001600160a01b0316929081156110e4575091615240565b60c082018190529151602085810151604051634e46e97d60e11b815260048101919091529190826024816001600160a01b0389165afa91821561368657899261364c575b50916131f76131ed6131e56402540be40060646131d0610be69761321a9a99612f64565b04049560e0850196875260c085015190612dc9565b855190612dc9565b6060880151612f77565b606087015261010061211b60018060a01b038851169460c0840151905190612dc9565b8454825160208481015160405163292c161760e01b8152939192849260101c6001600160a01b03908116928492839261325892911660048401612df9565b03915afa9081156122f657869161361a575b506040830152613290608083015160c084015160e08501519060a08601511515926146b6565b60e08301526132b6608083015160c08401516101008501519060a0860151151592614739565b61010083015260025482516020840151604085015160a0860151909391926001600160a01b039081169216901515813b156135ef5791896084928195946040519788968795630735e1cd60e11b875260048701526024860152604485015260648401525af180156122f657613607575b506020820151606083015160a0840151151592916001600160a01b0383163b1561239b57916133709391888094604051968795869485936310787e2f60e11b855260048501614487565b03926001600160a01b03165af18015612390579085916135f3575b5050600b54815160208301516040840151606085015160c08601516001600160a01b0394851695929490921692916133c291612f64565b9360a08601511515833b156135ef5789949392916133f886926040519889978896879563ce67edfb60e01b8752600487016144c5565b03925af18015612390579085916135db575b505060018060a01b03845460101c1661342c606083015160c084015190612f64565b6040519061343982612cc3565b8682526020820152856040820152856060820152856080820152813b156123015760806101c48792836040519586948593634b50fa1160e11b8552613481600486018b612f91565b8051610124860152602081015161014486015260408101516101648601526060810151610184860152015115156101a48401525af18015612390579085916135c7575b50506101e06000805160206154258339815191529160018060a01b038151168652600a602052604086206020820151875260205260408620604082015187526020526040862060008052602052613526604060002063ffffffff610ef161538d565b8451936080820151906060830151916135426040518095612f91565b6001610120850152610140840152610160830152610180820152856101a0820152856101c0820152a25b60018060a01b03825460101c169051813b15612378578291604483926040519485938492630195728b60e71b84526004840152600160248401525af18015612262576135b6575050565b6135c08291612c78565b6101955750565b6135d090612c78565b61226d5783386134c4565b6135e490612c78565b61226d57833861340a565b8980fd5b6135fc90612c78565b61226d57833861338b565b61361390959195612c78565b9338613326565b90506020813d602011613644575b8161363560209383612cf9565b8101031261230157513861326a565b3d9150613628565b9091506020813d60201161367e575b8161366860209383612cf9565b8101031261367a5751906131f76131ac565b8880fd5b3d915061365b565b6040513d8b823e3d90fd5b6136aa915060203d602011611114576111068183612cf9565b3861311d565b6136c79150823d8411611114576111068183612cf9565b386130f1565b915060018060a01b036137166136fe8284511660208501516136f8606087015160c088015190612f64565b91615240565b61371083855116916060860151612f77565b906151ea565b7f1dc3532663e5566091476fb5aba1e514ef733714c83d4feec5723de6f16c3269602080865193855116940151946137516040518092612f84565ba461356c565b634e487b7160e01b85526021600452602485fd5b505050565b60ff60085460081c16612e6857565b9081602091031261063f57516001600160a01b038116810361063f5790565b6040519061014082016001600160401b0381118382101761132757604052816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b8115613805570490565b634e487b7160e01b600052601260045260246000fd5b805190613829600092614d7e565b60208101511561376b578051805160208201516040909201516138569290916001600160a01b0316614f20565b60c081015161433e576009905b600c821015908161432a5760098303613938575b5061392457806138cd575b505060018060a01b03825460101c169051813b15612378578291604483926040519485938492630195728b60e71b845260048401528160248401525af18015612262576135b6575050565b82519151917f293df767d6749666902026d2f6a2cc4e5f15cdede46402226c42ef4fdf27a17c604060018060a01b038551169361391c8260208801519701519183519283526020830190612f84565ba43880613882565b634e487b7160e01b84526021600452602484fd5b80516020820151604083015192935061395a92916001600160a01b0316614fa3565b8554604051633078fff560e01b815260109190911c6001600160a01b0316929091602083600481875afa92831561431f5788936142fe575b5061399b61379e565b926139af606084015160c085015190612f64565b60208501528894866142a857506139dc608084015160208a015160a086015115159060c0870151926145fd565b60408501526139f4602085015160c0850151906137fb565b8085526040808601516020948501518588015192516335b03c1760e01b8152919590939290826004816001600160a01b0389165afa918215614227578d92614287575b506020878101516040516341b51a0d60e11b8152600481019190915292839060249082906001600160a01b03165afa918215614227578d92614251575b50613a876402540be40092606492612f64565b040490600460208089015195604051928380926335b03c1760e01b825260018060a01b03165afa908115614227578d91614232575b50602087810151604051634e46e97d60e11b8152600481019190915291829060249082906001600160a01b03165afa908115614227578d916141f4575b506064613b0e6402540be40092600497612f64565b0404600093602060018060a01b03865460101c166040519788809263fbfa77cf60e01b82525afa9586156123905785966141d3575b50613b4e8285612dc9565b600b54895160208b01516040808d015160a08e015160c08f01519251919d95939491936001600160a01b0390811693929115159116613b8c85612cde565b84526020840194855260408085019e8f5260608501918252608085018b815260a086019384529051632d28a81760e01b815294516001600160a01b03166004860152945160248501529c5160448401529b511515606483015291516084820152995160a48b0152899081905a9260c491602094fa9889156141c8578799614190575b50606489028981046064148a15171561417c578064e8d4a510008b02046402540be400149015171561416857610104602092613c568993611e2e8964e8d4a510008f026137fb565b9060018060a01b0360025416918d60018060a01b03815116908781015160408201519060c060a08401511515930151936040518060c052636ceaca6760e01b9052600460c0510152602460c0510152604460c0510152606460c051015289608460c051015260a460c051015260c460c051015260e460c051015260c0519283915af1968715612390578597614132575b600080516020615485833981519152604060018060a01b038b5116928151908b82526020820152a2600b54885160208a015160408b015160a08c015190936001600160a01b039081169316901515833b156135ef579189809492613d638897956040519889978896879563ce67edfb60e01b8752600487016144f9565b03925af180156122f65761411f575b506001600160a01b03613d83614e86565b16613d9860208a01519260c08b0151906137fb565b60a08a0151151592823b1561239b5791613dcd9391888094604051968795869485936310787e2f60e11b8552600485016144a6565b03925af180156123905790859161410b575b505083548751602089015160408a01519260101c6001600160a01b039081169216823b1561239b5791613e2d9391888094604051968795869485936390d112b960e01b855260048501614417565b03925af18015612390579085916140f7575b505060608701511561407957613e5361379e565b92613e726064613e6560055484612f64565b048060e0870152306151ea565b60e08401516001600160a01b0387163b156123015760405163940a4e4560e01b815260048101919091528581602481836001600160a01b038c165af180156122f657908691614065575b5050613f209392613f0260e09360646120ef61211b958d60018060a01b0390511660008051602061540583398151915260208a8c0151604051908152a260075490612f64565b61010085018181528a519091612114916001600160a01b0316615093565b918284111561401657613f338385612f77565b85516001600160a01b0390811692919082163b1561226d57918391613f6f938360405180968195829463e66a6e3b60e01b845260048401614573565b03926001600160a01b03165af1801561226257614002575b5050916101e091613fb06000805160206154258339815191529460018060a01b038451166151ea565b8060a086015288519460208a0151906040815191015191613fd46040518096612f91565b8c6101208601526101408501528b6101608501526101808401526101a08301526101c0820152a25b38613877565b61400c8291612c78565b6101955780613f87565b5050918161404a6140396101e09460008051602061542583398151915296612f77565b83516001600160a01b03169061511f565b81516140609082906001600160a01b03166151ea565b613fb0565b61406e90612c78565b6122f2578438613ebc565b5050845191926001600160a01b0390811692169050813b15612378576140b98392839260405194858094819363e66a6e3b60e01b83528a60048401614573565b03925af18015612262576140e3575b5050600080516020615425833981519152916101e091613fb0565b6140ed8291612c78565b61019557806140c8565b61410090612c78565b61226d578338613e3f565b61411490612c78565b61226d578338613ddf565b61412b90959195612c78565b9338613d72565b965060203d602011614161575b61414b8160c051612cf9565b602060c051809281010312612301575196613ce6565b503d61413f565b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b88526011600452602488fd5b9098506020813d6020116141c0575b816141ac60209383612cf9565b810103126141bc57519738613c0e565b8680fd5b3d915061419f565b6040513d89823e3d90fd5b6141ed91965060203d602011611114576111068183612cf9565b9438613b43565b90506020813d60201161421f575b8161420f60209383612cf9565b8101031261063f57516064613af9565b3d9150614202565b6040513d8f823e3d90fd5b61424b915060203d602011611114576111068183612cf9565b38613abc565b91506020823d60201161427f575b8161426c60209383612cf9565b8101031261063f57905190613a87613a74565b3d915061425f565b6142a191925060203d602011611114576111068183612cf9565b9038613a37565b93505050813b156141bc576142d86101248892836040519586948593630df6934760e41b85526004850190612f91565b5af180156122f6576142eb575b50613ffc565b6142f790959195612c78565b93386142e5565b61431891935060203d602011611114576111068183612cf9565b9138613992565b6040513d8a823e3d90fd5b634e487b7160e01b86526021600452602486fd5b60208301516143505760025b90613863565b8361434a565b600054604051633078fff560e01b81526001600160a01b03916020908290600490829060101c86165afa908115612eb3576000916143985750163303612e6857565b612ea5915060203d8111611114576111068183612cf9565b908160c091031261063f5760a0604051916143ca83612cde565b6143d381612e14565b8352602081015160208401526143eb60408201612e14565b604084015260608101516060840152608081015160808401520151600481101561063f5760a082015290565b604091949392606082019560018060a01b0316825260208201520152565b906004821015612db35752565b6040519061444f82612ca7565b816101006000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b6060919493600193608083019683526020830152151560408201520152565b6060919493600093608083019683526020830152151560408201520152565b93909594919260a09360c0860197600180871b03168652602086015260408501526060840152600160808401521515910152565b93909594919260a09360c0860197600180871b03168652602086015260408501526060840152600060808401521515910152565b805463ffffffff60201b191660209290921b63ffffffff60201b16919091179055565b805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b9081526001600160a01b03909116602082015260400190565b6004356001600160a01b038116810361063f5790565b600054604051637622567960e11b81526001600160a01b03916020908290600490829060101c86165afa908115612eb357600091612e7a5750163303612e6857565b81810392916000138015828513169184121617612dd657565b928315929091906000846146ab575084901561469b5761461c916145e4565b915b606483029280840560641481151715612dd65764e8d4a5100090818102948086056402540be4001490151715612dd65783020292600160ff1b926000821284821416612dd6578185051490151715612dd657613805578114600019831416612dd657055b65082f79cd90009081811315614696575090565b905090565b906146a5916145e4565b9161461e565b945050505050614682565b909291928315801561471f575b6146cd5750505090565b90919250610384808302908382041483151715612dd6576064916146f0916137fb565b0490600092600014614709576147069250612dc9565b90565b80821161471a576147069250612f77565b505090565b5065082f79cd9000614733828587866145fd565b146146c3565b9192908315158061478a575b61474f5750505090565b90919250604b8302838104604b1484151715612dd657606491614771916137fb565b0490156147815761470691612f77565b61470691612dc9565b5064ae9f7bcbff1961479e828487876145fd565b12614745565b6147d89160018060a01b0380600254169280516060820151906080830191825115159060646402540be400998a9285612f64565b04049015614cdf576147e991612dc9565b925b60a0830191825196815115159360c086019889519261481060e0890194855190612f64565b604097885193633f54af9960e11b855260049b8c8601526024850152604484015260648301528682608481845afa9a8b15614cd457600092839c614c9d575b508b839d6101008b01518b811515600014614c8c576064916020614874920151612f64565b0404995b60085460009b9060ff16156148995750505050505050505050505050600190565b818b01516148b35750505050505050505050505050600290565b885115614c77576148c8906020830151612dc9565b82115b156148e157505050505050505050505050600390565b6101208101518015159081614c5b575b501561490557505050505050505050505090565b610140909b98999a9b01518015159182614c3f575b5050156149305750505050505050505050600590565b60ff956149468551915115159251875190612f64565b8b5460101c8a168315614c37578c905b8c51998a926328daca2160e01b8452858d85015216602483015281604460209b8c935afa8015614c2d5782908e90614bf8575b6149939250612dc9565b600b548c51632e53fe8760e21b81528b8101859052908c1692918a82602481875afa918215614bec578f92614bb9575b506305f5e10091828102928184041490151715614ba657928d9594928c928c9511159687614b26575b5050505050505015600014614a0957505050505050505050600690565b84614a178793865190612f64565b9189519384809263407b67e160e11b82525afa918215614b1c578992614aed575b501115614a4b5750505050505050600790565b51905193818752600c8352858720548015600014614ae057509060248392614a71614e86565b169487519586938492630a06da4f60e21b84528301525afa938415614ad757508493614aa7575b505011155b6147065750600890565b9080929350813d8311614ad0575b614abf8183612cf9565b810103126123785751903880614a98565b503d614ab5565b513d86823e3d90fd5b9550505050501115614a9d565b9091508481813d8311614b15575b614b058183612cf9565b8101031261367a57519038614a38565b503d614afb565b88513d8b823e3d90fd5b6064949596975051968795869463d627450560e01b8652850152602484015260448301525afa908115614b9c578a91614b67575b503886818981808e6149ec565b90508581813d8311614b95575b614b7e8183612cf9565b810103126135ef57614b8f90612dec565b38614b5a565b503d614b74565b89513d8c823e3d90fd5b634e487b7160e01b8f5260118c5260248ffd5b9091508a81813d8311614be5575b614bd18183612cf9565b81010312614be1575190386149c3565b8e80fd5b503d614bc7565b8f8f51903d90823e3d90fd5b50508881813d8311614c26575b614c0f8183612cf9565b81010312614c2257816149939151614989565b8c80fd5b503d614c05565b8c513d8f823e3d90fd5b600190614956565b88519192509015614c545711155b388061491a565b1015614c4d565b895190915015614c6f578210155b386148f1565b821115614c69565b614c85906020830151612f77565b82106148cb565b606492506020915001510499614878565b92909b508783813d8311614ccd575b614cb68183612cf9565b810103126101955750602082519201519a3861484f565b503d614cac565b87513d6000823e3d90fd5b614ce891612f77565b926147eb565b809291610120918291031261063f576040519081016001600160401b03811182821017611327576040528092614d2381612e14565b825260208101516020830152604081015160408301526060810151606083015260808101516080830152614d5960a08201612dec565b60a083015260c081015160c083015260e081015160e083015261010080910151910152565b60a0906040908151614d8f81612cde565b614d97614442565b815260009381856020819401528285820152826060820152826080820152015260018060a01b03835460101c1691805192839263b66e6b0560e01b845260048401528260246101c09586935afa938415614e7b578094614df9575b5050505090565b9091928094503d8511614e74575b614e118185612cf9565b8301938385031261019557509081614e376101a0935194614e3186612cde565b83614cee565b845261012082015160208501526101408201519084015261016081015160608401526101808101516080840152015160a082015238808080614df2565b503d614e07565b9051903d90823e3d90fd5b600054604051633078fff560e01b81526020916001600160a01b03919083908290600490829060101c86165afa8015612eb3578391600091614f03575b506004604051809481936335b03c1760e01b8352165afa918215612eb357600092614eed57505090565b6147069250803d10611114576111068183612cf9565b614f1a9150823d8411611114576111068183612cf9565b38614ec3565b614f5d9392614f2d614442565b5060018060a01b0360005460101c1660405180809781946351d407ff60e11b835261012097889760048501614417565b03915afa928315612eb357600093614f73575050565b813d8311614f9c575b614f868183612cf9565b8101918183031261226d57614706929350614cee565b503d614f7c565b60a0608093614ffe926040948551614fba81612cc3565b600097818980935282602082015282898201528260608201520152600180851b03875460101c1691865195869485938493638c8ff1d560e01b855260048501614417565b03915afa928315615088578093615016575b50505090565b9091925060a0823d8211615080575b8161503260a09383612cf9565b81010312610195575060806150739183519361504d85612cc3565b815185526020820151602086015280820151908501526060810151606085015201612dec565b6080820152388080615010565b3d9150615025565b8251903d90823e3d90fd5b61509d82306151ea565b6004546001600160a01b039081169190823b1561063f576000809360246040518096819363b243fb0160e01b83528960048401525af1918215612eb3577fd1e388cc27c5125a80cf538c12b26dc5a784071d324a81a736e4d17f238588e493602093615110575b506040519485521692a2565b61511990612c78565b38615104565b91909161512c81306151ea565b6000805460405163fbfa77cf60e01b81529192916001600160a01b03916020908290600490829060101c86165afa9081156151df5784916151c1575b501690813b156123785793829161519794958360405180978195829463a481c14b60e01b845260048401614573565b03925af19081156151b557506151aa5750565b6151b390612c78565b565b604051903d90823e3d90fd5b6151d9915060203d8111611114576111068183612cf9565b38615168565b6040513d86823e3d90fd5b6000805490916001600160a01b039160101c8216803b1561226d5783929183606492604051978895869463373873db60e11b865283600487015216602485015260448401525af19081156151b557506151aa5750565b929160018060a01b03600081815460101c16926040938451958691633078fff560e01b83528260046020998a935afa91821561536c579187918693869261534a575b5060249088519485938492630710f2ff60e51b84526004840152165afa92831561533f578093615306575b50506402540be4006152e47fccd80d359a6fbe0bfa5cbb1ecf0854adbe8c67b4ed6bf10d3c0d78c2be0f48cb959493606493612f64565b0404956152f387600e54612dc9565b600e5560018351958887528601521692a2565b909192508582813d8311615338575b61531f8183612cf9565b81010312610195575051906402540be4006152e46152ad565b503d615315565b8551903d90823e3d90fd5b602491925061536590843d8611611114576111068183612cf9565b9190615282565b86513d86823e3d90fd5b6001600160401b0381116113275760051b60200190565b61a4b1461480156153f8575b6153a1574390565b60405163a3b1b31d60e01b815260208160048160645afa908115612eb3576000916153ca575090565b906020823d82116153f0575b816153e360209383612cf9565b8101031261019557505190565b3d91506153d6565b5062066eed461461539956fe60c73da98faf96842eabd77a0c73964cd189dbaf2c9ae90923a3fed137f30e3ee6a68bcb27e839fd11f5abacf150ca4a05f4fd9a77257376f20770a83d64414439b06677afbdb5c3b9934c9ce55728be609a055c398ecd957e8d19a5d3d80a5be9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc3e7d34775bf6fd7b34e703a903ef79ab16166ebdffce96a66f4d2f84b6263bb29e58339ea4f06b5f426e5eb9fc6065defb8a8f49bceb5e938a5120e15ebe0346fa164736f6c6343000811000a",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2925,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterfaceV5)7887"
      },
      {
        "astId": 2928,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "nftRewards",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IGNSOracleRewardsV6_4_1)7101"
      },
      {
        "astId": 2931,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "pairInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(GNSPairInfosInterfaceV6)6784"
      },
      {
        "astId": 2934,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "referrals",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(GNSReferralsInterfaceV6_2)6821"
      },
      {
        "astId": 2937,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "staking",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(GNSStakingInterfaceV6_4_1)6909"
      },
      {
        "astId": 2951,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "daiVaultFeeP",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2953,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "lpFeeP",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2955,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "sssFeeP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2957,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "isPaused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 2959,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "isDone",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 2961,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "canExecuteTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2973,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "tradeLastUpdated",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(LastUpdated)3047_storage))))"
      },
      {
        "astId": 2976,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "borrowingFees",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(GNSBorrowingFeesInterfaceV6_4)6639"
      },
      {
        "astId": 2980,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "pairMaxLeverage",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2992,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "tradeData",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(TradeData)3052_storage))))"
      },
      {
        "astId": 2994,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "govFeesDai",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GNSBorrowingFeesInterfaceV6_4)6639": {
        "encoding": "inplace",
        "label": "contract GNSBorrowingFeesInterfaceV6_4",
        "numberOfBytes": "20"
      },
      "t_contract(GNSPairInfosInterfaceV6)6784": {
        "encoding": "inplace",
        "label": "contract GNSPairInfosInterfaceV6",
        "numberOfBytes": "20"
      },
      "t_contract(GNSReferralsInterfaceV6_2)6821": {
        "encoding": "inplace",
        "label": "contract GNSReferralsInterfaceV6_2",
        "numberOfBytes": "20"
      },
      "t_contract(GNSStakingInterfaceV6_4_1)6909": {
        "encoding": "inplace",
        "label": "contract GNSStakingInterfaceV6_4_1",
        "numberOfBytes": "20"
      },
      "t_contract(IGNSOracleRewardsV6_4_1)7101": {
        "encoding": "inplace",
        "label": "contract IGNSOracleRewardsV6_4_1",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterfaceV5)7887": {
        "encoding": "inplace",
        "label": "contract StorageInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_enum(TradeType)3078": {
        "encoding": "inplace",
        "label": "enum GNSTradingCallbacksV6_4_1.TradeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(LastUpdated)3047_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(LastUpdated)3047_storage)))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(TradeData)3052_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(TradeData)3052_storage)))"
      },
      "t_mapping(t_enum(TradeType)3078,t_struct(LastUpdated)3047_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)3078",
        "label": "mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated)",
        "numberOfBytes": "32",
        "value": "t_struct(LastUpdated)3047_storage"
      },
      "t_mapping(t_enum(TradeType)3078,t_struct(TradeData)3052_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)3078",
        "label": "mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData)",
        "numberOfBytes": "32",
        "value": "t_struct(TradeData)3052_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(LastUpdated)3047_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)3078,t_struct(LastUpdated)3047_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(TradeData)3052_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)3078,t_struct(TradeData)3052_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(LastUpdated)3047_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(LastUpdated)3047_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(TradeData)3052_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3078,t_struct(TradeData)3052_storage))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LastUpdated)3047_storage": {
        "encoding": "inplace",
        "label": "struct GNSTradingCallbacksV6_4_1.LastUpdated",
        "members": [
          {
            "astId": 3040,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3042,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "sl",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3044,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "limit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3046,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "created",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TradeData)3052_storage": {
        "encoding": "inplace",
        "label": "struct GNSTradingCallbacksV6_4_1.TradeData",
        "members": [
          {
            "astId": 3049,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "maxSlippageP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3051,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "_placeholder",
            "offset": 5,
            "slot": "0",
            "type": "t_uint216"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}