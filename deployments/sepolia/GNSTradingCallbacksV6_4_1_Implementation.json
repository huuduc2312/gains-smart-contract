{
  "address": "0xfFcB98511e037666A5DF4668cE1C6688D76A22dC",
  "abi": [
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongParams",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeValueDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeValueDai",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiVaultFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "ClosingFeeSharesPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "DaiVaultFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "distributed",
          "type": "bool"
        }
      ],
      "name": "GovFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "GovFeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limitIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterfaceV5.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiSentToTrader",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "exactExecution",
          "type": "bool"
        }
      ],
      "name": "LimitExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4_1.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketCloseCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiSentToTrader",
          "type": "uint256"
        }
      ],
      "name": "MarketExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4_1.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketOpenCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterfaceV5.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4_1.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "NftOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "PairMaxLeverageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "ReferralFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "SssFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "TriggerFeeCharged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canExecuteTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "closeTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiVaultFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftCloseOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftOpenOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPairsMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govFeesDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract GNSStakingInterfaceV6_4_1",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "_oracleRewards",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultToApprove",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_daiVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "openTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daiVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "setClosingFeeSharesP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "setPairMaxLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "setPairMaxLeverageArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "maxSlippageP",
              "type": "uint40"
            },
            {
              "internalType": "uint216",
              "name": "_placeholder",
              "type": "uint216"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.TradeData",
          "name": "_tradeData",
          "type": "tuple"
        }
      ],
      "name": "setTradeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sl",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "created",
              "type": "uint32"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.LastUpdated",
          "name": "_lastUpdated",
          "type": "tuple"
        }
      ],
      "name": "setTradeLastUpdated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sssFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract GNSStakingInterfaceV6_4_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeData",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "maxSlippageP",
          "type": "uint40"
        },
        {
          "internalType": "uint216",
          "name": "_placeholder",
          "type": "uint216"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeLastUpdated",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "sl",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "created",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x38d4282ceda6e032a17a9d5a0ad1ace9010fad62d79a0110372dce15aae3df0e",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0xfFcB98511e037666A5DF4668cE1C6688D76A22dC",
    "transactionIndex": 41,
    "gasUsed": "5355316",
    "logsBloom": "0x
    "blockHash": "0x04cc719e8eeafacb02b6deef960d0743fb71b5fc10977ff56d636916d9a1590b",
    "transactionHash": "0x38d4282ceda6e032a17a9d5a0ad1ace9010fad62d79a0110372dce15aae3df0e",
    "logs": [],
    "blockNumber": 6031639,
    "cumulativeGasUsed": "19645011",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ef1c08625ce569d5d79cba2892b566be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeValueDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValueDai\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiVaultFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sssFeeP\",\"type\":\"uint256\"}],\"name\":\"ClosingFeeSharesPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"DaiVaultFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"distributed\",\"type\":\"bool\"}],\"name\":\"GovFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"GovFeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiSentToTrader\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exactExecution\",\"type\":\"bool\"}],\"name\":\"LimitExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4_1.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketCloseCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiSentToTrader\",\"type\":\"uint256\"}],\"name\":\"MarketExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4_1.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketOpenCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4_1.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"NftOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"PairMaxLeverageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"ReferralFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"SssFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"TriggerFeeCharged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canExecuteTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"closeTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiVaultFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftCloseOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftOpenOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairsMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govFeesDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract GNSStakingInterfaceV6_4_1\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"_oracleRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultToApprove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daiVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"openTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daiVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"}],\"name\":\"setClosingFeeSharesP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setPairMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setPairMaxLeverageArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.TradeData\",\"name\":\"_tradeData\",\"type\":\"tuple\"}],\"name\":\"setTradeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.LastUpdated\",\"name\":\"_lastUpdated\",\"type\":\"tuple\"}],\"name\":\"setTradeLastUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sssFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract GNSStakingInterfaceV6_4_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeLastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GNSTradingCallbacksV6_4_1.sol\":\"GNSTradingCallbacksV6_4_1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/contracts/GNSTradingCallbacksV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"../interfaces/GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"../interfaces/GNSReferralsInterfaceV6_2.sol\\\";\\nimport \\\"../interfaces/GNSStakingInterfaceV6_4_1.sol\\\";\\nimport \\\"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\\\";\\nimport \\\"../interfaces/IGNSOracleRewardsV6_4_1.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\n\\ncontract GNSTradingCallbacksV6_4_1 is Initializable {\\n    // Contracts (constant)\\n    StorageInterfaceV5 public storageT;\\n    IGNSOracleRewardsV6_4_1 public nftRewards;\\n    GNSPairInfosInterfaceV6 public pairInfos;\\n    GNSReferralsInterfaceV6_2 public referrals;\\n    GNSStakingInterfaceV6_4_1 public staking;\\n\\n    // Params (constant)\\n    uint private constant PRECISION = 1e10; // 10 decimals\\n    uint private constant MAX_SL_P = 75; // -75% PNL\\n    uint private constant MAX_GAIN_P = 900; // 900% PnL (10x)\\n    uint private constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\\n\\n    // Params (adjustable)\\n    uint public daiVaultFeeP; // % of closing fee going to DAI vault (eg. 40)\\n    uint public lpFeeP; // % of closing fee going to GNS/DAI LPs (eg. 20)\\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable (DEPRECATED)\\n\\n    // Last Updated State\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated))))\\n        public tradeLastUpdated; // Block numbers for last updated\\n\\n    // v6.3.2 Storage/State\\n    GNSBorrowingFeesInterfaceV6_4 public borrowingFees;\\n    mapping(uint => uint) public pairMaxLeverage;\\n\\n    // v6.4 Storage\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData))))\\n        public tradeData; // More storage for trades / limit orders\\n\\n    // v6.4.1 State\\n    uint public govFeesDai; // 1e18\\n\\n    // Custom data types\\n    struct AggregatorAnswer {\\n        uint orderId;\\n        uint price;\\n        uint spreadP;\\n        uint open;\\n        uint high;\\n        uint low;\\n    }\\n\\n    // Useful to avoid stack too deep errors\\n    struct Values {\\n        uint posDai;\\n        uint levPosDai;\\n        uint tokenPriceDai;\\n        int profitP;\\n        uint price;\\n        uint liqPrice;\\n        uint daiSentToTrader;\\n        uint reward1;\\n        uint reward2;\\n        uint reward3;\\n        bool exactExecution;\\n    }\\n\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    struct OpenTradePrepInput {\\n        uint executionPrice;\\n        uint wantedPrice;\\n        uint marketPrice;\\n        uint spreadP;\\n        bool buy;\\n        uint pairIndex;\\n        uint positionSize;\\n        uint leverage;\\n        uint maxSlippageP;\\n        uint tp;\\n        uint sl;\\n    }\\n\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n\\n    enum CancelReason {\\n        NONE,\\n        PAUSED,\\n        MARKET_CLOSED,\\n        SLIPPAGE,\\n        TP_REACHED,\\n        SL_REACHED,\\n        EXPOSURE_LIMITS,\\n        PRICE_IMPACT,\\n        MAX_LEVERAGE,\\n        NO_TRADE,\\n        WRONG_TRADE,\\n        NOT_HIT\\n    }\\n\\n    // Events\\n    event MarketExecuted(\\n        uint indexed orderId,\\n        StorageInterfaceV5.Trade t,\\n        bool open,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeDai,\\n        int percentProfit, // before fees\\n        uint daiSentToTrader\\n    );\\n\\n    event LimitExecuted(\\n        uint indexed orderId,\\n        uint limitIndex,\\n        StorageInterfaceV5.Trade t,\\n        address indexed nftHolder,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeDai,\\n        int percentProfit,\\n        uint daiSentToTrader,\\n        bool exactExecution\\n    );\\n\\n    event MarketOpenCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        CancelReason cancelReason\\n    );\\n    event MarketCloseCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        CancelReason cancelReason\\n    );\\n    event NftOrderCanceled(\\n        uint indexed orderId,\\n        address indexed nftHolder,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        CancelReason cancelReason\\n    );\\n\\n    event ClosingFeeSharesPUpdated(\\n        uint daiVaultFeeP,\\n        uint lpFeeP,\\n        uint sssFeeP\\n    );\\n\\n    event Pause(bool paused);\\n    event Done(bool done);\\n    event GovFeesClaimed(uint valueDai);\\n\\n    event GovFeeCharged(\\n        address indexed trader,\\n        uint valueDai,\\n        bool distributed\\n    );\\n    event ReferralFeeCharged(address indexed trader, uint valueDai);\\n    event TriggerFeeCharged(address indexed trader, uint valueDai);\\n    event SssFeeCharged(address indexed trader, uint valueDai);\\n    event DaiVaultFeeCharged(address indexed trader, uint valueDai);\\n    event BorrowingFeeCharged(\\n        address indexed trader,\\n        uint tradeValueDai,\\n        uint feeValueDai\\n    );\\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\\n\\n    // Custom errors (save gas)\\n    error WrongParams();\\n    error Forbidden();\\n\\n    function initialize(\\n        StorageInterfaceV5 _storageT,\\n        IGNSOracleRewardsV6_4_1 _nftRewards,\\n        GNSPairInfosInterfaceV6 _pairInfos,\\n        GNSReferralsInterfaceV6_2 _referrals,\\n        GNSStakingInterfaceV6_4_1 _staking,\\n        GNSBorrowingFeesInterfaceV6_4 _borrowingFees,\\n        IGNSOracleRewardsV6_4_1 _oracleRewards,\\n        address vaultToApprove,\\n        uint _daiVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP,\\n        uint _canExecuteTimeout\\n    ) external initializer {\\n        if (\\n            address(_storageT) == address(0) ||\\n            address(_nftRewards) == address(0) ||\\n            address(_pairInfos) == address(0) ||\\n            address(_referrals) == address(0) ||\\n            address(_staking) == address(0) ||\\n            address(_borrowingFees) == address(0) ||\\n            address(_oracleRewards) == address(0) ||\\n            vaultToApprove == address(0) ||\\n            _daiVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\\n        ) {\\n            revert WrongParams();\\n        }\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        staking = _staking;\\n        borrowingFees = _borrowingFees;\\n        nftRewards = _oracleRewards;\\n\\n        daiVaultFeeP = _daiVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        canExecuteTimeout = _canExecuteTimeout;\\n\\n        TokenInterfaceV5 t = storageT.dai();\\n        t.approve(address(staking), type(uint256).max);\\n        t.approve(vaultToApprove, type(uint256).max);\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        _isGov();\\n        _;\\n    }\\n    modifier onlyPriceAggregator() {\\n        _isPriceAggregator();\\n        _;\\n    }\\n    modifier notDone() {\\n        _isNotDone();\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        _isTrading();\\n        _;\\n    }\\n    modifier onlyManager() {\\n        _isManager();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function _isGov() private view {\\n        if (msg.sender != storageT.gov()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isPriceAggregator() private view {\\n        if (msg.sender != address(storageT.priceAggregator())) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isNotDone() private view {\\n        if (isDone) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isTrading() private view {\\n        if (msg.sender != storageT.trading()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isManager() private view {\\n        if (msg.sender != pairInfos.manager()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    // Manage params\\n    function setPairMaxLeverage(\\n        uint pairIndex,\\n        uint maxLeverage\\n    ) external onlyManager {\\n        _setPairMaxLeverage(pairIndex, maxLeverage);\\n    }\\n\\n    function setPairMaxLeverageArray(\\n        uint[] calldata indices,\\n        uint[] calldata values\\n    ) external onlyManager {\\n        uint len = indices.length;\\n\\n        if (len != values.length) {\\n            revert WrongParams();\\n        }\\n\\n        for (uint i; i < len; ) {\\n            _setPairMaxLeverage(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\\n        pairMaxLeverage[pairIndex] = maxLeverage;\\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\\n    }\\n\\n    function setClosingFeeSharesP(\\n        uint _daiVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP\\n    ) external onlyGov {\\n        if (_daiVaultFeeP + _lpFeeP + _sssFeeP != 100) {\\n            revert WrongParams();\\n        }\\n\\n        daiVaultFeeP = _daiVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        emit ClosingFeeSharesPUpdated(_daiVaultFeeP, _lpFeeP, _sssFeeP);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n\\n        emit Pause(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n\\n        emit Done(isDone);\\n    }\\n\\n    // Claim fees\\n    function claimGovFees() external onlyGov {\\n        uint valueDai = govFeesDai;\\n        govFeesDai = 0;\\n\\n        _transferFromStorageToAddress(storageT.gov(), valueDai);\\n\\n        emit GovFeesClaimed(valueDai);\\n    }\\n\\n    // Callbacks\\n    function openTradeMarketCallback(\\n        AggregatorAnswer memory a\\n    ) external notDone {\\n        StorageInterfaceV5.PendingMarketOrder memory o = _getPendingMarketOrder(\\n            a.orderId\\n        );\\n\\n        if (o.block == 0) {\\n            return;\\n        }\\n\\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        (\\n            uint priceImpactP,\\n            uint priceAfterImpact,\\n            CancelReason cancelReason\\n        ) = _openTradePrep(\\n                OpenTradePrepInput(\\n                    a.price,\\n                    o.wantedPrice,\\n                    a.price,\\n                    a.spreadP,\\n                    t.buy,\\n                    t.pairIndex,\\n                    t.positionSizeDai,\\n                    t.leverage,\\n                    o.slippageP,\\n                    t.tp,\\n                    t.sl\\n                )\\n            );\\n\\n        t.openPrice = priceAfterImpact;\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            (\\n                StorageInterfaceV5.Trade memory finalTrade,\\n                uint tokenPriceDai\\n            ) = _registerTrade(t, false, 0);\\n\\n            emit MarketExecuted(\\n                a.orderId,\\n                finalTrade,\\n                true,\\n                finalTrade.openPrice,\\n                priceImpactP,\\n                (finalTrade.initialPosToken * tokenPriceDai) / PRECISION,\\n                0,\\n                0\\n            );\\n        } else {\\n            // Gov fee to pay for oracle cost\\n            uint govFees = _handleGovFees(\\n                t.trader,\\n                t.pairIndex,\\n                t.positionSizeDai * t.leverage,\\n                true\\n            );\\n            _transferFromStorageToAddress(\\n                t.trader,\\n                t.positionSizeDai - govFees\\n            );\\n\\n            emit MarketOpenCanceled(\\n                a.orderId,\\n                t.trader,\\n                t.pairIndex,\\n                cancelReason\\n            );\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, true);\\n    }\\n\\n    function closeTradeMarketCallback(\\n        AggregatorAnswer memory a\\n    ) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingMarketOrder memory o = _getPendingMarketOrder(\\n            a.orderId\\n        );\\n\\n        if (o.block == 0) {\\n            return;\\n        }\\n\\n        StorageInterfaceV5.Trade memory t = _getOpenTrade(\\n            o.trade.trader,\\n            o.trade.pairIndex,\\n            o.trade.index\\n        );\\n\\n        CancelReason cancelReason = t.leverage == 0\\n            ? CancelReason.NO_TRADE\\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\\n\\n        if (cancelReason != CancelReason.NO_TRADE) {\\n            StorageInterfaceV5.TradeInfo memory i = _getOpenTradeInfo(\\n                t.trader,\\n                t.pairIndex,\\n                t.index\\n            );\\n            AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n            Values memory v;\\n            v.levPosDai =\\n                (t.initialPosToken * i.tokenPriceDai * t.leverage) /\\n                PRECISION;\\n            v.tokenPriceDai = aggregator.tokenPriceDai();\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = _currentPercentProfit(\\n                    t.openPrice,\\n                    a.price,\\n                    t.buy,\\n                    t.leverage\\n                );\\n                v.posDai = v.levPosDai / t.leverage;\\n\\n                v.daiSentToTrader = _unregisterTrade(\\n                    t,\\n                    true,\\n                    v.profitP,\\n                    v.posDai,\\n                    i.openInterestDai,\\n                    (v.levPosDai *\\n                        aggregator.pairsStorage().pairCloseFeeP(t.pairIndex)) /\\n                        100 /\\n                        PRECISION,\\n                    (v.levPosDai *\\n                        aggregator.pairsStorage().pairNftLimitOrderFeeP(\\n                            t.pairIndex\\n                        )) /\\n                        100 /\\n                        PRECISION\\n                );\\n\\n                emit MarketExecuted(\\n                    a.orderId,\\n                    t,\\n                    false,\\n                    a.price,\\n                    0,\\n                    v.posDai,\\n                    v.profitP,\\n                    v.daiSentToTrader\\n                );\\n            } else {\\n                // Gov fee to pay for oracle cost\\n                uint govFee = _handleGovFees(\\n                    t.trader,\\n                    t.pairIndex,\\n                    v.levPosDai,\\n                    t.positionSizeDai > 0\\n                );\\n                t.initialPosToken -= (govFee * PRECISION) / i.tokenPriceDai;\\n\\n                storageT.updateTrade(t);\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit MarketCloseCanceled(\\n                a.orderId,\\n                o.trade.trader,\\n                o.trade.pairIndex,\\n                o.trade.index,\\n                cancelReason\\n            );\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, false);\\n    }\\n\\n    function executeNftOpenOrderCallback(\\n        AggregatorAnswer memory a\\n    ) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingNftOrder memory n = storageT\\n            .reqID_pendingNftOrder(a.orderId);\\n\\n        CancelReason cancelReason = !storageT.hasOpenLimitOrder(\\n            n.trader,\\n            n.pairIndex,\\n            n.index\\n        )\\n            ? CancelReason.NO_TRADE\\n            : CancelReason.NONE;\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterfaceV5.OpenLimitOrder memory o = storageT\\n                .getOpenLimitOrder(n.trader, n.pairIndex, n.index);\\n\\n            IGNSOracleRewardsV6_4_1.OpenLimitOrderType t = nftRewards\\n                .openLimitOrderTypes(n.trader, n.pairIndex, n.index);\\n\\n            cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice)\\n                ? CancelReason.NONE\\n                : CancelReason.NOT_HIT;\\n\\n            // Note: o.minPrice always equals o.maxPrice so can use either\\n            (\\n                uint priceImpactP,\\n                uint priceAfterImpact,\\n                CancelReason _cancelReason\\n            ) = _openTradePrep(\\n                    OpenTradePrepInput(\\n                        cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\\n                        o.maxPrice,\\n                        a.open,\\n                        a.spreadP,\\n                        o.buy,\\n                        o.pairIndex,\\n                        o.positionSize,\\n                        o.leverage,\\n                        tradeData[o.trader][o.pairIndex][o.index][\\n                            TradeType.LIMIT\\n                        ].maxSlippageP,\\n                        o.tp,\\n                        o.sl\\n                    )\\n                );\\n\\n            bool exactExecution = cancelReason == CancelReason.NONE;\\n\\n            cancelReason = !exactExecution &&\\n                (\\n                    o.maxPrice == 0 ||\\n                        t == IGNSOracleRewardsV6_4_1.OpenLimitOrderType.MOMENTUM\\n                        ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\\n                        : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\\n                )\\n                ? CancelReason.NOT_HIT\\n                : _cancelReason;\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                (\\n                    StorageInterfaceV5.Trade memory finalTrade,\\n                    uint tokenPriceDai\\n                ) = _registerTrade(\\n                        StorageInterfaceV5.Trade(\\n                            o.trader,\\n                            o.pairIndex,\\n                            0,\\n                            0,\\n                            o.positionSize,\\n                            priceAfterImpact,\\n                            o.buy,\\n                            o.leverage,\\n                            o.tp,\\n                            o.sl\\n                        ),\\n                        true,\\n                        n.index\\n                    );\\n\\n                storageT.unregisterOpenLimitOrder(\\n                    o.trader,\\n                    o.pairIndex,\\n                    o.index\\n                );\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    n.index,\\n                    finalTrade,\\n                    n.nftHolder,\\n                    StorageInterfaceV5.LimitOrder.OPEN,\\n                    finalTrade.openPrice,\\n                    priceImpactP,\\n                    (finalTrade.initialPosToken * tokenPriceDai) / PRECISION,\\n                    0,\\n                    0,\\n                    exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(\\n                a.orderId,\\n                n.nftHolder,\\n                StorageInterfaceV5.LimitOrder.OPEN,\\n                cancelReason\\n            );\\n        }\\n\\n        nftRewards.unregisterTrigger(\\n            IGNSOracleRewardsV6_4_1.TriggeredLimitId(\\n                n.trader,\\n                n.pairIndex,\\n                n.index,\\n                n.orderType\\n            )\\n        );\\n\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    function executeNftCloseOrderCallback(\\n        AggregatorAnswer memory a\\n    ) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingNftOrder memory o = storageT\\n            .reqID_pendingNftOrder(a.orderId);\\n        IGNSOracleRewardsV6_4_1.TriggeredLimitId\\n            memory triggeredLimitId = IGNSOracleRewardsV6_4_1.TriggeredLimitId(\\n                o.trader,\\n                o.pairIndex,\\n                o.index,\\n                o.orderType\\n            );\\n        StorageInterfaceV5.Trade memory t = _getOpenTrade(\\n            o.trader,\\n            o.pairIndex,\\n            o.index\\n        );\\n\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n        CancelReason cancelReason = a.open == 0\\n            ? CancelReason.MARKET_CLOSED\\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterfaceV5.TradeInfo memory i = _getOpenTradeInfo(\\n                t.trader,\\n                t.pairIndex,\\n                t.index\\n            );\\n\\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n            Values memory v;\\n            v.levPosDai =\\n                (t.initialPosToken * i.tokenPriceDai * t.leverage) /\\n                PRECISION;\\n            v.posDai = v.levPosDai / t.leverage;\\n\\n            if (o.orderType == StorageInterfaceV5.LimitOrder.LIQ) {\\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    GNSBorrowingFeesInterfaceV6_4.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        v.posDai,\\n                        t.leverage\\n                    )\\n                );\\n            }\\n\\n            v.price = o.orderType == StorageInterfaceV5.LimitOrder.TP\\n                ? t.tp\\n                : (\\n                    o.orderType == StorageInterfaceV5.LimitOrder.SL\\n                        ? t.sl\\n                        : v.liqPrice\\n                );\\n\\n            v.exactExecution =\\n                v.price > 0 &&\\n                a.low <= v.price &&\\n                a.high >= v.price;\\n\\n            if (v.exactExecution) {\\n                v.reward1 = o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                    ? (v.posDai * 5) / 100\\n                    : (v.levPosDai *\\n                        pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) /\\n                        100 /\\n                        PRECISION;\\n            } else {\\n                v.price = a.open;\\n\\n                v.reward1 = o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                    ? (\\n                        (t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice)\\n                            ? (v.posDai * 5) / 100\\n                            : 0\\n                    )\\n                    : (\\n                        ((o.orderType == StorageInterfaceV5.LimitOrder.TP &&\\n                            t.tp > 0 &&\\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\\n                            (o.orderType == StorageInterfaceV5.LimitOrder.SL &&\\n                                t.sl > 0 &&\\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\\n                            ? (v.levPosDai *\\n                                pairsStored.pairNftLimitOrderFeeP(\\n                                    t.pairIndex\\n                                )) /\\n                                100 /\\n                                PRECISION\\n                            : 0\\n                    );\\n            }\\n\\n            cancelReason = v.reward1 == 0\\n                ? CancelReason.NOT_HIT\\n                : CancelReason.NONE;\\n\\n            // If can be triggered\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = _currentPercentProfit(\\n                    t.openPrice,\\n                    v.price,\\n                    t.buy,\\n                    t.leverage\\n                );\\n                v.tokenPriceDai = aggregator.tokenPriceDai();\\n\\n                v.daiSentToTrader = _unregisterTrade(\\n                    t,\\n                    false,\\n                    v.profitP,\\n                    v.posDai,\\n                    i.openInterestDai,\\n                    o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                        ? v.reward1\\n                        : (v.levPosDai *\\n                            pairsStored.pairCloseFeeP(t.pairIndex)) /\\n                            100 /\\n                            PRECISION,\\n                    v.reward1\\n                );\\n\\n                // _handleOracleRewards(\\n                //     triggeredLimitId,\\n                //     t.trader,\\n                //     (v.reward1 * 2) / 10,\\n                //     v.tokenPriceDai\\n                // );\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    o.index,\\n                    t,\\n                    o.nftHolder,\\n                    o.orderType,\\n                    v.price,\\n                    0,\\n                    v.posDai,\\n                    v.profitP,\\n                    v.daiSentToTrader,\\n                    v.exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(\\n                a.orderId,\\n                o.nftHolder,\\n                o.orderType,\\n                cancelReason\\n            );\\n        }\\n\\n        nftRewards.unregisterTrigger(triggeredLimitId);\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    // Shared code between market & limit callbacks\\n    function _registerTrade(\\n        StorageInterfaceV5.Trade memory trade,\\n        bool isLimitOrder,\\n        uint limitIndex\\n    ) private returns (StorageInterfaceV5.Trade memory, uint) {\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        Values memory v;\\n\\n        v.levPosDai = trade.positionSizeDai * trade.leverage;\\n        v.tokenPriceDai = aggregator.tokenPriceDai();\\n\\n        // 1. Charge referral fee (if applicable) and send DAI amount to vault\\n        if (referrals.getTraderReferrer(trade.trader) != address(0)) {\\n            // Use this variable to store lev pos dai for dev/gov fees after referral fees\\n            // and before volumeReferredDai increases\\n            v.posDai =\\n                (v.levPosDai *\\n                    (100 *\\n                        PRECISION -\\n                        referrals.getPercentOfOpenFeeP(trade.trader))) /\\n                100 /\\n                PRECISION;\\n\\n            v.reward1 = referrals.distributePotentialReward(\\n                trade.trader,\\n                v.levPosDai,\\n                pairsStored.pairOpenFeeP(trade.pairIndex),\\n                v.tokenPriceDai\\n            );\\n\\n            _sendToVault(v.reward1, trade.trader);\\n            trade.positionSizeDai -= v.reward1;\\n\\n            emit ReferralFeeCharged(trade.trader, v.reward1);\\n        }\\n\\n        // 2. Calculate gov fee (- referral fee if applicable)\\n        uint govFee = _handleGovFees(\\n            trade.trader,\\n            trade.pairIndex,\\n            (v.posDai > 0 ? v.posDai : v.levPosDai),\\n            true\\n        );\\n        v.reward1 = govFee; // SSS fee (previously dev fee)\\n\\n        // 3. Calculate Market/Limit fee\\n        v.reward2 =\\n            (v.levPosDai * pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) /\\n            100 /\\n            PRECISION;\\n\\n        // 3.1 Deduct gov fee, SSS fee (previously dev fee), Market/Limit fee\\n        trade.positionSizeDai -= govFee + v.reward1 + v.reward2;\\n\\n        // 3.2 Distribute Oracle fee and send DAI amount to vault if applicable\\n        if (isLimitOrder) {\\n            v.reward3 = (v.reward2 * 2) / 10; // 20% of limit fees\\n            _sendToVault(v.reward3, trade.trader);\\n\\n            // _handleOracleRewards(\\n            //     IGNSOracleRewardsV6_4_1.TriggeredLimitId(\\n            //         trade.trader,\\n            //         trade.pairIndex,\\n            //         limitIndex,\\n            //         StorageInterfaceV5.LimitOrder.OPEN\\n            //     ),\\n            //     trade.trader,\\n            //     v.reward3,\\n            //     v.tokenPriceDai\\n            // );\\n        }\\n\\n        // 3.3 Distribute SSS fee (previous dev fee + market/limit fee - oracle reward)\\n        _distributeStakingReward(\\n            trade.trader,\\n            v.reward1 + v.reward2 - v.reward3\\n        );\\n\\n        // 4. Set trade final details\\n        trade.index = storageT.firstEmptyTradeIndex(\\n            trade.trader,\\n            trade.pairIndex\\n        );\\n        trade.initialPosToken =\\n            (trade.positionSizeDai * PRECISION) /\\n            v.tokenPriceDai;\\n\\n        trade.tp = _correctTp(\\n            trade.openPrice,\\n            trade.leverage,\\n            trade.tp,\\n            trade.buy\\n        );\\n        trade.sl = _correctSl(\\n            trade.openPrice,\\n            trade.leverage,\\n            trade.sl,\\n            trade.buy\\n        );\\n\\n        // 5. Call other contracts\\n        pairInfos.storeTradeInitialAccFees(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy\\n        );\\n        pairsStored.updateGroupCollateral(\\n            trade.pairIndex,\\n            trade.positionSizeDai,\\n            trade.buy,\\n            true\\n        );\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.positionSizeDai * trade.leverage,\\n            true,\\n            trade.buy\\n        );\\n\\n        // 6. Store final trade in storage contract\\n        storageT.storeTrade(\\n            trade,\\n            StorageInterfaceV5.TradeInfo(\\n                0,\\n                v.tokenPriceDai,\\n                trade.positionSizeDai * trade.leverage,\\n                0,\\n                0,\\n                false\\n            )\\n        );\\n\\n        // 7. Store tradeLastUpdated\\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][\\n            trade.pairIndex\\n        ][trade.index][TradeType.MARKET];\\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\\n        lastUpdated.tp = currBlock;\\n        lastUpdated.sl = currBlock;\\n        lastUpdated.created = currBlock;\\n\\n        return (trade, v.tokenPriceDai);\\n    }\\n\\n    function _unregisterTrade(\\n        StorageInterfaceV5.Trade memory trade,\\n        bool marketOrder,\\n        int percentProfit, // PRECISION\\n        uint currentDaiPos, // 1e18\\n        uint openInterestDai, // 1e18\\n        uint closingFeeDai, // 1e18\\n        uint nftFeeDai // 1e18 (= SSS reward if market order)\\n    ) private returns (uint daiSentToTrader) {\\n        IGToken vault = storageT.vault();\\n\\n        // 1. Calculate net PnL (after all closing and holding fees)\\n        (daiSentToTrader, ) = _getTradeValue(\\n            trade,\\n            currentDaiPos,\\n            percentProfit,\\n            closingFeeDai + nftFeeDai\\n        );\\n\\n        // 2. Calls to other contracts\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            openInterestDai,\\n            false,\\n            trade.buy\\n        );\\n        _getPairsStorage().updateGroupCollateral(\\n            trade.pairIndex,\\n            openInterestDai / trade.leverage,\\n            trade.buy,\\n            false\\n        );\\n\\n        // 3. Unregister trade from storage\\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\\n\\n        // 4.1 If collateral in storage\\n        if (trade.positionSizeDai > 0) {\\n            Values memory v;\\n\\n            // 5. DAI vault reward\\n            v.reward2 = (closingFeeDai * daiVaultFeeP) / 100;\\n            _transferFromStorageToAddress(address(this), v.reward2);\\n            vault.distributeReward(v.reward2);\\n\\n            emit DaiVaultFeeCharged(trade.trader, v.reward2);\\n\\n            // 6. SSS reward\\n            v.reward3 =\\n                (marketOrder ? nftFeeDai : (nftFeeDai * 8) / 10) +\\n                (closingFeeDai * sssFeeP) /\\n                100;\\n            _distributeStakingReward(trade.trader, v.reward3);\\n\\n            // 7. Take DAI from vault if winning trade\\n            // or send DAI to vault if losing trade\\n            uint daiLeftInStorage = currentDaiPos - v.reward3 - v.reward2;\\n\\n            if (daiSentToTrader > daiLeftInStorage) {\\n                vault.sendAssets(\\n                    daiSentToTrader - daiLeftInStorage,\\n                    trade.trader\\n                );\\n                _transferFromStorageToAddress(trade.trader, daiLeftInStorage);\\n            } else {\\n                _sendToVault(daiLeftInStorage - daiSentToTrader, trade.trader);\\n                _transferFromStorageToAddress(trade.trader, daiSentToTrader);\\n            }\\n\\n            // 4.2 If collateral in vault, just send dai to trader from vault\\n        } else {\\n            vault.sendAssets(daiSentToTrader, trade.trader);\\n        }\\n    }\\n\\n    // Setters (external)\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata _id,\\n        LastUpdated memory _lastUpdated\\n    ) external onlyTrading {\\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][\\n            _id.tradeType\\n        ] = _lastUpdated;\\n    }\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata _id,\\n        TradeData memory _tradeData\\n    ) external onlyTrading {\\n        tradeData[_id.trader][_id.pairIndex][_id.index][\\n            _id.tradeType\\n        ] = _tradeData;\\n    }\\n\\n    // Getters (private)\\n    function _getTradeValue(\\n        StorageInterfaceV5.Trade memory trade,\\n        uint currentDaiPos, // 1e18\\n        int percentProfit, // PRECISION\\n        uint closingFees // 1e18\\n    ) private returns (uint value, uint borrowingFee) {\\n        int netProfitP;\\n\\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(\\n            trade,\\n            currentDaiPos,\\n            percentProfit\\n        );\\n        value = pairInfos.getTradeValue(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy,\\n            currentDaiPos,\\n            trade.leverage,\\n            netProfitP,\\n            closingFees\\n        );\\n\\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\\n    }\\n\\n    function _getBorrowingFeeAdjustedPercentProfit(\\n        StorageInterfaceV5.Trade memory trade,\\n        uint currentDaiPos, // 1e18\\n        int percentProfit // PRECISION\\n    ) private view returns (int netProfitP, uint borrowingFee) {\\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\\n            GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput(\\n                trade.trader,\\n                trade.pairIndex,\\n                trade.index,\\n                trade.buy,\\n                currentDaiPos,\\n                trade.leverage\\n            )\\n        );\\n        netProfitP =\\n            percentProfit -\\n            int((borrowingFee * 100 * PRECISION) / currentDaiPos);\\n    }\\n\\n    function _withinMaxLeverage(\\n        uint pairIndex,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\\n        return\\n            pairMaxLev == 0\\n                ? leverage <= _getPairsStorage().pairMaxLeverage(pairIndex)\\n                : leverage <= pairMaxLev;\\n    }\\n\\n    function _withinExposureLimits(\\n        uint pairIndex,\\n        bool buy,\\n        uint positionSizeDai,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint levPositionSizeDai = positionSizeDai * leverage;\\n\\n        return\\n            storageT.openInterestDai(pairIndex, buy ? 0 : 1) +\\n                levPositionSizeDai <=\\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeDai);\\n    }\\n\\n    function _currentPercentProfit(\\n        uint openPrice,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) private pure returns (int p) {\\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\\n\\n        p = openPrice > 0\\n            ? ((\\n                buy\\n                    ? int(currentPrice) - int(openPrice)\\n                    : int(openPrice) - int(currentPrice)\\n            ) *\\n                100 *\\n                int(PRECISION) *\\n                int(leverage)) / int(openPrice)\\n            : int(0);\\n\\n        p = p > maxPnlP ? maxPnlP : p;\\n    }\\n\\n    function _correctTp(\\n        uint openPrice,\\n        uint leverage,\\n        uint tp,\\n        bool buy\\n    ) private pure returns (uint) {\\n        if (\\n            tp == 0 ||\\n            _currentPercentProfit(openPrice, tp, buy, leverage) ==\\n            int(MAX_GAIN_P) * int(PRECISION)\\n        ) {\\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\\n\\n            return\\n                buy\\n                    ? openPrice + tpDiff\\n                    : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\\n        }\\n\\n        return tp;\\n    }\\n\\n    function _correctSl(\\n        uint openPrice,\\n        uint leverage,\\n        uint sl,\\n        bool buy\\n    ) private pure returns (uint) {\\n        if (\\n            sl > 0 &&\\n            _currentPercentProfit(openPrice, sl, buy, leverage) <\\n            int(MAX_SL_P) * int(PRECISION) * -1\\n        ) {\\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\\n\\n            return buy ? openPrice - slDiff : openPrice + slDiff;\\n        }\\n\\n        return sl;\\n    }\\n\\n    function _marketExecutionPrice(\\n        uint price,\\n        uint spreadP,\\n        bool long\\n    ) private pure returns (uint) {\\n        uint priceDiff = (price * spreadP) / 100 / PRECISION;\\n\\n        return long ? price + priceDiff : price - priceDiff;\\n    }\\n\\n    function _openTradePrep(\\n        OpenTradePrepInput memory c\\n    )\\n        private\\n        view\\n        returns (\\n            uint priceImpactP,\\n            uint priceAfterImpact,\\n            CancelReason cancelReason\\n        )\\n    {\\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\\n            _marketExecutionPrice(c.executionPrice, c.spreadP, c.buy),\\n            c.pairIndex,\\n            c.buy,\\n            c.positionSize * c.leverage\\n        );\\n\\n        uint maxSlippage = c.maxSlippageP > 0\\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\\n            : c.wantedPrice / 100; // 1% by default\\n\\n        cancelReason = isPaused\\n            ? CancelReason.PAUSED\\n            : (\\n                c.marketPrice == 0\\n                    ? CancelReason.MARKET_CLOSED\\n                    : (\\n                        c.buy\\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\\n                    )\\n                    ? CancelReason.SLIPPAGE\\n                    : (c.tp > 0 &&\\n                        (\\n                            c.buy\\n                                ? priceAfterImpact >= c.tp\\n                                : priceAfterImpact <= c.tp\\n                        ))\\n                    ? CancelReason.TP_REACHED\\n                    : (c.sl > 0 &&\\n                        (\\n                            c.buy\\n                                ? priceAfterImpact <= c.sl\\n                                : priceAfterImpact >= c.sl\\n                        ))\\n                    ? CancelReason.SL_REACHED\\n                    : !_withinExposureLimits(\\n                        c.pairIndex,\\n                        c.buy,\\n                        c.positionSize,\\n                        c.leverage\\n                    )\\n                    ? CancelReason.EXPOSURE_LIMITS\\n                    : priceImpactP * c.leverage >\\n                        pairInfos.maxNegativePnlOnOpenP()\\n                    ? CancelReason.PRICE_IMPACT\\n                    : !_withinMaxLeverage(c.pairIndex, c.leverage)\\n                    ? CancelReason.MAX_LEVERAGE\\n                    : CancelReason.NONE\\n            );\\n    }\\n\\n    function _getPendingMarketOrder(\\n        uint orderId\\n    ) private view returns (StorageInterfaceV5.PendingMarketOrder memory) {\\n        return storageT.reqID_pendingMarketOrder(orderId);\\n    }\\n\\n    function _getPairsStorage() private view returns (PairsStorageInterfaceV6) {\\n        return storageT.priceAggregator().pairsStorage();\\n    }\\n\\n    function _getOpenTrade(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterfaceV5.Trade memory) {\\n        return storageT.openTrades(trader, pairIndex, index);\\n    }\\n\\n    function _getOpenTradeInfo(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterfaceV5.TradeInfo memory) {\\n        return storageT.openTradesInfo(trader, pairIndex, index);\\n    }\\n\\n    // Utils (private)\\n    function _distributeStakingReward(address trader, uint amountDai) private {\\n        _transferFromStorageToAddress(address(this), amountDai);\\n        staking.distributeRewardDai(amountDai);\\n        emit SssFeeCharged(trader, amountDai);\\n    }\\n\\n    function _sendToVault(uint amountDai, address trader) private {\\n        _transferFromStorageToAddress(address(this), amountDai);\\n        storageT.vault().receiveAssets(amountDai, trader);\\n    }\\n\\n    function _transferFromStorageToAddress(address to, uint amountDai) private {\\n        storageT.transferDai(address(storageT), to, amountDai);\\n    }\\n\\n    // function _handleOracleRewards(\\n    //     IGNSOracleRewardsV6_4_1.TriggeredLimitId memory triggeredLimitId,\\n    //     address trader,\\n    //     uint oracleRewardDai,\\n    //     uint tokenPriceDai\\n    // ) private {\\n    //     uint oracleRewardToken = ((oracleRewardDai * PRECISION) /\\n    //         tokenPriceDai);\\n    //     nftRewards.distributeOracleReward(triggeredLimitId, oracleRewardToken);\\n\\n    //     emit TriggerFeeCharged(trader, oracleRewardDai);\\n    // }\\n\\n    function _handleGovFees(\\n        address trader,\\n        uint pairIndex,\\n        uint leveragedPositionSize,\\n        bool distribute\\n    ) private returns (uint govFee) {\\n        govFee =\\n            (leveragedPositionSize *\\n                storageT.priceAggregator().openFeeP(pairIndex)) /\\n            PRECISION /\\n            100;\\n\\n        if (distribute) {\\n            govFeesDai += govFee;\\n        }\\n\\n        emit GovFeeCharged(trader, govFee, distribute);\\n    }\\n\\n    // Getters (public)\\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\\n        uint len = _getPairsStorage().pairsCount();\\n        uint[] memory lev = new uint[](len);\\n\\n        for (uint i; i < len; ) {\\n            lev[i] = pairMaxLeverage[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return lev;\\n    }\\n}\\n\",\"keccak256\":\"0xddcb5bf6d8119d162d4515ab95b431c06aec5372e884458592504ef0a860188b\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ChainlinkFeedInterfaceV5 {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0xd13756cf435ea7e26ec8dbceed69f93553b142029e3c1753367769dde6d9cfd7\",\"license\":\"MIT\"},\"contracts/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSBorrowingFeesInterfaceV6_4 {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1e71c17d0c0428b673324ef58a8d8fb03ff3caeb6802558347f1aeb5ee49dd8a\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSPairInfosInterfaceV6 {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71feae30036c784a9685909bfc1c8132fca5384a5a80db79f35b5864470a90a6\",\"license\":\"MIT\"},\"contracts/interfaces/GNSReferralsInterfaceV6_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSReferralsInterfaceV6_2 {\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referral\\n    ) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeDai,\\n        uint pairOpenFeeP,\\n        uint tokenPriceDai\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(\\n        address trader\\n    ) external view returns (address referrer);\\n}\\n\",\"keccak256\":\"0x1e272b18fda8f42e080107f38fdad48148cd913acdae2f6eecec5790597a92da\",\"license\":\"MIT\"},\"contracts/interfaces/GNSStakingInterfaceV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSStakingInterfaceV6_4_1 {\\n    // Structs\\n    struct User {\\n        uint128 stakedTokens; // 1e18\\n        uint128 debtDai; // 1e18\\n    }\\n\\n    struct UnlockSchedule {\\n        uint128 totalTokens;\\n        uint128 claimedTokens;\\n        uint128 debtDai;\\n        uint48 start; // block.timestamp (seconds)\\n        uint48 duration; // in seconds\\n        bool revocable;\\n        UnlockType unlockType;\\n        uint16 __placeholder;\\n    }\\n\\n    struct UnlockScheduleInput {\\n        uint128 totalTokens;\\n        uint48 start; // block.timestamp (seconds)\\n        uint48 duration; // in seconds\\n        bool revocable;\\n        UnlockType unlockType;\\n    }\\n\\n    enum UnlockType {\\n        LINEAR,\\n        CLIFF\\n    }\\n\\n    function govFund() external returns (address);\\n\\n    function distributeRewardDai(uint amount) external;\\n\\n    function createUnlockSchedule(\\n        UnlockScheduleInput memory schedule,\\n        address user\\n    ) external;\\n\\n    function getUnlockSchedules(\\n        address user\\n    ) external view returns (UnlockSchedule[] memory schedules);\\n\\n    function unlockedAmount(\\n        UnlockSchedule memory v,\\n        uint48 timestamp\\n    ) external view returns (uint128 amount);\\n\\n    function releasable(\\n        UnlockSchedule memory v,\\n        uint48 timestamp\\n    ) external view returns (uint128 amount);\\n}\\n\",\"keccak256\":\"0xea01b678637b3859d96af101afa681e61e2e5d0d79dde4c58edf37c2ce82274d\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IGNSOracleRewardsV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport {StorageInterfaceV5} from \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface IGNSOracleRewardsV6_4_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeTrigger(TriggeredLimitId calldata) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeOracleReward(TriggeredLimitId calldata, uint) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x92824c7696db412fa7b11d7c2ececacd8a2fd496a687058b6b8e416da4c12b43\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1fd411df874a31e89b8a26375446f6bf9d14279a1e02ee1e6541f0f2a1bec9da\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x17570efd5c6708b7adc07cd3fdb11a5983bc5db9f7b3d0bf0f50b34f95ea6358\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosDai(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd274cbab16c2f7a08cd33c1c59921fae308aef6dea851621c5f1540e8c7733f6\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity ^0.8.7;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function openTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function openTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders()\\n        external\\n        view\\n        returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(\\n        TriggeredLimitId calldata,\\n        address,\\n        uint\\n    ) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(\\n        TriggeredLimitId calldata,\\n        uint,\\n        uint\\n    ) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(\\n        uint,\\n        address,\\n        uint,\\n        address,\\n        uint,\\n        uint\\n    ) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(\\n        address,\\n        uint,\\n        uint,\\n        TradeType\\n    ) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata,\\n        LastUpdated memory\\n    ) external;\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata,\\n        TradeData memory\\n    ) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x98174fe7932d5de018579977878f46b4c724df99d9ad38e0677218d9aef7b89a\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface TokenInterfaceV5 {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1ad2a4fa990051fb693928d91a6c3192cfd68604d12436e7459c4d9f96cccd5\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0x6c7fba5c30c9f2c493d0fa6bfa8fb4414e8d74aa253cddb145b1496269cb6c1a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001757615fca90816200001d8239f35b600080fdfe61010080604052600436101561001457600080fd5b600060c05260003560e01c9081629d93ca14612d5a57508062e0fa8914612cc45780630241e05014612bea5780631346b0ff14612bbf57806316fff07414612b9257806318407fe014612b7257806321c8619614612a8757806323f7197b146119c0578063281b693c1461199257806337edb1381461185557806346f93a63146117f357806348829122146117cc5780634cf088d9146117a1578063531cc965146117765780635ad9f9931461174b57806361ba6c3d1461172d578063676c51641461170d5780637bb6c11c146116ed5780637d490caf146116c75780637e09ae8a1461159e5780638456cb59146115385780638f062227146115105780639bd24d8314611492578063a38ea9a814611472578063ae8421e114611402578063b187bd26146113dd578063b47ee40814610257578063c68078b9146101c1578063c68365df146101a15763d3dc75391461016d57600080fd5b3461019b5760c05180600319360112610198576003546040516001600160a01b039091168152602090f35b80fd5b60c05180fd5b3461019b5760c05180600319360112610198576020600654604051908152f35b3461019b57606036600319011261019b576044356024356004356101e361342a565b60646101f8846101f385856132d1565b6132d1565b03610245577f0caa98ed9a1605da290817d1f67b1b83c63f9229abeca5123df5d90581c495589260609282600555806006558160075560405192835260208301526040820152a160c05180f35b604051635863f78960e01b8152600490fd5b3461019b5761026536613224565b61026d614dba565b61027561401e565b60018060a01b0360c0515460101c16815190604051916399794d3560e01b8352600483015260c082602481845afa9182156104345760c051926113ac575b50604082810151606084015160808501519251636e6f99cd60e11b81529392602092859283926102f2929091906001600160a01b031660048501614e7b565b0381845afa9182156104345760c05192611370575b5060c05180921560001461136b575060095b8092600c82101561115e5750156104a7575b50600c811015610456578061046e575b5060015460408201516060830151608084015160a094909401516001600160a01b039384169492909316929091600482101561045657610397926040519461038286613180565b85526020850152604084015260608301614ea6565b813b1561019b57604051809263bf654d2b60e01b825281806103bf60c0519560048301614eb2565b039160c051905af1801561043457610441575b5060c051805491519160101c6001600160a01b031690813b1561019857506040519163201d8bdb60e01b835260048301528160248160c05180945af180156104345761041f575b60c05180f35b6104289061319b565b60c05180156104195780fd5b6040513d60c051823e3d90fd5b61044a9061319b565b60c05180156103d25780fd5b634e487b7160e01b60c051526021600452602460c051fd5b8251600080516020615f7e833981519152604060018060a01b03855116936104a082519160038352602083019061349f565ba38261033b565b604083810151606085015160808601519251632e21e28b60e21b815294506101a092859283926104e492916001600160a01b031660048501614e7b565b0381845afa9081156104345760c0519161126b575b600154604085810151606087015160808801519251636a6f32f560e11b8152965060209387936001600160a01b03918216938593849361053e93921660048501614e7b565b03915afa9283156104345760c0519361122e575b5060808501519061014083015180921015918261121f575b5060c051911561121757815b600c83101561115e575061066960c051831560001461120c57610140850151905b856101408101519160608b01519060408c015160a0840151151560208501519060608601519260c08701519460018060a01b038851169052600d60205260c05160408120906020890151905260205260c051604081209060408901519052602052604060c05120600160005260205264ffffffffff604060002054169561010060e0890151980151986040519a61062d8c6131ae565b8b5260208b015260408a01526060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152615255565b84929391941515968761117a575b5060c05196156111755750600b5b8096600c82101561115e5750156106a0575b5050505061032b565b60206004916106e4958760018060a01b0381511691848201519060608301519060a084015115159160c08501519361010060e0870151960151966040519d8e6131ca565b8d52888d015260c05160408d015260c05160608d015260808c015260a08b015260c08a015260e0890152610100880152610120870152610722614eec565b50604051633078fff560e01b815292839182905afa9081156104345760c0519161113f575b506040516335b03c1760e01b81526020816004816001600160a01b0386165afa9081156104345760c05191611110575b506004602061078461404c565b93610798608089015160e08a01519061346c565b85830152604051631e44744160e11b815260c05190938492909183916001600160a01b03165af19081156104345760c051916110de575b5060408381019190915260035486519151631862c18d60e31b81526001600160a01b039283166004820152911690602081602481855afa9081156104345760c051916110a4575b506001600160a01b0316610eb9575b5084516020860151835161084a926001600160a01b031691908015610ead5791615d0b565b60e0830181905260208084015187820151604051634e46e97d60e11b8152600481019190915291826024816001600160a01b0388165afa9182156104345760c05192610e77575b506108d7926402540be40060646108ae6108cd956108c19561346c565b040461010087015260e0860151906132d1565b610100850151906132d1565b6080870151613492565b6080860152610100820151808060011b0460021481151715610e2857600a60019190911b046101208301818152865161094d9261091d916001600160a01b031690615bec565b61094760018060a01b038851169161093f60e0870151610100880151906132d1565b905190613492565b90615b60565b60c05154855160208781015160405163292c161760e01b8152939192849260101c6001600160a01b03908116928492839261098d92911660048401613301565b03915afa9081156104345760c05191610e40575b5060408601526080850151806402540be4008102046402540be4001481151715610e285760408301516109da916402540be400026134ac565b6060860152610a0060a086015160e08701516101008801519060c0890151151592615167565b610100860152610a2760a086015160e08701516101208801519060c08901511515926151ea565b61012086015260025485516020870151604088015160c08901516001600160a01b039384169490931692151591833b1561019b5760405194630735e1cd60e11b865260048601526024850152604484015260648301528160848160c05180945af1801561043457610e13575b506020850151608086015160c08701519092901515906001600160a01b0381163b1561019b57610add936040518095819482936310787e2f60e11b845260c0519760048501614f38565b60c051919003926001600160a01b03165af1801561043457610dfe575b50600b54845160208601516040870151608088015160e089015192946001600160a01b03948516949293921691610b309161346c565b9160c0890151151594823b1561019b57610b646040519687958694859463ce67edfb60e01b865260c0519960048701614f76565b039160c051905af1801561043457610de9575b5060c051546040820151608086015160e0870151919260101c6001600160a01b031691610ba39161346c565b9160405192610bb1846131e6565b60c0518452602084019182526040840190815260c0516060850190815260c051916080860192835260c0519360a08701948552853b1561019b5760405163c311ab3160e01b815296610c06600489018d6134cc565b516101448801525161016487015251610184860152516101a4850152516101c48401525115156101e4830152816102048160c05180945af1801561043457610dd4575b5060409060018060a01b0385511660c05152600a60205260c051828120906020870151905260205260c051828120908387015190526020528160c0512060008052602052610cbf8260002063ffffffff610ca1615e46565b16908163ffffffff19825416178155610cba8282614fde565b615001565b01519360c05160018060a01b03815460101c1660018060a01b03835116926040602082015191015192823b15610198575090610d1793929160405180958194829363b4b0f56760e01b845260c0519760048501614e7b565b039160c051905af1801561043457610dbf575b50600080516020615efe833981519152916102409188519460808901519260018060a01b038a511697610d816402540be400610d6f60a086015193606087015161346c565b049360405196875260208701906134cc565b60036101608601526101808501526101a08401526101c083015260c0516101e083015260c05161020083015215610220820152a38380808080610697565b610dc89061319b565b60c0518015610d2a5780fd5b610ddd9061319b565b60c0518015610c495780fd5b610df29061319b565b60c0518015610b775780fd5b610e079061319b565b60c0518015610afa5780fd5b610e1c9061319b565b60c0518015610a935780fd5b634e487b7160e01b60c051526011600452602460c051fd5b90506020813d602011610e6f575b81610e5b60209383613201565b81010312610e6a57518a6109a1565b600080fd5b3d9150610e4e565b91506020823d602011610ea5575b81610e9260209383613201565b81010312610e6a579051906108d7610891565b3d9150610e85565b50602085015191615d0b565b602083810151875160405163201ad16d60e01b81526001600160a01b0390911660048201529182602481865afa9182156104345760c0519261106e575b50610f12606491610f0c6402540be4009461347f565b9061346c565b04048352855160208085015181890151604051638251135b60e01b815260048101919091529290916001600160a01b03918216918490602490829089165afa9283156104345760c05193611039575b5060849060209394604088015160405196879586946373c637e960e11b8652600486015260248501526044840152606483015260c051905af19081156104345760c05191611007575b5060e0830181815286519091610fc9916001600160a01b031690615bec565b610fd881516080880151613492565b6080870152600080516020615ebe833981519152602060018060a01b038851169251604051908152a289610825565b90506020813d602011611031575b8161102260209383613201565b81010312610e6a57518a610faa565b3d9150611015565b9092506020813d602011611066575b8161105560209383613201565b81010312610e6a5751916084610f61565b3d9150611048565b91506020823d60201161109c575b8161108960209383613201565b81010312610e6a57905190610f12610ef6565b3d915061107c565b90506020813d6020116110d6575b816110bf60209383613201565b8101031261019b576110d09061331c565b8b610816565b3d91506110b2565b90506020813d602011611108575b816110f960209383613201565b81010312610e6a57518a6107cf565b3d91506110ec565b611132915060203d602011611138575b61112a8183613201565b81019061402d565b89610777565b503d611120565b611158915060203d6020116111385761112a8183613201565b88610747565b634e487b7160e01b9052602160045260c051602490fd5b610685565b909650610140860151159081156111f8575b5060c05180916000146111ca57505060a0850151156111b9576060880151610140860151115b9589610677565b6060880151610140860151106111b2565b505060a0850151156111e7576060880151610140860151106111b2565b6060880151610140860151116111b2565b90506003811015610456576002148961118c565b606088015190610597565b600b91610576565b60a0870151111591508661056a565b9092506020813d602011611263575b8161124a60209383613201565b8101031261019b5751600381101561019b579185610552565b3d915061123d565b90506101a0823d6101a011611363575b816112896101a09383613201565b8101031261019b576040516001600160401b036101a082019081119082111761134d5761053e926101a082016040526112c18161331c565b8252602081015160208301526040810151604083015260608101516060830152608081015160808301526112f760a082016132f4565b60a083015260c081015160c083015260e081015160e083015261010080820151908301526101208082015190830152610140808201519083015261016080820151908301526101808091015190820152906104f9565b634e487b7160e01b600052604160045260246000fd5b3d915061127b565b610319565b9091506020813d6020116113a4575b8161138c60209383613201565b8101031261019b5761139d906132f4565b9084610307565b3d915061137f565b6113cf91925060c03d60c0116113d6575b6113c78183613201565b810190614e14565b90836102b3565b503d6113bd565b3461019b5760c0518060031936011261019857602060ff600854166040519015158152f35b3461019b5760c051806003193601126101985761141d61342a565b7fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888602060085461ff0060ff8260081c161560081b169061ff001916178060085560ff6040519160081c1615158152a160c05180f35b3461019b5760c05180600319360112610198576020600554604051908152f35b3461019b5760806114df6114a53661326c565b9260018060a09493941b031660c05152600a60205260c0519060408220915260205260c05190604082209152602052604060c051206132a3565b546040519063ffffffff908181168352818160201c166020840152818160401c16604084015260601c166060820152f35b3461019b5760c0518060031936011261019857602060ff60085460081c166040519015158152f35b3461019b5760c051806003193601126101985761155361342a565b7f9422424b175dda897495a07b091ef74a3ef715cf6d866fc972954c1c7f459304602060085460ff80821615168060ff198316176008556040519160c051161715158152a160c05180f35b3461019b573660031901610100811261019b5760801361019b57608036608319011261019b576040516115d081613180565b63ffffffff906084358281168103610e6a57815260a435918083168303610e6a576020820192835260c4358181168103610e6a576040830190815260e435908282168203610e6a5760608401918252611627615053565b6001600160a01b0361163761503d565b1660c05152600a60205260c0516040812090602435905260205260c0516040812090604435905260205260c05160408120606435916002831015610198575061041996856116896116a09482946132a3565b97511663ffffffff19885416178755511685614fde565b51835463ffffffff60401b191660409190911b63ffffffff60401b16178355511690615001565b3461019b576104196116d836613224565b6116e0614dba565b6116e861401e565b61409f565b3461019b5760c05180600319360112610198576020600754604051908152f35b3461019b5760c05180600319360112610198576020600954604051908152f35b3461019b5761041961173e36613224565b61174661401e565b613537565b3461019b5760c05180600319360112610198576001546040516001600160a01b039091168152602090f35b3461019b5760c0518060031936011261019857600b546040516001600160a01b039091168152602090f35b3461019b5760c05180600319360112610198576004546040516001600160a01b039091168152602090f35b3461019b57604036600319011261019b576117e5613330565b6104196024356004356133ed565b3461019b57604061183d6118063661326c565b9260018060a09493941b031660c05152600d60205260c05190858220915260205260c0519084822091526020528260c051206132a3565b5481519064ffffffffff8116825260281c6020820152f35b3461019b5760c05180600319360112610198576001600160a01b03611878615942565b16604051809163b81b2b7160e01b825281600460209485935afa9081156104345760c05191611965575b506118ac81615e2f565b6118b96040519182613201565b8181526118c582615e2f565b8184019290601f190136843760c0515b81811061192057505090604051928392818401908285525180915260408401929160c0515b82811061190957505050500390f35b8351855286955093810193928101926001016118fa565b8060c05152600c855260c051604081205490845183101561194e5750600582901b84018601526001016118d5565b634e487b7160e01b9052603260045260c051602490fd5b90508181813d831161198b575b61197c8183613201565b81010312610e6a5751826118a2565b503d611972565b3461019b57602036600319011261019b5760043560c05152600c6020526020604060c0512054604051908152f35b3461019b576119ce36613224565b6119d6614dba565b6119de61401e565b60018060a01b0360c0515460101c16815190604051916399794d3560e01b8352600483015260c082602481845afa9182156104345760c05192612a66575b5060018060a01b036040830151166060830151608084015160a085015191600483101561045657611a7393611a566040518060a052613180565b60a05152602060a0510152604060a0510152606060a05101614ea6565b604082015160608301516080840151600492602092611a9b92916001600160a01b03166159dc565b9260405192838092633078fff560e01b82525afa9081156104345760c05191612a47575b506060840151159160c0518093600014612a31575060025b8093600c82101561115e575015611bef575b5050600c8110156104565780611ba0575b50506001546001600160a01b0316803b1561019b576040519063bf654d2b60e01b82528160c051918180611b3360a05160048301614eb2565b039160c051905af1801561043457611b91575060c051805491519160101c6001600160a01b031690813b1561019857506040519163201d8bdb60e01b835260048301528160248160c05180945af180156104345761041f5760c05180f35b611b9a9061319b565b816103d2565b82519060a0600180821b0384511693015190600482101561045657600080516020615f7e83398151915291611be7604092611bdd84518094614e99565b602083019061349f565ba38180611afa565b909150611c0f60018060a01b038251166020830151604084015191615a5f565b6040516335b03c1760e01b8152906020826004816001600160a01b0388165afa9182156104345760c05192612a10575b50611c4861404c565b91611c856402540be400611c73611c68606088015160208701519061346c565b60e08801519061346c565b0480602086015260e0860151906134ac565b835260a08601516004811015610456576002146128da575b60a086015160048110156104565760c051906128ae57506101008401515b806080850152801515908161289e575b8161288f575b501580156101408501526126a15760a086015160048110156104565760020361261157825180600581020460051481151715610e2857600560649102045b60e08401525b60e0830151159460c051809660001461260c5750600b5b8096600c82101561115e575015611d46575b505050611ae9565b6020600491611d6b60a0880151608088015160c08a015115159060e08b0151926150ae565b6060870152604051631e44744160e11b815260c05190938492909183916001600160a01b03165af19081156104345760c051916125da575b506040840152606083015191604084519101519060a088015160048110156104565760020361254d576004925060e08501515b60e08601519060c05193602060018060a01b03865460101c166040519788809263fbfa77cf60e01b82525afa9586156104345760c0519661252c575b50611e1d83836132d1565b9660018060a01b03600b541697602060a060c48d600180841b03815116908481015190604081015160e060c083015115159201519260405194611e5f866131e6565b855287850152604084015260608301528a6080830152838201526040519c8d938492632d28a81760e01b8452600180831b0381511660048501528681015160248501526040810151604485015260608101511515606485015260808101516084850152015160a48301525afa9889156104345760c051996124f8575b5088606481020460641489151715610e28576064890264e8d4a510008a02046402540be4001460648a02151715610e2857611f29602092611f238864e8d4a510008d026134ac565b90615095565b9060018060a01b03600254169160018060a01b038d51168d8581015160408201519060e060c084015115159301519360405180608052636ceaca6760e01b905260046080510152602460805101526044608051015260646080510152886084608051015260a4608051015260c4608051015260e46080510152610104608051809260c051905af19687156104345760c051976124c2575b600080516020615f9e833981519152604060018060a01b038c5116928151908b82526020820152a2600b54895160208b015160408c015160c08d01511515936001600160a01b03938416931690813b1561019b57859261203a6040519687958694859463ce67edfb60e01b865260c0519960048701614faa565b039160c051905af18015610434576124ad575b506001600160a01b0361205e615942565b1661207360208b01519260e08c0151906134ac565b60c08b0151151592823b1561249557916120a89391888094604051968795869485936310787e2f60e11b855260048501614f57565b03925af1801561248a57908591612499575b50508354885160208a015160408b01519260101c6001600160a01b039081169216823b1561249557916121089391888094604051968795869485936390d112b960e01b855260048501614e7b565b03925af1801561248a57908591612476575b50506080880151156123ff5761212e61404c565b9161214e60646121406005548561346c565b048061010086015230615cb5565b6101008301516001600160a01b0387163b156123fb5760405163940a4e4560e01b815260048101919091528581602481836001600160a01b038c165af180156123f0579086916123d8575b505060018060a01b03895116600080516020615ede8339815191526020610100860151604051908152a284156123a65761221d936121ef6101009360646121e861221495925b6007549061346c565b04906132d1565b61012085018181528b51909161220d916001600160a01b0316615b60565b5190613492565b91015190613492565b91838381111561236a578361223191613492565b86516001600160a01b0390811692919082163b156123665791839161226d938360405180968195829463e66a6e3b60e01b845260048401615024565b03926001600160a01b03165af1801561235b57612347575b5050835161229c91906001600160a01b0316615cb5565b60c082015284519060808501519260018060a01b038651169360a08701519160048310156104565783610240936080600080516020615efe83398151915296015182519061231560608501519361230a61014060c0880151970151151597604051998a5260208a01906134cc565b610160880190614e99565b61018086015260c0516101a08601526101c08501526101e0840152610200830152610220820152a38380808080611d3e565b612351829161319b565b6101985780612285565b6040513d84823e3d90fd5b8380fd5b905061237a915061238b92613492565b84516001600160a01b031690615bec565b82516123a19082906001600160a01b0316615cb5565b61229c565b90818060031b0460081482151715610e285761221d936121ef6122149260646121e8600a6101009760031b04926121df565b6123e19061319b565b6123ec57848d612199565b8480fd5b6040513d88823e3d90fd5b8580fd5b505085519192916001600160a01b03908116915082163b156124725761243f8392839260405194858094819363e66a6e3b60e01b83528a60048401615024565b03926001600160a01b03165af1801561235b5761245e575b505061229c565b612468829161319b565b6101985780612457565b8280fd5b61247f9061319b565b61236657838c61211a565b6040513d87823e3d90fd5b8780fd5b6124a29061319b565b61236657838c6120ba565b6124b891955061319b565b60c051938c61204d565b965060203d6020116124f1575b6124db81608051613201565b602060805180928101031261019b575196611fc0565b503d6124cf565b9098506020813d602011612524575b8161251460209383613201565b8101031261019b5751978e611edb565b3d9150612507565b61254691965060203d6020116111385761112a8183613201565b948c611e12565b6020850151926020808801516024604051809481936341b51a0d60e11b8352600483015260018060a01b03165afa9081156104345760c051916125a7575b5060646125a06402540be4009260049661346c565b0404611dd6565b90506020813d6020116125d2575b816125c260209383613201565b8101031261019b5751606461258b565b3d91506125b5565b90506020813d602011612604575b816125f560209383613201565b8101031261019b575188611da3565b3d91506125e8565b611d2c565b60208381015185820151604051634e46e97d60e11b8152600481019190915291826024816001600160a01b0387165afa9182156104345760c0519261266b575b506126646402540be4009260649261346c565b0404611d0f565b91506020823d602011612699575b8161268660209383613201565b8101031261019b57905190612664612651565b3d9150612679565b6060870151608084015260a086015160048110156104565760c05190600203612739575060c0848101519051901561272857606088015160a085015110155b15612723578351908160058102046005148215171561270c5750600560649102045b60e0840152611d15565b634e487b7160e01b9052601160045260c051602490fd5b612702565b606088015160a085015111156126e0565b60a087015190600482101561115e57501580612881575b80612852575b80156127f7575b60c0519015612723575060208381015185820151604051634e46e97d60e11b8152600481019190915291826024816001600160a01b0387165afa9182156104345760c051926127c1575b506127ba6402540be4009260649261346c565b0404612702565b91506020823d6020116127ef575b816127dc60209383613201565b8101031261019b579051906127ba6127a7565b3d91506127cf565b5060a086015160048110156104565760011480612844575b801561275d575060c084015115612832576060870151610120850151101561275d565b6060870151610120850151111561275d565b50610120840151151561280f565b5060c08401511561286f5760608701516101008501511115612756565b60608701516101008501511015612756565b506101008401511515612750565b90506080880151101588611cd1565b80915060a0890151111590611ccb565b60a087015190600482101561115e57506001036128d057610120840151611cbb565b60a0830151611cbb565b600b548451602086015160408088015160a089015160c08a0151895160e0808d01519551949893976001600160a01b03908116969416939215159085018086116001600160401b03909111176129f85760209760e49660e08701604052865288860197885260408601998a52606086019081526080860191825260a0860192835260c08601938452604051998a988997633837d79d60e11b895260018060a01b03905116600489015251602488015251604487015251606486015251151560848501525160a48401525160c48301525afa9081156104345760c051916129c6575b5060a0840152611c9d565b90506020813d6020116129f0575b816129e160209383613201565b8101031261019b5751886129bb565b3d91506129d4565b634e487b7160e01b60c051526041600452602460c051fd5b612a2a91925060203d6020116111385761112a8183613201565b9086611c3f565b60e0820151612a4257506009611ad7565b611ad7565b612a60915060203d6020116111385761112a8183613201565b84611abf565b612a8091925060c03d60c0116113d6576113c78183613201565b9083611a1c565b3461019b57366003190160c0811261019b5760801361019b57604036608319011261019b57604080519081016001600160401b038111828210176129f85760405264ffffffffff608435818116810361019b57825260a435906001600160d81b038216820361019b5760208301918252612aff615053565b6001600160a01b03612b0f61503d565b1660c05152600d60205260c0516040812090602435905260205260c0516040812090604435905260205260c05160408120606435916002831015610198575090612b58916132a3565b9251915160281b64ffffffffff1916911617905560c05180f35b3461019b5760c05180600319360112610198576020600e54604051908152f35b3461019b5760c05180600319360112610198575460405160109190911c6001600160a01b03168152602090f35b3461019b5760c05180600319360112610198576002546040516001600160a01b039091168152602090f35b3461019b5760c0518060031936011261019857612c0561342a565b600e805460c0519182905590546040516312d43a5160e01b8152906020908290600490829060101c6001600160a01b03165afa9081156104345760c05191612c71575b600080516020615f3e833981519152602084612c648186615cb5565b604051908152a160c05180f35b90506020813d8211612cbc575b81612c8b60209383613201565b8101031261019b5781612c64600080516020615f3e83398151915293612cb260209461331c565b9350935050612c48565b3d9150612c7e565b3461019b57604036600319011261019b576001600160401b0360043581811161019b57612cf5903690600401613150565b909160243590811161019b57612d0f903690600401613150565b90612d18613330565b8183036102455760c0515b838110612d305760c05180f35b80612d54612d4160019387896133c7565b35612d4d8387876133c7565b35906133ed565b01612d23565b34610e6a57610180366003190112610e6a576001600160a01b039060043582811690818103610e6a57602435848116809103610e6a5760443591858316809303610e6a5760643591868316809303610e6a5760843593878516809503610e6a5760a435888116809103610e6a5760c43592898416809403610e6a5760e435978a8916809903610e6a5760005460ff8160081c16159a8b809c613143575b801561312c575b156130d3575060c05160ff1982166001178155908b6130c1575b5050159081156130b8575b5080156130b0575b80156130a8575b80156130a0575b8015613098575b8015613090575b8015613088575b8015613067575b801561305a575b61024557889460c0519485549062010000600160b01b039060101b169062010000600160b01b0319161780955560018060a01b03199081600154169382600254161760025581600354161760035586816004541617600455600b541617600b5517600155610104356005556101243560065561014435600755610164356009556040519063f4b9fa7560e01b8252816004816020998a9460101c165afa9081156104345760c05191613024575b5016916040519163095ea7b360e01b90818452600484015260001993846024850152868460448160c051855af1938415610434578794612fe9575b5090604491604051958694859384526004840152602483015260c051905af1801561043457612fb5575b50612f795760c05180f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060c05161ff0019815416905560405160018152a180610419565b8281813d8311612fe2575b612fca8183613201565b8101031261019b57612fdb906132f4565b5082612f6e565b503d612fc0565b91909382813d831161301d575b6130008183613201565b8101031261019b5786936130156044936132f4565b509091612f44565b503d612ff6565b90508581813d8311613053575b61303b8183613201565b8101031261019b5751818116810361019b5786612f09565b503d613031565b5060056101643511612e5c565b506064613081610144356101f361012435610104356132d1565b1415612e55565b508615612e4e565b508215612e47565b508015612e40565b508515612e39565b508415612e32565b508115612e2b565b9050158a612e23565b61ffff19166101011790558b80612e18565b62461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015612dfe5750600160ff831614612dfe565b50600160ff831610612df7565b9181601f84011215610e6a578235916001600160401b038311610e6a576020808501948460051b010111610e6a57565b608081019081106001600160401b0382111761134d57604052565b6001600160401b03811161134d57604052565b61016081019081106001600160401b0382111761134d57604052565b61014081019081106001600160401b0382111761134d57604052565b60c081019081106001600160401b0382111761134d57604052565b601f909101601f19168101906001600160401b0382119082101761134d57604052565b60c0906003190112610e6a5760405161323c816131e6565b6004358152602435602082015260443560408201526064356060820152608435608082015260a43560a082015290565b6080906003190112610e6a576004356001600160a01b0381168103610e6a579060243590604435906064356002811015610e6a5790565b9060028110156132bb57600052602052604060002090565b634e487b7160e01b600052602160045260246000fd5b919082018092116132de57565b634e487b7160e01b600052601160045260246000fd5b51908115158203610e6a57565b6001600160a01b039091168152602081019190915260400190565b51906001600160a01b0382168203610e6a57565b60025460405163481c6a7560e01b81526001600160a01b03916020908290600490829086165afa9081156133bb57600091613382575b5016330361337057565b604051631dd2188d60e31b8152600490fd5b906020823d82116133b3575b8161339b60209383613201565b8101031261019857506133ad9061331c565b38613366565b3d915061338e565b6040513d6000823e3d90fd5b91908110156133d75760051b0190565b634e487b7160e01b600052603260045260246000fd5b9060207f95924bc10431f9a625a06fe5a27d55f4348510b2da42a18fe3bf2a6f2c4eab679183600052600c825280604060002055604051908152a2565b6000546040516312d43a5160e01b81526001600160a01b03916020908290600490829060101c86165afa9081156133bb57600091613382575016330361337057565b818102929181159184041417156132de57565b9064e8d4a510009182039182116132de57565b919082039182116132de57565b90600c8210156132bb5752565b81156134b6570490565b634e487b7160e01b600052601260045260246000fd5b60018060a01b0381511682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0810151151560c083015260e081015160e0830152610100808201519083015261012080910151910152565b80519061354560009261583a565b602081015115614019576135dc815191602084015160408201519160408601519060c08601511515906020870151608088015190606060e08a0151930151936101008a0151956101208b0151976040519961359f8b6131ae565b818b5260208b015260408a01526060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152615255565b9060a08493940152600c8110156140055780613f7b57506135fb614eec565b508354604051633078fff560e01b8152906020908290600490829060101c6001600160a01b03165afa90811561248a578591613f5c575b506040516335b03c1760e01b81526020816004816001600160a01b0386165afa9081156123f0578691613f3d575b5085602061366c61404c565b93613680608087015160e08801519061346c565b85830152604051631e44744160e11b815292839160049183916001600160a01b03165af1908115613c43578791613f0b575b5060408381019190915260035484519151631862c18d60e31b81526001600160a01b039283166004820152911690602081602481855afa908115613f00578891613ec6575b506001600160a01b0316613cd5575b5082516020840151835161372b926001600160a01b031691908015610ead5791615d0b565b60e0830181905260208084015185820151604051634e46e97d60e11b8152600481019190915291826024816001600160a01b0388165afa918215613cca578992613c94575b506108cd6137a66402540be40060646137906137dd97966137ae9661346c565b040493610100880194855260e0880151906132d1565b8351906132d1565b60808601526109476137d160018060a01b038751169260e08701519051906132d1565b61012086015190613492565b8554835160208581015160405163292c161760e01b8152939192849260101c6001600160a01b03908116928492839261381b92911660048401613301565b03915afa908115613c43578791613c62575b5060408401526080830151806402540be4008102046402540be4001481151715613c4e576040830151613866916402540be400026134ac565b606084015261388c60a084015160e08501516101008601519060c0870151151592615167565b6101008401526138b360a084015160e08501516101208601519060c08701511515926151ea565b61012084015260025483516020850151604086015160c0870151909391926001600160a01b039081169216901515813b15613c1457918a6084928195946040519788968795630735e1cd60e11b875260048701526024860152604485015260648401525af18015613c4357613c30575b506020830151608084015160c0850151151592916001600160a01b0383163b15613c2c579161396d9391898094604051968795869485936310787e2f60e11b855260048501614f38565b03926001600160a01b03165af180156123f057908691613c18575b5050600b54825160208401516040850151608086015160e08701516001600160a01b0394851695929490921692916139bf9161346c565b9360c08701511515833b15613c14578a949392916139f586926040519889978896879563ce67edfb60e01b875260048701614f76565b03925af180156123f057908691613c00575b505060018060a01b03855460101c166040820151613a2e608085015160e08601519061346c565b60405191613a3b836131e6565b888352602083015260408201528660608201528660808201528660a0820152813b15613bfc5760a0610204889283604051958694859363c311ab3160e01b8552613a88600486018c6134cc565b80516101448601526020810151610164860152604081015161018486015260608101516101a486015260808101516101c4860152015115156101e48401525af180156123f057908691613be8575b5050600080516020615f5e8339815191529160406102009260018060a01b038351168852600a6020528188206020840151895260205281882082840151895260205281882060008052602052613b368260002063ffffffff610ca1615e46565b01518551946402540be400613b5460a085015193606086015161346c565b0491613b6360405180956134cc565b60016101408501526101608401526101808301526101a0820152856101c0820152856101e0820152a25b60018060a01b03825460101c169051813b15612472578291604483926040519485938492630195728b60e71b84526004840152600160248401525af1801561235b57613bd7575050565b613be1829161319b565b6101985750565b613bf19061319b565b6123ec578438613ad6565b8680fd5b613c099061319b565b6123ec578438613a07565b8a80fd5b613c219061319b565b6123ec578438613988565b8880fd5b613c3c9096919661319b565b9438613923565b6040513d89823e3d90fd5b634e487b7160e01b87526011600452602487fd5b90506020813d602011613c8c575b81613c7d60209383613201565b81010312613bfc57513861382d565b3d9150613c70565b9091506020813d602011613cc2575b81613cb060209383613201565b81010312613c2c5751906108cd613770565b3d9150613ca3565b6040513d8b823e3d90fd5b602083810151855160405163201ad16d60e01b81526001600160a01b039091166004820152909181602481865afa908115613cca578991613e92575b50613d276402540be40092610f0c60649361347f565b04048352835160208085015181870151604051638251135b60e01b815260048101919091529390926001600160a01b0390811692908590602490829089165afa938415613e8757908a918295613e4b575b509160849160209493604089015160405197889687956373c637e960e11b875260048701526024860152604485015260648401525af1908115613c43578791613e19575b5060e0830181815284519091613ddb916001600160a01b031690615bec565b613dea81516080860151613492565b6080850152600080516020615ebe833981519152602060018060a01b038651169251604051908152a238613706565b90506020813d602011613e43575b81613e3460209383613201565b81010312613bfc575138613dbc565b3d9150613e27565b915093506020813d602011613e7f575b81613e6860209383613201565b81010312613e7b57519289906084613d78565b8980fd5b3d9150613e5b565b6040513d8c823e3d90fd5b90506020813d602011613ebe575b81613ead60209383613201565b81010312613c2c5751613d27613d11565b3d9150613ea0565b90506020813d602011613ef8575b81613ee160209383613201565b8101031261249557613ef29061331c565b386136f7565b3d9150613ed4565b6040513d8a823e3d90fd5b90506020813d602011613f35575b81613f2660209383613201565b81010312613bfc5751386136b2565b3d9150613f19565b613f56915060203d6020116111385761112a8183613201565b38613660565b613f75915060203d6020116111385761112a8183613201565b38613632565b915060018060a01b03613fc4613fac828451166020850151613fa6608087015160e08801519061346c565b91615d0b565b613fbe83855116916080860151613492565b90615cb5565b7f1dc3532663e5566091476fb5aba1e514ef733714c83d4feec5723de6f16c326960208086519385511694015194613fff604051809261349f565ba4613b8d565b634e487b7160e01b85526021600452602485fd5b505050565b60ff60085460081c1661337057565b90816020910312610e6a57516001600160a01b0381168103610e6a5790565b60405190614059826131ae565b816101406000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b8051906140ad60009261583a565b602081015115614019578051805160208201516040909201516140da9290916001600160a01b03166159dc565b60e0810151614da2576009905b600c8210159081614d8e57600983036141bc575b506141a85780614151575b505060018060a01b03825460101c169051813b15612472578291604483926040519485938492630195728b60e71b845260048401528160248401525af1801561235b57613bd7575050565b82519151917f293df767d6749666902026d2f6a2cc4e5f15cdede46402226c42ef4fdf27a17c604060018060a01b03855116936141a0826020880151970151918351928352602083019061349f565ba43880614106565b634e487b7160e01b84526021600452602484fd5b805160208201516040830151600494506141e1929091906001600160a01b0316615a5f565b8654604051633078fff560e01b815293919291602091859190829060101c6001600160a01b03165afa928315613c43578793614d6d575b5061422161404c565b916402540be40061424961423e606085015160208501519061346c565b60e08501519061346c565b04602084810191909152604051631e44744160e11b815290816004818c6001600160a01b038a165af1908115613cca578991614d3b575b506040840152879385614b56576142ad60a084015160208a015160c086015115159060e0870151926150ae565b60608501526142c5602085015160e0850151906134ac565b80855260406060860151930151906020860151604051906335b03c1760e01b825260208260048160018060a01b0389165afa918215614ad5578d92614b35575b506020878101516040516341b51a0d60e11b8152600481019190915292839060249082906001600160a01b03165afa918215614ad5578d92614aff575b506143556402540be4009260649261346c565b040490600460208089015195604051928380926335b03c1760e01b825260018060a01b03165afa908115614ad5578d91614ae0575b50602087810151604051634e46e97d60e11b8152600481019190915291829060249082906001600160a01b03165afa908115614ad5578d91614aa2575b5060646143dc6402540be4009260049761346c565b0404600093602060018060a01b03865460101c166040519788809263fbfa77cf60e01b82525afa95861561248a578596614a81575b5061441c82856132d1565b600b54895160208b01516040808d015160c08e015160e08f01519251919d95939491936001600160a01b039081169392911515911661445a856131e6565b84526020840194855260408085019e8f5260608501918252608085018b815260a086019384529051632d28a81760e01b815294516001600160a01b03166004860152945160248501529c5160448401529b511515606483015291516084820152995160a48b0152899081905a9260c491602094fa988915613c43578799614a4d575b50606489028981046064148a151715614a39578064e8d4a510008b02046402540be4001490151715613c4e576101046020926145248993611f238964e8d4a510008f026134ac565b9060018060a01b0360025416918d60018060a01b03815116908781015160408201519060e060c08401511515930151936040518060e052636ceaca6760e01b9052600460e0510152602460e0510152604460e0510152606460e051015289608460e051015260a460e051015260c460e051015260e460e051015260e0519283915af196871561248a578597614a03575b600080516020615f9e833981519152604060018060a01b038b5116928151908b82526020820152a2600b54885160208a015160408b015160c08c015190936001600160a01b039081169316901515833b15613e7b5791898094926146318897956040519889978896879563ce67edfb60e01b875260048701614faa565b03925af180156123f0576149f0575b506001600160a01b03614651615942565b1661466660208a01519260e08b0151906134ac565b60c08a0151151592823b15612495579161469b9391888094604051968795869485936310787e2f60e11b855260048501614f57565b03925af1801561248a579085916149dc575b505083548751602089015160408a01519260101c6001600160a01b039081169216823b1561249557916146fb9391888094604051968795869485936390d112b960e01b855260048501614e7b565b03925af1801561248a579085916149c8575b505060808701511561494a5761472161404c565b9261474160646147336005548461346c565b048061010087015230615cb5565b6101008401516001600160a01b0387163b156123fb5760405163940a4e4560e01b815260048101919091528581602481836001600160a01b038c165af180156123f057908691614936575b50506147f193926147d36101009360646121e8612214958d60018060a01b03905116600080516020615ede83398151915260208a8c0151604051908152a26007549061346c565b61012085018181528a51909161220d916001600160a01b0316615b60565b91828411156148e7576148048385613492565b85516001600160a01b0390811692919082163b1561236657918391614840938360405180968195829463e66a6e3b60e01b845260048401615024565b03926001600160a01b03165af1801561235b576148d3575b50509161020091614881600080516020615f5e8339815191529460018060a01b03845116615cb5565b8060c086015288519460208a01519060608151910151916148a560405180966134cc565b8c6101408601526101608501528b6101808501526101a08401526101c08301526101e0820152a25b386140fb565b6148dd829161319b565b6101985780614858565b5050918161491b61490a61020094600080516020615f5e83398151915296613492565b83516001600160a01b031690615bec565b81516149319082906001600160a01b0316615cb5565b614881565b61493f9061319b565b6123ec57843861478c565b5050845191926001600160a01b0390811692169050813b156124725761498a8392839260405194858094819363e66a6e3b60e01b83528a60048401615024565b03925af1801561235b576149b4575b5050600080516020615f5e8339815191529161020091614881565b6149be829161319b565b6101985780614999565b6149d19061319b565b61236657833861470d565b6149e59061319b565b6123665783386146ad565b6149fc9095919561319b565b9338614640565b965060203d602011614a32575b614a1c8160e051613201565b602060e0518092810103126123fb5751966145b4565b503d614a10565b634e487b7160e01b88526011600452602488fd5b9098506020813d602011614a79575b81614a6960209383613201565b81010312613bfc575197386144dc565b3d9150614a5c565b614a9b91965060203d6020116111385761112a8183613201565b9438614411565b90506020813d602011614acd575b81614abd60209383613201565b81010312610e6a575160646143c7565b3d9150614ab0565b6040513d8f823e3d90fd5b614af9915060203d6020116111385761112a8183613201565b3861438a565b91506020823d602011614b2d575b81614b1a60209383613201565b81010312610e6a57905190614355614342565b3d9150614b0d565b614b4f91925060203d6020116111385761112a8183613201565b9038614305565b5081516020808401519481015160808501518b54604051633078fff560e01b815260109190911c6001600160a01b039081169892151596951693909190826004818b5afa918215614ad5578d92614d19575b50604051630710f2ff60e51b8152600481019190915290602090829060249082906001600160a01b03165afa908115614d0e579085918d91614cd4575b509060646402540be400614c0a604094600080516020615f1e8339815191529661346c565b040495614cc0575b8151908682526020820152a26402540be4008202918083046402540be4001490151715614cac57614c55916020614c4b920151906134ac565b6060830151613492565b6060820152813b15613bfc57614c866101448892836040519586948593631a97b52160e31b855260048501906134cc565b5af180156123f057614c99575b506148cd565b614ca59095919561319b565b9338614c93565b634e487b7160e01b89526011600452602489fd5b614ccc86600e546132d1565b600e55614c12565b9150506020813d602011614d06575b81614cf060209383613201565b81010312614d02575184906064614be5565b8b80fd5b3d9150614ce3565b6040513d8e823e3d90fd5b6020919250614d3490823d84116111385761112a8183613201565b9190614ba8565b90506020813d602011614d65575b81614d5660209383613201565b81010312613c2c575138614280565b3d9150614d49565b614d8791935060203d6020116111385761112a8183613201565b9138614218565b634e487b7160e01b86526021600452602486fd5b6020830151614db45760025b906140e7565b83614dae565b600054604051633078fff560e01b81526001600160a01b03916020908290600490829060101c86165afa9081156133bb57600091614dfc575016330361337057565b6133ad915060203d81116111385761112a8183613201565b908160c0910312610e6a5760a060405191614e2e836131e6565b614e378161331c565b835260208101516020840152614e4f6040820161331c565b6040840152606081015160608401526080810151608084015201516004811015610e6a5760a082015290565b604091949392606082019560018060a01b0316825260208201520152565b9060048210156132bb5752565b60048210156132bb5752565b81516001600160a01b031681526020808301519082015260408083015190820152606091820151608082019392614eea920190614e99565b565b60405190614ef9826131ca565b816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b6060919493600193608083019683526020830152151560408201520152565b6060919493600093608083019683526020830152151560408201520152565b93909594919260a09360c0860197600180871b03168652602086015260408501526060840152600160808401521515910152565b93909594919260a09360c0860197600180871b03168652602086015260408501526060840152600060808401521515910152565b805463ffffffff60201b191660209290921b63ffffffff60201b16919091179055565b805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b9081526001600160a01b03909116602082015260400190565b6004356001600160a01b0381168103610e6a5790565b600054604051637622567960e11b81526001600160a01b03916020908290600490829060101c86165afa9081156133bb57600091613382575016330361337057565b818103929160001380158285131691841216176132de57565b9283159290919060008461515c575084901561514c576150cd91615095565b915b6064830292808405606414811517156132de5764e8d4a5100090818102948086056402540be40014901517156132de5783020292600160ff1b9260008212848214166132de5781850514901517156132de576134b65781146000198314166132de57055b65082f79cd90009081811315615147575090565b905090565b9061515691615095565b916150cf565b945050505050615133565b90929192831580156151d0575b61517e5750505090565b909192506103848083029083820414831517156132de576064916151a1916134ac565b04906000926000146151ba576151b792506132d1565b90565b8082116151cb576151b79250613492565b505090565b5065082f79cd90006151e4828587866150ae565b14615174565b9192908315158061523b575b6152005750505090565b90919250604b8302838104604b14841517156132de57606491615222916134ac565b049015615232576151b791613492565b6151b7916132d1565b5064ae9f7bcbff1961524f828487876150ae565b126151f6565b6152899160018060a01b0380600254169280516060820151906080830191825115159060646402540be400998a928561346c565b040490156157905761529a916132d1565b925b60a0830191825196815115159360c08601988951926152c160e089019485519061346c565b604097885193633f54af9960e11b855260049b8c8601526024850152604484015260648301528682608481845afa9a8b1561578557600092839c61574e575b508b839d6101008b01518b81151560001461573d57606491602061532592015161346c565b0404995b60085460009b9060ff161561534a5750505050505050505050505050600190565b818b01516153645750505050505050505050505050600290565b885115615728576153799060208301516132d1565b82115b1561539257505050505050505050505050600390565b610120810151801515908161570c575b50156153b657505050505050505050505090565b610140909b98999a9b015180151591826156f0575b5050156153e15750505050505050505050600590565b60ff956153f7855191511515925187519061346c565b8b5460101c8a1683156156e8578c905b8c51998a926328daca2160e01b8452858d85015216602483015281604460209b8c935afa80156156de5782908e906156a9575b61544492506132d1565b600b548c51632e53fe8760e21b81528b8101859052908c1692918a82602481875afa91821561569d578f9261566a575b506305f5e1009182810292818404149015171561565757928d9594928c928c95111596876155d7575b50505050505050156000146154ba57505050505050505050600690565b846154c8879386519061346c565b9189519384809263407b67e160e11b82525afa9182156155cd57899261559e575b5011156154fc5750505050505050600790565b51905193818752600c835285872054801560001461559157509060248392615522615942565b169487519586938492630a06da4f60e21b84528301525afa93841561558857508493615558575b505011155b6151b75750600890565b9080929350813d8311615581575b6155708183613201565b810103126124725751903880615549565b503d615566565b513d86823e3d90fd5b955050505050111561554e565b9091508481813d83116155c6575b6155b68183613201565b81010312613c2c575190386154e9565b503d6155ac565b88513d8b823e3d90fd5b6064949596975051968795869463d627450560e01b8652850152602484015260448301525afa90811561564d578a91615618575b503886818981808e61549d565b90508581813d8311615646575b61562f8183613201565b81010312613e7b57615640906132f4565b3861560b565b503d615625565b89513d8c823e3d90fd5b634e487b7160e01b8f5260118c5260248ffd5b9091508a81813d8311615696575b6156828183613201565b8101031261569257519038615474565b8e80fd5b503d615678565b8f8f51903d90823e3d90fd5b50508881813d83116156d7575b6156c08183613201565b810103126156d35781615444915161543a565b8c80fd5b503d6156b6565b8c513d8f823e3d90fd5b600190615407565b885191925090156157055711155b38806153cb565b10156156fe565b895190915015615720578210155b386153a2565b82111561571a565b615736906020830151613492565b821061537c565b606492506020915001510499615329565b92909b508783813d831161577e575b6157678183613201565b810103126101985750602082519201519a38615300565b503d61575d565b87513d6000823e3d90fd5b61579991613492565b9261529c565b8092916101409182910312610e6a576040519081016001600160401b0381118282101761134d5760405280926157d48161331c565b82526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015261581460c082016132f4565b60c083015260e081015160e0830152610100808201519083015261012080910151910152565b60a090604090815161584b816131e6565b615853614eec565b815260009381856020819401528285820152826060820152826080820152015260018060a01b03835460101c1691805192839263b66e6b0560e01b845260048401528260246101e09586935afa9384156159375780946158b5575b5050505090565b9091928094503d8511615930575b6158cd8185613201565b83019383850312610198575090816158f36101c09351946158ed866131e6565b8361579f565b845261014082015160208501526101608201519084015261018081015160608401526101a08101516080840152015160a0820152388080806158ae565b503d6158c3565b9051903d90823e3d90fd5b600054604051633078fff560e01b81526020916001600160a01b03919083908290600490829060101c86165afa80156133bb5783916000916159bf575b506004604051809481936335b03c1760e01b8352165afa9182156133bb576000926159a957505090565b6151b79250803d106111385761112a8183613201565b6159d69150823d84116111385761112a8183613201565b3861597f565b615a1993926159e9614eec565b5060018060a01b0360005460101c1660405180809781946351d407ff60e11b835261014097889760048501614e7b565b03915afa9283156133bb57600093615a2f575050565b813d8311615a58575b615a428183613201565b81019181830312612366576151b792935061579f565b503d615a38565b60c060a093615ac1926040948551615a76816131e6565b60009781898093528260208201528289820152826060820152826080820152015260018060a01b03875460101c1691865195869485938493638c8ff1d560e01b855260048501614e7b565b03915afa928315615b55578093615ad9575b50505090565b9091925060c0823d8211615b4d575b81615af560c09383613201565b81010312610198575060a0615b4091835193615b10856131e6565b815185526020820151602086015280820151908501526060810151606085015260808101516080850152016132f4565b60a0820152388080615ad3565b3d9150615ae8565b8251903d90823e3d90fd5b615b6a8230615cb5565b6004546001600160a01b039081169190823b15610e6a576000809360246040518096819363b243fb0160e01b83528960048401525af19182156133bb577fd1e388cc27c5125a80cf538c12b26dc5a784071d324a81a736e4d17f238588e493602093615bdd575b506040519485521692a2565b615be69061319b565b38615bd1565b919091615bf98130615cb5565b6000805460405163fbfa77cf60e01b81529192916001600160a01b03916020908290600490829060101c86165afa908115615caa578491615c8c575b501690813b1561247257938291615c6494958360405180978195829463a481c14b60e01b845260048401615024565b03925af1908115615c805750615c775750565b614eea9061319b565b604051903d90823e3d90fd5b615ca4915060203d81116111385761112a8183613201565b38615c35565b6040513d86823e3d90fd5b6000805490916001600160a01b039160101c8216803b156123665783929183606492604051978895869463373873db60e11b865283600487015216602485015260448401525af1908115615c805750615c775750565b929160018060a01b03600081815460101c16926040938451958691633078fff560e01b83528260046020998a935afa918215615e255791879186938692615e03575b5060249088519485938492630710f2ff60e51b84526004840152165afa928315615df8578093615dbf575b50506402540be400615d9d600080516020615f1e83398151915295949360649361346c565b040495615dac87600e546132d1565b600e5560018351958887528601521692a2565b909192508582813d8311615df1575b615dd88183613201565b81010312610198575051906402540be400615d9d615d78565b503d615dce565b8551903d90823e3d90fd5b6024919250615e1e90843d86116111385761112a8183613201565b9190615d4d565b86513d86823e3d90fd5b6001600160401b03811161134d5760051b60200190565b61a4b146148015615eb1575b615e5a574390565b60405163a3b1b31d60e01b815260208160048160645afa9081156133bb57600091615e83575090565b906020823d8211615ea9575b81615e9c60209383613201565b8101031261019857505190565b3d9150615e8f565b5062066eed4614615e5256fe0f5273269f52308b9c40fafda3ca13cc42f715fcd795365e87f351f59e24931360c73da98faf96842eabd77a0c73964cd189dbaf2c9ae90923a3fed137f30e3e1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e840ccd80d359a6fbe0bfa5cbb1ecf0854adbe8c67b4ed6bf10d3c0d78c2be0f48cb39b06677afbdb5c3b9934c9ce55728be609a055c398ecd957e8d19a5d3d80a5b2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c3330997e9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc3e7d34775bf6fd7b34e703a903ef79ab16166ebdffce96a66f4d2f84b6263bb29a164736f6c6343000811000a",
  "deployedBytecode": "0x61010080604052600436101561001457600080fd5b600060c05260003560e01c9081629d93ca14612d5a57508062e0fa8914612cc45780630241e05014612bea5780631346b0ff14612bbf57806316fff07414612b9257806318407fe014612b7257806321c8619614612a8757806323f7197b146119c0578063281b693c1461199257806337edb1381461185557806346f93a63146117f357806348829122146117cc5780634cf088d9146117a1578063531cc965146117765780635ad9f9931461174b57806361ba6c3d1461172d578063676c51641461170d5780637bb6c11c146116ed5780637d490caf146116c75780637e09ae8a1461159e5780638456cb59146115385780638f062227146115105780639bd24d8314611492578063a38ea9a814611472578063ae8421e114611402578063b187bd26146113dd578063b47ee40814610257578063c68078b9146101c1578063c68365df146101a15763d3dc75391461016d57600080fd5b3461019b5760c05180600319360112610198576003546040516001600160a01b039091168152602090f35b80fd5b60c05180fd5b3461019b5760c05180600319360112610198576020600654604051908152f35b3461019b57606036600319011261019b576044356024356004356101e361342a565b60646101f8846101f385856132d1565b6132d1565b03610245577f0caa98ed9a1605da290817d1f67b1b83c63f9229abeca5123df5d90581c495589260609282600555806006558160075560405192835260208301526040820152a160c05180f35b604051635863f78960e01b8152600490fd5b3461019b5761026536613224565b61026d614dba565b61027561401e565b60018060a01b0360c0515460101c16815190604051916399794d3560e01b8352600483015260c082602481845afa9182156104345760c051926113ac575b50604082810151606084015160808501519251636e6f99cd60e11b81529392602092859283926102f2929091906001600160a01b031660048501614e7b565b0381845afa9182156104345760c05192611370575b5060c05180921560001461136b575060095b8092600c82101561115e5750156104a7575b50600c811015610456578061046e575b5060015460408201516060830151608084015160a094909401516001600160a01b039384169492909316929091600482101561045657610397926040519461038286613180565b85526020850152604084015260608301614ea6565b813b1561019b57604051809263bf654d2b60e01b825281806103bf60c0519560048301614eb2565b039160c051905af1801561043457610441575b5060c051805491519160101c6001600160a01b031690813b1561019857506040519163201d8bdb60e01b835260048301528160248160c05180945af180156104345761041f575b60c05180f35b6104289061319b565b60c05180156104195780fd5b6040513d60c051823e3d90fd5b61044a9061319b565b60c05180156103d25780fd5b634e487b7160e01b60c051526021600452602460c051fd5b8251600080516020615f7e833981519152604060018060a01b03855116936104a082519160038352602083019061349f565ba38261033b565b604083810151606085015160808601519251632e21e28b60e21b815294506101a092859283926104e492916001600160a01b031660048501614e7b565b0381845afa9081156104345760c0519161126b575b600154604085810151606087015160808801519251636a6f32f560e11b8152965060209387936001600160a01b03918216938593849361053e93921660048501614e7b565b03915afa9283156104345760c0519361122e575b5060808501519061014083015180921015918261121f575b5060c051911561121757815b600c83101561115e575061066960c051831560001461120c57610140850151905b856101408101519160608b01519060408c015160a0840151151560208501519060608601519260c08701519460018060a01b038851169052600d60205260c05160408120906020890151905260205260c051604081209060408901519052602052604060c05120600160005260205264ffffffffff604060002054169561010060e0890151980151986040519a61062d8c6131ae565b8b5260208b015260408a01526060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152615255565b84929391941515968761117a575b5060c05196156111755750600b5b8096600c82101561115e5750156106a0575b5050505061032b565b60206004916106e4958760018060a01b0381511691848201519060608301519060a084015115159160c08501519361010060e0870151960151966040519d8e6131ca565b8d52888d015260c05160408d015260c05160608d015260808c015260a08b015260c08a015260e0890152610100880152610120870152610722614eec565b50604051633078fff560e01b815292839182905afa9081156104345760c0519161113f575b506040516335b03c1760e01b81526020816004816001600160a01b0386165afa9081156104345760c05191611110575b506004602061078461404c565b93610798608089015160e08a01519061346c565b85830152604051631e44744160e11b815260c05190938492909183916001600160a01b03165af19081156104345760c051916110de575b5060408381019190915260035486519151631862c18d60e31b81526001600160a01b039283166004820152911690602081602481855afa9081156104345760c051916110a4575b506001600160a01b0316610eb9575b5084516020860151835161084a926001600160a01b031691908015610ead5791615d0b565b60e0830181905260208084015187820151604051634e46e97d60e11b8152600481019190915291826024816001600160a01b0388165afa9182156104345760c05192610e77575b506108d7926402540be40060646108ae6108cd956108c19561346c565b040461010087015260e0860151906132d1565b610100850151906132d1565b6080870151613492565b6080860152610100820151808060011b0460021481151715610e2857600a60019190911b046101208301818152865161094d9261091d916001600160a01b031690615bec565b61094760018060a01b038851169161093f60e0870151610100880151906132d1565b905190613492565b90615b60565b60c05154855160208781015160405163292c161760e01b8152939192849260101c6001600160a01b03908116928492839261098d92911660048401613301565b03915afa9081156104345760c05191610e40575b5060408601526080850151806402540be4008102046402540be4001481151715610e285760408301516109da916402540be400026134ac565b6060860152610a0060a086015160e08701516101008801519060c0890151151592615167565b610100860152610a2760a086015160e08701516101208801519060c08901511515926151ea565b61012086015260025485516020870151604088015160c08901516001600160a01b039384169490931692151591833b1561019b5760405194630735e1cd60e11b865260048601526024850152604484015260648301528160848160c05180945af1801561043457610e13575b506020850151608086015160c08701519092901515906001600160a01b0381163b1561019b57610add936040518095819482936310787e2f60e11b845260c0519760048501614f38565b60c051919003926001600160a01b03165af1801561043457610dfe575b50600b54845160208601516040870151608088015160e089015192946001600160a01b03948516949293921691610b309161346c565b9160c0890151151594823b1561019b57610b646040519687958694859463ce67edfb60e01b865260c0519960048701614f76565b039160c051905af1801561043457610de9575b5060c051546040820151608086015160e0870151919260101c6001600160a01b031691610ba39161346c565b9160405192610bb1846131e6565b60c0518452602084019182526040840190815260c0516060850190815260c051916080860192835260c0519360a08701948552853b1561019b5760405163c311ab3160e01b815296610c06600489018d6134cc565b516101448801525161016487015251610184860152516101a4850152516101c48401525115156101e4830152816102048160c05180945af1801561043457610dd4575b5060409060018060a01b0385511660c05152600a60205260c051828120906020870151905260205260c051828120908387015190526020528160c0512060008052602052610cbf8260002063ffffffff610ca1615e46565b16908163ffffffff19825416178155610cba8282614fde565b615001565b01519360c05160018060a01b03815460101c1660018060a01b03835116926040602082015191015192823b15610198575090610d1793929160405180958194829363b4b0f56760e01b845260c0519760048501614e7b565b039160c051905af1801561043457610dbf575b50600080516020615efe833981519152916102409188519460808901519260018060a01b038a511697610d816402540be400610d6f60a086015193606087015161346c565b049360405196875260208701906134cc565b60036101608601526101808501526101a08401526101c083015260c0516101e083015260c05161020083015215610220820152a38380808080610697565b610dc89061319b565b60c0518015610d2a5780fd5b610ddd9061319b565b60c0518015610c495780fd5b610df29061319b565b60c0518015610b775780fd5b610e079061319b565b60c0518015610afa5780fd5b610e1c9061319b565b60c0518015610a935780fd5b634e487b7160e01b60c051526011600452602460c051fd5b90506020813d602011610e6f575b81610e5b60209383613201565b81010312610e6a57518a6109a1565b600080fd5b3d9150610e4e565b91506020823d602011610ea5575b81610e9260209383613201565b81010312610e6a579051906108d7610891565b3d9150610e85565b50602085015191615d0b565b602083810151875160405163201ad16d60e01b81526001600160a01b0390911660048201529182602481865afa9182156104345760c0519261106e575b50610f12606491610f0c6402540be4009461347f565b9061346c565b04048352855160208085015181890151604051638251135b60e01b815260048101919091529290916001600160a01b03918216918490602490829089165afa9283156104345760c05193611039575b5060849060209394604088015160405196879586946373c637e960e11b8652600486015260248501526044840152606483015260c051905af19081156104345760c05191611007575b5060e0830181815286519091610fc9916001600160a01b031690615bec565b610fd881516080880151613492565b6080870152600080516020615ebe833981519152602060018060a01b038851169251604051908152a289610825565b90506020813d602011611031575b8161102260209383613201565b81010312610e6a57518a610faa565b3d9150611015565b9092506020813d602011611066575b8161105560209383613201565b81010312610e6a5751916084610f61565b3d9150611048565b91506020823d60201161109c575b8161108960209383613201565b81010312610e6a57905190610f12610ef6565b3d915061107c565b90506020813d6020116110d6575b816110bf60209383613201565b8101031261019b576110d09061331c565b8b610816565b3d91506110b2565b90506020813d602011611108575b816110f960209383613201565b81010312610e6a57518a6107cf565b3d91506110ec565b611132915060203d602011611138575b61112a8183613201565b81019061402d565b89610777565b503d611120565b611158915060203d6020116111385761112a8183613201565b88610747565b634e487b7160e01b9052602160045260c051602490fd5b610685565b909650610140860151159081156111f8575b5060c05180916000146111ca57505060a0850151156111b9576060880151610140860151115b9589610677565b6060880151610140860151106111b2565b505060a0850151156111e7576060880151610140860151106111b2565b6060880151610140860151116111b2565b90506003811015610456576002148961118c565b606088015190610597565b600b91610576565b60a0870151111591508661056a565b9092506020813d602011611263575b8161124a60209383613201565b8101031261019b5751600381101561019b579185610552565b3d915061123d565b90506101a0823d6101a011611363575b816112896101a09383613201565b8101031261019b576040516001600160401b036101a082019081119082111761134d5761053e926101a082016040526112c18161331c565b8252602081015160208301526040810151604083015260608101516060830152608081015160808301526112f760a082016132f4565b60a083015260c081015160c083015260e081015160e083015261010080820151908301526101208082015190830152610140808201519083015261016080820151908301526101808091015190820152906104f9565b634e487b7160e01b600052604160045260246000fd5b3d915061127b565b610319565b9091506020813d6020116113a4575b8161138c60209383613201565b8101031261019b5761139d906132f4565b9084610307565b3d915061137f565b6113cf91925060c03d60c0116113d6575b6113c78183613201565b810190614e14565b90836102b3565b503d6113bd565b3461019b5760c0518060031936011261019857602060ff600854166040519015158152f35b3461019b5760c051806003193601126101985761141d61342a565b7fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888602060085461ff0060ff8260081c161560081b169061ff001916178060085560ff6040519160081c1615158152a160c05180f35b3461019b5760c05180600319360112610198576020600554604051908152f35b3461019b5760806114df6114a53661326c565b9260018060a09493941b031660c05152600a60205260c0519060408220915260205260c05190604082209152602052604060c051206132a3565b546040519063ffffffff908181168352818160201c166020840152818160401c16604084015260601c166060820152f35b3461019b5760c0518060031936011261019857602060ff60085460081c166040519015158152f35b3461019b5760c051806003193601126101985761155361342a565b7f9422424b175dda897495a07b091ef74a3ef715cf6d866fc972954c1c7f459304602060085460ff80821615168060ff198316176008556040519160c051161715158152a160c05180f35b3461019b573660031901610100811261019b5760801361019b57608036608319011261019b576040516115d081613180565b63ffffffff906084358281168103610e6a57815260a435918083168303610e6a576020820192835260c4358181168103610e6a576040830190815260e435908282168203610e6a5760608401918252611627615053565b6001600160a01b0361163761503d565b1660c05152600a60205260c0516040812090602435905260205260c0516040812090604435905260205260c05160408120606435916002831015610198575061041996856116896116a09482946132a3565b97511663ffffffff19885416178755511685614fde565b51835463ffffffff60401b191660409190911b63ffffffff60401b16178355511690615001565b3461019b576104196116d836613224565b6116e0614dba565b6116e861401e565b61409f565b3461019b5760c05180600319360112610198576020600754604051908152f35b3461019b5760c05180600319360112610198576020600954604051908152f35b3461019b5761041961173e36613224565b61174661401e565b613537565b3461019b5760c05180600319360112610198576001546040516001600160a01b039091168152602090f35b3461019b5760c0518060031936011261019857600b546040516001600160a01b039091168152602090f35b3461019b5760c05180600319360112610198576004546040516001600160a01b039091168152602090f35b3461019b57604036600319011261019b576117e5613330565b6104196024356004356133ed565b3461019b57604061183d6118063661326c565b9260018060a09493941b031660c05152600d60205260c05190858220915260205260c0519084822091526020528260c051206132a3565b5481519064ffffffffff8116825260281c6020820152f35b3461019b5760c05180600319360112610198576001600160a01b03611878615942565b16604051809163b81b2b7160e01b825281600460209485935afa9081156104345760c05191611965575b506118ac81615e2f565b6118b96040519182613201565b8181526118c582615e2f565b8184019290601f190136843760c0515b81811061192057505090604051928392818401908285525180915260408401929160c0515b82811061190957505050500390f35b8351855286955093810193928101926001016118fa565b8060c05152600c855260c051604081205490845183101561194e5750600582901b84018601526001016118d5565b634e487b7160e01b9052603260045260c051602490fd5b90508181813d831161198b575b61197c8183613201565b81010312610e6a5751826118a2565b503d611972565b3461019b57602036600319011261019b5760043560c05152600c6020526020604060c0512054604051908152f35b3461019b576119ce36613224565b6119d6614dba565b6119de61401e565b60018060a01b0360c0515460101c16815190604051916399794d3560e01b8352600483015260c082602481845afa9182156104345760c05192612a66575b5060018060a01b036040830151166060830151608084015160a085015191600483101561045657611a7393611a566040518060a052613180565b60a05152602060a0510152604060a0510152606060a05101614ea6565b604082015160608301516080840151600492602092611a9b92916001600160a01b03166159dc565b9260405192838092633078fff560e01b82525afa9081156104345760c05191612a47575b506060840151159160c0518093600014612a31575060025b8093600c82101561115e575015611bef575b5050600c8110156104565780611ba0575b50506001546001600160a01b0316803b1561019b576040519063bf654d2b60e01b82528160c051918180611b3360a05160048301614eb2565b039160c051905af1801561043457611b91575060c051805491519160101c6001600160a01b031690813b1561019857506040519163201d8bdb60e01b835260048301528160248160c05180945af180156104345761041f5760c05180f35b611b9a9061319b565b816103d2565b82519060a0600180821b0384511693015190600482101561045657600080516020615f7e83398151915291611be7604092611bdd84518094614e99565b602083019061349f565ba38180611afa565b909150611c0f60018060a01b038251166020830151604084015191615a5f565b6040516335b03c1760e01b8152906020826004816001600160a01b0388165afa9182156104345760c05192612a10575b50611c4861404c565b91611c856402540be400611c73611c68606088015160208701519061346c565b60e08801519061346c565b0480602086015260e0860151906134ac565b835260a08601516004811015610456576002146128da575b60a086015160048110156104565760c051906128ae57506101008401515b806080850152801515908161289e575b8161288f575b501580156101408501526126a15760a086015160048110156104565760020361261157825180600581020460051481151715610e2857600560649102045b60e08401525b60e0830151159460c051809660001461260c5750600b5b8096600c82101561115e575015611d46575b505050611ae9565b6020600491611d6b60a0880151608088015160c08a015115159060e08b0151926150ae565b6060870152604051631e44744160e11b815260c05190938492909183916001600160a01b03165af19081156104345760c051916125da575b506040840152606083015191604084519101519060a088015160048110156104565760020361254d576004925060e08501515b60e08601519060c05193602060018060a01b03865460101c166040519788809263fbfa77cf60e01b82525afa9586156104345760c0519661252c575b50611e1d83836132d1565b9660018060a01b03600b541697602060a060c48d600180841b03815116908481015190604081015160e060c083015115159201519260405194611e5f866131e6565b855287850152604084015260608301528a6080830152838201526040519c8d938492632d28a81760e01b8452600180831b0381511660048501528681015160248501526040810151604485015260608101511515606485015260808101516084850152015160a48301525afa9889156104345760c051996124f8575b5088606481020460641489151715610e28576064890264e8d4a510008a02046402540be4001460648a02151715610e2857611f29602092611f238864e8d4a510008d026134ac565b90615095565b9060018060a01b03600254169160018060a01b038d51168d8581015160408201519060e060c084015115159301519360405180608052636ceaca6760e01b905260046080510152602460805101526044608051015260646080510152886084608051015260a4608051015260c4608051015260e46080510152610104608051809260c051905af19687156104345760c051976124c2575b600080516020615f9e833981519152604060018060a01b038c5116928151908b82526020820152a2600b54895160208b015160408c015160c08d01511515936001600160a01b03938416931690813b1561019b57859261203a6040519687958694859463ce67edfb60e01b865260c0519960048701614faa565b039160c051905af18015610434576124ad575b506001600160a01b0361205e615942565b1661207360208b01519260e08c0151906134ac565b60c08b0151151592823b1561249557916120a89391888094604051968795869485936310787e2f60e11b855260048501614f57565b03925af1801561248a57908591612499575b50508354885160208a015160408b01519260101c6001600160a01b039081169216823b1561249557916121089391888094604051968795869485936390d112b960e01b855260048501614e7b565b03925af1801561248a57908591612476575b50506080880151156123ff5761212e61404c565b9161214e60646121406005548561346c565b048061010086015230615cb5565b6101008301516001600160a01b0387163b156123fb5760405163940a4e4560e01b815260048101919091528581602481836001600160a01b038c165af180156123f0579086916123d8575b505060018060a01b03895116600080516020615ede8339815191526020610100860151604051908152a284156123a65761221d936121ef6101009360646121e861221495925b6007549061346c565b04906132d1565b61012085018181528b51909161220d916001600160a01b0316615b60565b5190613492565b91015190613492565b91838381111561236a578361223191613492565b86516001600160a01b0390811692919082163b156123665791839161226d938360405180968195829463e66a6e3b60e01b845260048401615024565b03926001600160a01b03165af1801561235b57612347575b5050835161229c91906001600160a01b0316615cb5565b60c082015284519060808501519260018060a01b038651169360a08701519160048310156104565783610240936080600080516020615efe83398151915296015182519061231560608501519361230a61014060c0880151970151151597604051998a5260208a01906134cc565b610160880190614e99565b61018086015260c0516101a08601526101c08501526101e0840152610200830152610220820152a38380808080611d3e565b612351829161319b565b6101985780612285565b6040513d84823e3d90fd5b8380fd5b905061237a915061238b92613492565b84516001600160a01b031690615bec565b82516123a19082906001600160a01b0316615cb5565b61229c565b90818060031b0460081482151715610e285761221d936121ef6122149260646121e8600a6101009760031b04926121df565b6123e19061319b565b6123ec57848d612199565b8480fd5b6040513d88823e3d90fd5b8580fd5b505085519192916001600160a01b03908116915082163b156124725761243f8392839260405194858094819363e66a6e3b60e01b83528a60048401615024565b03926001600160a01b03165af1801561235b5761245e575b505061229c565b612468829161319b565b6101985780612457565b8280fd5b61247f9061319b565b61236657838c61211a565b6040513d87823e3d90fd5b8780fd5b6124a29061319b565b61236657838c6120ba565b6124b891955061319b565b60c051938c61204d565b965060203d6020116124f1575b6124db81608051613201565b602060805180928101031261019b575196611fc0565b503d6124cf565b9098506020813d602011612524575b8161251460209383613201565b8101031261019b5751978e611edb565b3d9150612507565b61254691965060203d6020116111385761112a8183613201565b948c611e12565b6020850151926020808801516024604051809481936341b51a0d60e11b8352600483015260018060a01b03165afa9081156104345760c051916125a7575b5060646125a06402540be4009260049661346c565b0404611dd6565b90506020813d6020116125d2575b816125c260209383613201565b8101031261019b5751606461258b565b3d91506125b5565b90506020813d602011612604575b816125f560209383613201565b8101031261019b575188611da3565b3d91506125e8565b611d2c565b60208381015185820151604051634e46e97d60e11b8152600481019190915291826024816001600160a01b0387165afa9182156104345760c0519261266b575b506126646402540be4009260649261346c565b0404611d0f565b91506020823d602011612699575b8161268660209383613201565b8101031261019b57905190612664612651565b3d9150612679565b6060870151608084015260a086015160048110156104565760c05190600203612739575060c0848101519051901561272857606088015160a085015110155b15612723578351908160058102046005148215171561270c5750600560649102045b60e0840152611d15565b634e487b7160e01b9052601160045260c051602490fd5b612702565b606088015160a085015111156126e0565b60a087015190600482101561115e57501580612881575b80612852575b80156127f7575b60c0519015612723575060208381015185820151604051634e46e97d60e11b8152600481019190915291826024816001600160a01b0387165afa9182156104345760c051926127c1575b506127ba6402540be4009260649261346c565b0404612702565b91506020823d6020116127ef575b816127dc60209383613201565b8101031261019b579051906127ba6127a7565b3d91506127cf565b5060a086015160048110156104565760011480612844575b801561275d575060c084015115612832576060870151610120850151101561275d565b6060870151610120850151111561275d565b50610120840151151561280f565b5060c08401511561286f5760608701516101008501511115612756565b60608701516101008501511015612756565b506101008401511515612750565b90506080880151101588611cd1565b80915060a0890151111590611ccb565b60a087015190600482101561115e57506001036128d057610120840151611cbb565b60a0830151611cbb565b600b548451602086015160408088015160a089015160c08a0151895160e0808d01519551949893976001600160a01b03908116969416939215159085018086116001600160401b03909111176129f85760209760e49660e08701604052865288860197885260408601998a52606086019081526080860191825260a0860192835260c08601938452604051998a988997633837d79d60e11b895260018060a01b03905116600489015251602488015251604487015251606486015251151560848501525160a48401525160c48301525afa9081156104345760c051916129c6575b5060a0840152611c9d565b90506020813d6020116129f0575b816129e160209383613201565b8101031261019b5751886129bb565b3d91506129d4565b634e487b7160e01b60c051526041600452602460c051fd5b612a2a91925060203d6020116111385761112a8183613201565b9086611c3f565b60e0820151612a4257506009611ad7565b611ad7565b612a60915060203d6020116111385761112a8183613201565b84611abf565b612a8091925060c03d60c0116113d6576113c78183613201565b9083611a1c565b3461019b57366003190160c0811261019b5760801361019b57604036608319011261019b57604080519081016001600160401b038111828210176129f85760405264ffffffffff608435818116810361019b57825260a435906001600160d81b038216820361019b5760208301918252612aff615053565b6001600160a01b03612b0f61503d565b1660c05152600d60205260c0516040812090602435905260205260c0516040812090604435905260205260c05160408120606435916002831015610198575090612b58916132a3565b9251915160281b64ffffffffff1916911617905560c05180f35b3461019b5760c05180600319360112610198576020600e54604051908152f35b3461019b5760c05180600319360112610198575460405160109190911c6001600160a01b03168152602090f35b3461019b5760c05180600319360112610198576002546040516001600160a01b039091168152602090f35b3461019b5760c0518060031936011261019857612c0561342a565b600e805460c0519182905590546040516312d43a5160e01b8152906020908290600490829060101c6001600160a01b03165afa9081156104345760c05191612c71575b600080516020615f3e833981519152602084612c648186615cb5565b604051908152a160c05180f35b90506020813d8211612cbc575b81612c8b60209383613201565b8101031261019b5781612c64600080516020615f3e83398151915293612cb260209461331c565b9350935050612c48565b3d9150612c7e565b3461019b57604036600319011261019b576001600160401b0360043581811161019b57612cf5903690600401613150565b909160243590811161019b57612d0f903690600401613150565b90612d18613330565b8183036102455760c0515b838110612d305760c05180f35b80612d54612d4160019387896133c7565b35612d4d8387876133c7565b35906133ed565b01612d23565b34610e6a57610180366003190112610e6a576001600160a01b039060043582811690818103610e6a57602435848116809103610e6a5760443591858316809303610e6a5760643591868316809303610e6a5760843593878516809503610e6a5760a435888116809103610e6a5760c43592898416809403610e6a5760e435978a8916809903610e6a5760005460ff8160081c16159a8b809c613143575b801561312c575b156130d3575060c05160ff1982166001178155908b6130c1575b5050159081156130b8575b5080156130b0575b80156130a8575b80156130a0575b8015613098575b8015613090575b8015613088575b8015613067575b801561305a575b61024557889460c0519485549062010000600160b01b039060101b169062010000600160b01b0319161780955560018060a01b03199081600154169382600254161760025581600354161760035586816004541617600455600b541617600b5517600155610104356005556101243560065561014435600755610164356009556040519063f4b9fa7560e01b8252816004816020998a9460101c165afa9081156104345760c05191613024575b5016916040519163095ea7b360e01b90818452600484015260001993846024850152868460448160c051855af1938415610434578794612fe9575b5090604491604051958694859384526004840152602483015260c051905af1801561043457612fb5575b50612f795760c05180f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060c05161ff0019815416905560405160018152a180610419565b8281813d8311612fe2575b612fca8183613201565b8101031261019b57612fdb906132f4565b5082612f6e565b503d612fc0565b91909382813d831161301d575b6130008183613201565b8101031261019b5786936130156044936132f4565b509091612f44565b503d612ff6565b90508581813d8311613053575b61303b8183613201565b8101031261019b5751818116810361019b5786612f09565b503d613031565b5060056101643511612e5c565b506064613081610144356101f361012435610104356132d1565b1415612e55565b508615612e4e565b508215612e47565b508015612e40565b508515612e39565b508415612e32565b508115612e2b565b9050158a612e23565b61ffff19166101011790558b80612e18565b62461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015612dfe5750600160ff831614612dfe565b50600160ff831610612df7565b9181601f84011215610e6a578235916001600160401b038311610e6a576020808501948460051b010111610e6a57565b608081019081106001600160401b0382111761134d57604052565b6001600160401b03811161134d57604052565b61016081019081106001600160401b0382111761134d57604052565b61014081019081106001600160401b0382111761134d57604052565b60c081019081106001600160401b0382111761134d57604052565b601f909101601f19168101906001600160401b0382119082101761134d57604052565b60c0906003190112610e6a5760405161323c816131e6565b6004358152602435602082015260443560408201526064356060820152608435608082015260a43560a082015290565b6080906003190112610e6a576004356001600160a01b0381168103610e6a579060243590604435906064356002811015610e6a5790565b9060028110156132bb57600052602052604060002090565b634e487b7160e01b600052602160045260246000fd5b919082018092116132de57565b634e487b7160e01b600052601160045260246000fd5b51908115158203610e6a57565b6001600160a01b039091168152602081019190915260400190565b51906001600160a01b0382168203610e6a57565b60025460405163481c6a7560e01b81526001600160a01b03916020908290600490829086165afa9081156133bb57600091613382575b5016330361337057565b604051631dd2188d60e31b8152600490fd5b906020823d82116133b3575b8161339b60209383613201565b8101031261019857506133ad9061331c565b38613366565b3d915061338e565b6040513d6000823e3d90fd5b91908110156133d75760051b0190565b634e487b7160e01b600052603260045260246000fd5b9060207f95924bc10431f9a625a06fe5a27d55f4348510b2da42a18fe3bf2a6f2c4eab679183600052600c825280604060002055604051908152a2565b6000546040516312d43a5160e01b81526001600160a01b03916020908290600490829060101c86165afa9081156133bb57600091613382575016330361337057565b818102929181159184041417156132de57565b9064e8d4a510009182039182116132de57565b919082039182116132de57565b90600c8210156132bb5752565b81156134b6570490565b634e487b7160e01b600052601260045260246000fd5b60018060a01b0381511682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0810151151560c083015260e081015160e0830152610100808201519083015261012080910151910152565b80519061354560009261583a565b602081015115614019576135dc815191602084015160408201519160408601519060c08601511515906020870151608088015190606060e08a0151930151936101008a0151956101208b0151976040519961359f8b6131ae565b818b5260208b015260408a01526060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152615255565b9060a08493940152600c8110156140055780613f7b57506135fb614eec565b508354604051633078fff560e01b8152906020908290600490829060101c6001600160a01b03165afa90811561248a578591613f5c575b506040516335b03c1760e01b81526020816004816001600160a01b0386165afa9081156123f0578691613f3d575b5085602061366c61404c565b93613680608087015160e08801519061346c565b85830152604051631e44744160e11b815292839160049183916001600160a01b03165af1908115613c43578791613f0b575b5060408381019190915260035484519151631862c18d60e31b81526001600160a01b039283166004820152911690602081602481855afa908115613f00578891613ec6575b506001600160a01b0316613cd5575b5082516020840151835161372b926001600160a01b031691908015610ead5791615d0b565b60e0830181905260208084015185820151604051634e46e97d60e11b8152600481019190915291826024816001600160a01b0388165afa918215613cca578992613c94575b506108cd6137a66402540be40060646137906137dd97966137ae9661346c565b040493610100880194855260e0880151906132d1565b8351906132d1565b60808601526109476137d160018060a01b038751169260e08701519051906132d1565b61012086015190613492565b8554835160208581015160405163292c161760e01b8152939192849260101c6001600160a01b03908116928492839261381b92911660048401613301565b03915afa908115613c43578791613c62575b5060408401526080830151806402540be4008102046402540be4001481151715613c4e576040830151613866916402540be400026134ac565b606084015261388c60a084015160e08501516101008601519060c0870151151592615167565b6101008401526138b360a084015160e08501516101208601519060c08701511515926151ea565b61012084015260025483516020850151604086015160c0870151909391926001600160a01b039081169216901515813b15613c1457918a6084928195946040519788968795630735e1cd60e11b875260048701526024860152604485015260648401525af18015613c4357613c30575b506020830151608084015160c0850151151592916001600160a01b0383163b15613c2c579161396d9391898094604051968795869485936310787e2f60e11b855260048501614f38565b03926001600160a01b03165af180156123f057908691613c18575b5050600b54825160208401516040850151608086015160e08701516001600160a01b0394851695929490921692916139bf9161346c565b9360c08701511515833b15613c14578a949392916139f586926040519889978896879563ce67edfb60e01b875260048701614f76565b03925af180156123f057908691613c00575b505060018060a01b03855460101c166040820151613a2e608085015160e08601519061346c565b60405191613a3b836131e6565b888352602083015260408201528660608201528660808201528660a0820152813b15613bfc5760a0610204889283604051958694859363c311ab3160e01b8552613a88600486018c6134cc565b80516101448601526020810151610164860152604081015161018486015260608101516101a486015260808101516101c4860152015115156101e48401525af180156123f057908691613be8575b5050600080516020615f5e8339815191529160406102009260018060a01b038351168852600a6020528188206020840151895260205281882082840151895260205281882060008052602052613b368260002063ffffffff610ca1615e46565b01518551946402540be400613b5460a085015193606086015161346c565b0491613b6360405180956134cc565b60016101408501526101608401526101808301526101a0820152856101c0820152856101e0820152a25b60018060a01b03825460101c169051813b15612472578291604483926040519485938492630195728b60e71b84526004840152600160248401525af1801561235b57613bd7575050565b613be1829161319b565b6101985750565b613bf19061319b565b6123ec578438613ad6565b8680fd5b613c099061319b565b6123ec578438613a07565b8a80fd5b613c219061319b565b6123ec578438613988565b8880fd5b613c3c9096919661319b565b9438613923565b6040513d89823e3d90fd5b634e487b7160e01b87526011600452602487fd5b90506020813d602011613c8c575b81613c7d60209383613201565b81010312613bfc57513861382d565b3d9150613c70565b9091506020813d602011613cc2575b81613cb060209383613201565b81010312613c2c5751906108cd613770565b3d9150613ca3565b6040513d8b823e3d90fd5b602083810151855160405163201ad16d60e01b81526001600160a01b039091166004820152909181602481865afa908115613cca578991613e92575b50613d276402540be40092610f0c60649361347f565b04048352835160208085015181870151604051638251135b60e01b815260048101919091529390926001600160a01b0390811692908590602490829089165afa938415613e8757908a918295613e4b575b509160849160209493604089015160405197889687956373c637e960e11b875260048701526024860152604485015260648401525af1908115613c43578791613e19575b5060e0830181815284519091613ddb916001600160a01b031690615bec565b613dea81516080860151613492565b6080850152600080516020615ebe833981519152602060018060a01b038651169251604051908152a238613706565b90506020813d602011613e43575b81613e3460209383613201565b81010312613bfc575138613dbc565b3d9150613e27565b915093506020813d602011613e7f575b81613e6860209383613201565b81010312613e7b57519289906084613d78565b8980fd5b3d9150613e5b565b6040513d8c823e3d90fd5b90506020813d602011613ebe575b81613ead60209383613201565b81010312613c2c5751613d27613d11565b3d9150613ea0565b90506020813d602011613ef8575b81613ee160209383613201565b8101031261249557613ef29061331c565b386136f7565b3d9150613ed4565b6040513d8a823e3d90fd5b90506020813d602011613f35575b81613f2660209383613201565b81010312613bfc5751386136b2565b3d9150613f19565b613f56915060203d6020116111385761112a8183613201565b38613660565b613f75915060203d6020116111385761112a8183613201565b38613632565b915060018060a01b03613fc4613fac828451166020850151613fa6608087015160e08801519061346c565b91615d0b565b613fbe83855116916080860151613492565b90615cb5565b7f1dc3532663e5566091476fb5aba1e514ef733714c83d4feec5723de6f16c326960208086519385511694015194613fff604051809261349f565ba4613b8d565b634e487b7160e01b85526021600452602485fd5b505050565b60ff60085460081c1661337057565b90816020910312610e6a57516001600160a01b0381168103610e6a5790565b60405190614059826131ae565b816101406000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b8051906140ad60009261583a565b602081015115614019578051805160208201516040909201516140da9290916001600160a01b03166159dc565b60e0810151614da2576009905b600c8210159081614d8e57600983036141bc575b506141a85780614151575b505060018060a01b03825460101c169051813b15612472578291604483926040519485938492630195728b60e71b845260048401528160248401525af1801561235b57613bd7575050565b82519151917f293df767d6749666902026d2f6a2cc4e5f15cdede46402226c42ef4fdf27a17c604060018060a01b03855116936141a0826020880151970151918351928352602083019061349f565ba43880614106565b634e487b7160e01b84526021600452602484fd5b805160208201516040830151600494506141e1929091906001600160a01b0316615a5f565b8654604051633078fff560e01b815293919291602091859190829060101c6001600160a01b03165afa928315613c43578793614d6d575b5061422161404c565b916402540be40061424961423e606085015160208501519061346c565b60e08501519061346c565b04602084810191909152604051631e44744160e11b815290816004818c6001600160a01b038a165af1908115613cca578991614d3b575b506040840152879385614b56576142ad60a084015160208a015160c086015115159060e0870151926150ae565b60608501526142c5602085015160e0850151906134ac565b80855260406060860151930151906020860151604051906335b03c1760e01b825260208260048160018060a01b0389165afa918215614ad5578d92614b35575b506020878101516040516341b51a0d60e11b8152600481019190915292839060249082906001600160a01b03165afa918215614ad5578d92614aff575b506143556402540be4009260649261346c565b040490600460208089015195604051928380926335b03c1760e01b825260018060a01b03165afa908115614ad5578d91614ae0575b50602087810151604051634e46e97d60e11b8152600481019190915291829060249082906001600160a01b03165afa908115614ad5578d91614aa2575b5060646143dc6402540be4009260049761346c565b0404600093602060018060a01b03865460101c166040519788809263fbfa77cf60e01b82525afa95861561248a578596614a81575b5061441c82856132d1565b600b54895160208b01516040808d015160c08e015160e08f01519251919d95939491936001600160a01b039081169392911515911661445a856131e6565b84526020840194855260408085019e8f5260608501918252608085018b815260a086019384529051632d28a81760e01b815294516001600160a01b03166004860152945160248501529c5160448401529b511515606483015291516084820152995160a48b0152899081905a9260c491602094fa988915613c43578799614a4d575b50606489028981046064148a151715614a39578064e8d4a510008b02046402540be4001490151715613c4e576101046020926145248993611f238964e8d4a510008f026134ac565b9060018060a01b0360025416918d60018060a01b03815116908781015160408201519060e060c08401511515930151936040518060e052636ceaca6760e01b9052600460e0510152602460e0510152604460e0510152606460e051015289608460e051015260a460e051015260c460e051015260e460e051015260e0519283915af196871561248a578597614a03575b600080516020615f9e833981519152604060018060a01b038b5116928151908b82526020820152a2600b54885160208a015160408b015160c08c015190936001600160a01b039081169316901515833b15613e7b5791898094926146318897956040519889978896879563ce67edfb60e01b875260048701614faa565b03925af180156123f0576149f0575b506001600160a01b03614651615942565b1661466660208a01519260e08b0151906134ac565b60c08a0151151592823b15612495579161469b9391888094604051968795869485936310787e2f60e11b855260048501614f57565b03925af1801561248a579085916149dc575b505083548751602089015160408a01519260101c6001600160a01b039081169216823b1561249557916146fb9391888094604051968795869485936390d112b960e01b855260048501614e7b565b03925af1801561248a579085916149c8575b505060808701511561494a5761472161404c565b9261474160646147336005548461346c565b048061010087015230615cb5565b6101008401516001600160a01b0387163b156123fb5760405163940a4e4560e01b815260048101919091528581602481836001600160a01b038c165af180156123f057908691614936575b50506147f193926147d36101009360646121e8612214958d60018060a01b03905116600080516020615ede83398151915260208a8c0151604051908152a26007549061346c565b61012085018181528a51909161220d916001600160a01b0316615b60565b91828411156148e7576148048385613492565b85516001600160a01b0390811692919082163b1561236657918391614840938360405180968195829463e66a6e3b60e01b845260048401615024565b03926001600160a01b03165af1801561235b576148d3575b50509161020091614881600080516020615f5e8339815191529460018060a01b03845116615cb5565b8060c086015288519460208a01519060608151910151916148a560405180966134cc565b8c6101408601526101608501528b6101808501526101a08401526101c08301526101e0820152a25b386140fb565b6148dd829161319b565b6101985780614858565b5050918161491b61490a61020094600080516020615f5e83398151915296613492565b83516001600160a01b031690615bec565b81516149319082906001600160a01b0316615cb5565b614881565b61493f9061319b565b6123ec57843861478c565b5050845191926001600160a01b0390811692169050813b156124725761498a8392839260405194858094819363e66a6e3b60e01b83528a60048401615024565b03925af1801561235b576149b4575b5050600080516020615f5e8339815191529161020091614881565b6149be829161319b565b6101985780614999565b6149d19061319b565b61236657833861470d565b6149e59061319b565b6123665783386146ad565b6149fc9095919561319b565b9338614640565b965060203d602011614a32575b614a1c8160e051613201565b602060e0518092810103126123fb5751966145b4565b503d614a10565b634e487b7160e01b88526011600452602488fd5b9098506020813d602011614a79575b81614a6960209383613201565b81010312613bfc575197386144dc565b3d9150614a5c565b614a9b91965060203d6020116111385761112a8183613201565b9438614411565b90506020813d602011614acd575b81614abd60209383613201565b81010312610e6a575160646143c7565b3d9150614ab0565b6040513d8f823e3d90fd5b614af9915060203d6020116111385761112a8183613201565b3861438a565b91506020823d602011614b2d575b81614b1a60209383613201565b81010312610e6a57905190614355614342565b3d9150614b0d565b614b4f91925060203d6020116111385761112a8183613201565b9038614305565b5081516020808401519481015160808501518b54604051633078fff560e01b815260109190911c6001600160a01b039081169892151596951693909190826004818b5afa918215614ad5578d92614d19575b50604051630710f2ff60e51b8152600481019190915290602090829060249082906001600160a01b03165afa908115614d0e579085918d91614cd4575b509060646402540be400614c0a604094600080516020615f1e8339815191529661346c565b040495614cc0575b8151908682526020820152a26402540be4008202918083046402540be4001490151715614cac57614c55916020614c4b920151906134ac565b6060830151613492565b6060820152813b15613bfc57614c866101448892836040519586948593631a97b52160e31b855260048501906134cc565b5af180156123f057614c99575b506148cd565b614ca59095919561319b565b9338614c93565b634e487b7160e01b89526011600452602489fd5b614ccc86600e546132d1565b600e55614c12565b9150506020813d602011614d06575b81614cf060209383613201565b81010312614d02575184906064614be5565b8b80fd5b3d9150614ce3565b6040513d8e823e3d90fd5b6020919250614d3490823d84116111385761112a8183613201565b9190614ba8565b90506020813d602011614d65575b81614d5660209383613201565b81010312613c2c575138614280565b3d9150614d49565b614d8791935060203d6020116111385761112a8183613201565b9138614218565b634e487b7160e01b86526021600452602486fd5b6020830151614db45760025b906140e7565b83614dae565b600054604051633078fff560e01b81526001600160a01b03916020908290600490829060101c86165afa9081156133bb57600091614dfc575016330361337057565b6133ad915060203d81116111385761112a8183613201565b908160c0910312610e6a5760a060405191614e2e836131e6565b614e378161331c565b835260208101516020840152614e4f6040820161331c565b6040840152606081015160608401526080810151608084015201516004811015610e6a5760a082015290565b604091949392606082019560018060a01b0316825260208201520152565b9060048210156132bb5752565b60048210156132bb5752565b81516001600160a01b031681526020808301519082015260408083015190820152606091820151608082019392614eea920190614e99565b565b60405190614ef9826131ca565b816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b6060919493600193608083019683526020830152151560408201520152565b6060919493600093608083019683526020830152151560408201520152565b93909594919260a09360c0860197600180871b03168652602086015260408501526060840152600160808401521515910152565b93909594919260a09360c0860197600180871b03168652602086015260408501526060840152600060808401521515910152565b805463ffffffff60201b191660209290921b63ffffffff60201b16919091179055565b805463ffffffff60601b191660609290921b63ffffffff60601b16919091179055565b9081526001600160a01b03909116602082015260400190565b6004356001600160a01b0381168103610e6a5790565b600054604051637622567960e11b81526001600160a01b03916020908290600490829060101c86165afa9081156133bb57600091613382575016330361337057565b818103929160001380158285131691841216176132de57565b9283159290919060008461515c575084901561514c576150cd91615095565b915b6064830292808405606414811517156132de5764e8d4a5100090818102948086056402540be40014901517156132de5783020292600160ff1b9260008212848214166132de5781850514901517156132de576134b65781146000198314166132de57055b65082f79cd90009081811315615147575090565b905090565b9061515691615095565b916150cf565b945050505050615133565b90929192831580156151d0575b61517e5750505090565b909192506103848083029083820414831517156132de576064916151a1916134ac565b04906000926000146151ba576151b792506132d1565b90565b8082116151cb576151b79250613492565b505090565b5065082f79cd90006151e4828587866150ae565b14615174565b9192908315158061523b575b6152005750505090565b90919250604b8302838104604b14841517156132de57606491615222916134ac565b049015615232576151b791613492565b6151b7916132d1565b5064ae9f7bcbff1961524f828487876150ae565b126151f6565b6152899160018060a01b0380600254169280516060820151906080830191825115159060646402540be400998a928561346c565b040490156157905761529a916132d1565b925b60a0830191825196815115159360c08601988951926152c160e089019485519061346c565b604097885193633f54af9960e11b855260049b8c8601526024850152604484015260648301528682608481845afa9a8b1561578557600092839c61574e575b508b839d6101008b01518b81151560001461573d57606491602061532592015161346c565b0404995b60085460009b9060ff161561534a5750505050505050505050505050600190565b818b01516153645750505050505050505050505050600290565b885115615728576153799060208301516132d1565b82115b1561539257505050505050505050505050600390565b610120810151801515908161570c575b50156153b657505050505050505050505090565b610140909b98999a9b015180151591826156f0575b5050156153e15750505050505050505050600590565b60ff956153f7855191511515925187519061346c565b8b5460101c8a1683156156e8578c905b8c51998a926328daca2160e01b8452858d85015216602483015281604460209b8c935afa80156156de5782908e906156a9575b61544492506132d1565b600b548c51632e53fe8760e21b81528b8101859052908c1692918a82602481875afa91821561569d578f9261566a575b506305f5e1009182810292818404149015171561565757928d9594928c928c95111596876155d7575b50505050505050156000146154ba57505050505050505050600690565b846154c8879386519061346c565b9189519384809263407b67e160e11b82525afa9182156155cd57899261559e575b5011156154fc5750505050505050600790565b51905193818752600c835285872054801560001461559157509060248392615522615942565b169487519586938492630a06da4f60e21b84528301525afa93841561558857508493615558575b505011155b6151b75750600890565b9080929350813d8311615581575b6155708183613201565b810103126124725751903880615549565b503d615566565b513d86823e3d90fd5b955050505050111561554e565b9091508481813d83116155c6575b6155b68183613201565b81010312613c2c575190386154e9565b503d6155ac565b88513d8b823e3d90fd5b6064949596975051968795869463d627450560e01b8652850152602484015260448301525afa90811561564d578a91615618575b503886818981808e61549d565b90508581813d8311615646575b61562f8183613201565b81010312613e7b57615640906132f4565b3861560b565b503d615625565b89513d8c823e3d90fd5b634e487b7160e01b8f5260118c5260248ffd5b9091508a81813d8311615696575b6156828183613201565b8101031261569257519038615474565b8e80fd5b503d615678565b8f8f51903d90823e3d90fd5b50508881813d83116156d7575b6156c08183613201565b810103126156d35781615444915161543a565b8c80fd5b503d6156b6565b8c513d8f823e3d90fd5b600190615407565b885191925090156157055711155b38806153cb565b10156156fe565b895190915015615720578210155b386153a2565b82111561571a565b615736906020830151613492565b821061537c565b606492506020915001510499615329565b92909b508783813d831161577e575b6157678183613201565b810103126101985750602082519201519a38615300565b503d61575d565b87513d6000823e3d90fd5b61579991613492565b9261529c565b8092916101409182910312610e6a576040519081016001600160401b0381118282101761134d5760405280926157d48161331c565b82526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015261581460c082016132f4565b60c083015260e081015160e0830152610100808201519083015261012080910151910152565b60a090604090815161584b816131e6565b615853614eec565b815260009381856020819401528285820152826060820152826080820152015260018060a01b03835460101c1691805192839263b66e6b0560e01b845260048401528260246101e09586935afa9384156159375780946158b5575b5050505090565b9091928094503d8511615930575b6158cd8185613201565b83019383850312610198575090816158f36101c09351946158ed866131e6565b8361579f565b845261014082015160208501526101608201519084015261018081015160608401526101a08101516080840152015160a0820152388080806158ae565b503d6158c3565b9051903d90823e3d90fd5b600054604051633078fff560e01b81526020916001600160a01b03919083908290600490829060101c86165afa80156133bb5783916000916159bf575b506004604051809481936335b03c1760e01b8352165afa9182156133bb576000926159a957505090565b6151b79250803d106111385761112a8183613201565b6159d69150823d84116111385761112a8183613201565b3861597f565b615a1993926159e9614eec565b5060018060a01b0360005460101c1660405180809781946351d407ff60e11b835261014097889760048501614e7b565b03915afa9283156133bb57600093615a2f575050565b813d8311615a58575b615a428183613201565b81019181830312612366576151b792935061579f565b503d615a38565b60c060a093615ac1926040948551615a76816131e6565b60009781898093528260208201528289820152826060820152826080820152015260018060a01b03875460101c1691865195869485938493638c8ff1d560e01b855260048501614e7b565b03915afa928315615b55578093615ad9575b50505090565b9091925060c0823d8211615b4d575b81615af560c09383613201565b81010312610198575060a0615b4091835193615b10856131e6565b815185526020820151602086015280820151908501526060810151606085015260808101516080850152016132f4565b60a0820152388080615ad3565b3d9150615ae8565b8251903d90823e3d90fd5b615b6a8230615cb5565b6004546001600160a01b039081169190823b15610e6a576000809360246040518096819363b243fb0160e01b83528960048401525af19182156133bb577fd1e388cc27c5125a80cf538c12b26dc5a784071d324a81a736e4d17f238588e493602093615bdd575b506040519485521692a2565b615be69061319b565b38615bd1565b919091615bf98130615cb5565b6000805460405163fbfa77cf60e01b81529192916001600160a01b03916020908290600490829060101c86165afa908115615caa578491615c8c575b501690813b1561247257938291615c6494958360405180978195829463a481c14b60e01b845260048401615024565b03925af1908115615c805750615c775750565b614eea9061319b565b604051903d90823e3d90fd5b615ca4915060203d81116111385761112a8183613201565b38615c35565b6040513d86823e3d90fd5b6000805490916001600160a01b039160101c8216803b156123665783929183606492604051978895869463373873db60e11b865283600487015216602485015260448401525af1908115615c805750615c775750565b929160018060a01b03600081815460101c16926040938451958691633078fff560e01b83528260046020998a935afa918215615e255791879186938692615e03575b5060249088519485938492630710f2ff60e51b84526004840152165afa928315615df8578093615dbf575b50506402540be400615d9d600080516020615f1e83398151915295949360649361346c565b040495615dac87600e546132d1565b600e5560018351958887528601521692a2565b909192508582813d8311615df1575b615dd88183613201565b81010312610198575051906402540be400615d9d615d78565b503d615dce565b8551903d90823e3d90fd5b6024919250615e1e90843d86116111385761112a8183613201565b9190615d4d565b86513d86823e3d90fd5b6001600160401b03811161134d5760051b60200190565b61a4b146148015615eb1575b615e5a574390565b60405163a3b1b31d60e01b815260208160048160645afa9081156133bb57600091615e83575090565b906020823d8211615ea9575b81615e9c60209383613201565b8101031261019857505190565b3d9150615e8f565b5062066eed4614615e5256fe0f5273269f52308b9c40fafda3ca13cc42f715fcd795365e87f351f59e24931360c73da98faf96842eabd77a0c73964cd189dbaf2c9ae90923a3fed137f30e3e1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e840ccd80d359a6fbe0bfa5cbb1ecf0854adbe8c67b4ed6bf10d3c0d78c2be0f48cb39b06677afbdb5c3b9934c9ce55728be609a055c398ecd957e8d19a5d3d80a5b2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c3330997e9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc3e7d34775bf6fd7b34e703a903ef79ab16166ebdffce96a66f4d2f84b6263bb29a164736f6c6343000811000a",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3282,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3285,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5577,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterfaceV5)10699"
      },
      {
        "astId": 5580,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "nftRewards",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IGNSOracleRewardsV6_4_1)9917"
      },
      {
        "astId": 5583,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "pairInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(GNSPairInfosInterfaceV6)9600"
      },
      {
        "astId": 5586,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "referrals",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(GNSReferralsInterfaceV6_2)9637"
      },
      {
        "astId": 5589,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "staking",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(GNSStakingInterfaceV6_4_1)9725"
      },
      {
        "astId": 5603,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "daiVaultFeeP",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5605,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "lpFeeP",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5607,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "sssFeeP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5609,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "isPaused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 5611,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "isDone",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 5613,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "canExecuteTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5625,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "tradeLastUpdated",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(LastUpdated)5701_storage))))"
      },
      {
        "astId": 5628,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "borrowingFees",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(GNSBorrowingFeesInterfaceV6_4)9455"
      },
      {
        "astId": 5632,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "pairMaxLeverage",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5644,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "tradeData",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(TradeData)5706_storage))))"
      },
      {
        "astId": 5646,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "govFeesDai",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GNSBorrowingFeesInterfaceV6_4)9455": {
        "encoding": "inplace",
        "label": "contract GNSBorrowingFeesInterfaceV6_4",
        "numberOfBytes": "20"
      },
      "t_contract(GNSPairInfosInterfaceV6)9600": {
        "encoding": "inplace",
        "label": "contract GNSPairInfosInterfaceV6",
        "numberOfBytes": "20"
      },
      "t_contract(GNSReferralsInterfaceV6_2)9637": {
        "encoding": "inplace",
        "label": "contract GNSReferralsInterfaceV6_2",
        "numberOfBytes": "20"
      },
      "t_contract(GNSStakingInterfaceV6_4_1)9725": {
        "encoding": "inplace",
        "label": "contract GNSStakingInterfaceV6_4_1",
        "numberOfBytes": "20"
      },
      "t_contract(IGNSOracleRewardsV6_4_1)9917": {
        "encoding": "inplace",
        "label": "contract IGNSOracleRewardsV6_4_1",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterfaceV5)10699": {
        "encoding": "inplace",
        "label": "contract StorageInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_enum(TradeType)5732": {
        "encoding": "inplace",
        "label": "enum GNSTradingCallbacksV6_4_1.TradeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(LastUpdated)5701_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(LastUpdated)5701_storage)))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(TradeData)5706_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(TradeData)5706_storage)))"
      },
      "t_mapping(t_enum(TradeType)5732,t_struct(LastUpdated)5701_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)5732",
        "label": "mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated)",
        "numberOfBytes": "32",
        "value": "t_struct(LastUpdated)5701_storage"
      },
      "t_mapping(t_enum(TradeType)5732,t_struct(TradeData)5706_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)5732",
        "label": "mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData)",
        "numberOfBytes": "32",
        "value": "t_struct(TradeData)5706_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(LastUpdated)5701_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)5732,t_struct(LastUpdated)5701_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(TradeData)5706_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)5732,t_struct(TradeData)5706_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(LastUpdated)5701_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(LastUpdated)5701_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(TradeData)5706_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)5732,t_struct(TradeData)5706_storage))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LastUpdated)5701_storage": {
        "encoding": "inplace",
        "label": "struct GNSTradingCallbacksV6_4_1.LastUpdated",
        "members": [
          {
            "astId": 5694,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5696,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "sl",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5698,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "limit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5700,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "created",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TradeData)5706_storage": {
        "encoding": "inplace",
        "label": "struct GNSTradingCallbacksV6_4_1.TradeData",
        "members": [
          {
            "astId": 5703,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "maxSlippageP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 5705,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "_placeholder",
            "offset": 5,
            "slot": "0",
            "type": "t_uint216"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}