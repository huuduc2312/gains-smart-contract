{
  "address": "0xC6080DdE76eAF6732CF1A0dEbecFF6818E7F57ab",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "_oracleRewards",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPosDai",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marketOrdersTimeout",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "bypass",
          "type": "bool"
        }
      ],
      "name": "BypassTriggerLinkUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeDai",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterfaceV5.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.PendingMarketOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "ChainlinkCallbackTimeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "CouldNotCloseTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "MarketOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "byPassesLinkCost",
          "type": "bool"
        }
      ],
      "name": "NftOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSlippageP",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "SlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "TpUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_msgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bypassTriggerLink",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "cancelOpenLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "closeTradeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_order",
          "type": "uint256"
        }
      ],
      "name": "closeTradeMarketTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "call_data",
          "type": "bytes"
        }
      ],
      "name": "delegatedAction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "packed",
          "type": "uint256"
        }
      ],
      "name": "executeNftOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketOrdersTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPosDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "internalType": "enum IGNSOracleRewardsV6_4_1.OpenLimitOrderType",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "slippageP",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "openTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_order",
          "type": "uint256"
        }
      ],
      "name": "openTradeMarketTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRewards",
      "outputs": [
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bypass",
          "type": "bool"
        }
      ],
      "name": "setBypassTriggerLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMarketOrdersTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMaxPosDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippageP",
          "type": "uint256"
        }
      ],
      "name": "updateOpenLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "updateSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "updateTp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6aa6ce8c37c3ced5cc9f6794c9ca33967655969e5583a0bf00e6087057465b4f",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0xC6080DdE76eAF6732CF1A0dEbecFF6818E7F57ab",
    "transactionIndex": 32,
    "gasUsed": "4415316",
    "logsBloom": "0x
    "blockHash": "0x288a5998c29afa7978705fc17845f87cef488413d206204ea6471dd2d99eb166",
    "transactionHash": "0x6aa6ce8c37c3ced5cc9f6794c9ca33967655969e5583a0bf00e6087057465b4f",
    "logs": [],
    "blockNumber": 6071123,
    "cumulativeGasUsed": "10420863",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x688e6c96e1b49829111A45fDE13ED9cD6793e0d6",
    "0xb8C49b08d7c3bab6099AE6021094abdaba565124",
    "0xC981662B3D88fabE8A40bf305278Bc0B7137e852",
    "0x03BCa318D5bE829383D37aFeFb7a974E90a18EA0",
    "0x3355d69C31FfBCA387bDa957547ea745E7c44F4e",
    "100000000000000000000000",
    30
  ],
  "numDeployments": 1,
  "solcInputHash": "cbafc231575a9f48842aa4603e9ae40d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"_oracleRewards\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPosDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketOrdersTimeout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bypass\",\"type\":\"bool\"}],\"name\":\"BypassTriggerLinkUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.PendingMarketOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"ChainlinkCallbackTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CouldNotCloseTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"MarketOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"byPassesLinkCost\",\"type\":\"bool\"}],\"name\":\"NftOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSlippageP\",\"type\":\"uint256\"}],\"name\":\"OpenLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"SlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"TpUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bypassTriggerLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"cancelOpenLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"closeTradeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"closeTradeMarketTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call_data\",\"type\":\"bytes\"}],\"name\":\"delegatedAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packed\",\"type\":\"uint256\"}],\"name\":\"executeNftOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketOrdersTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPosDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"internalType\":\"enum IGNSOracleRewardsV6_4_1.OpenLimitOrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"openTradeMarketTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRewards\",\"outputs\":[{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bypass\",\"type\":\"bool\"}],\"name\":\"setBypassTriggerLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMarketOrdersTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxPosDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippageP\",\"type\":\"uint256\"}],\"name\":\"updateOpenLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"updateSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"updateTp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GNSTradingV6_4_1.sol\":\"GNSTradingV6_4_1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/GNSTradingV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"../interfaces/GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"../interfaces/GNSReferralsInterfaceV6_2.sol\\\";\\nimport \\\"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\\\";\\nimport \\\"../interfaces/IGNSOracleRewardsV6_4_1.sol\\\";\\nimport \\\"../v6.2/Delegatable.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\nimport \\\"../libraries/TradeUtils.sol\\\";\\nimport \\\"../libraries/PackingUtils.sol\\\";\\n\\ncontract GNSTradingV6_4_1 is Delegatable {\\n    using TradeUtils for address;\\n    using PackingUtils for uint256;\\n\\n    // Contracts (constant)\\n    StorageInterfaceV5 public immutable storageT;\\n    IGNSOracleRewardsV6_4_1 public immutable oracleRewards;\\n    GNSPairInfosInterfaceV6 public immutable pairInfos;\\n    GNSReferralsInterfaceV6_2 public immutable referrals;\\n    GNSBorrowingFeesInterfaceV6_4 public immutable borrowingFees;\\n\\n    // Params (constant)\\n    uint private constant PRECISION = 1e10;\\n    uint private constant MAX_SL_P = 75; // -75% PNL\\n\\n    // Params (adjustable)\\n    uint public maxPosDai; // 1e18 (eg. 75000 * 1e18)\\n    uint public marketOrdersTimeout; // block (eg. 30)\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n\\n    mapping(address => bool) public bypassTriggerLink; // Doesn't have to pay link in executeNftOrder()\\n\\n    // Events\\n    event Done(bool done);\\n    event Paused(bool paused);\\n\\n    event NumberUpdated(string name, uint value);\\n    event BypassTriggerLinkUpdated(address user, bool bypass);\\n\\n    event MarketOrderInitiated(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        bool open\\n    );\\n\\n    event OpenLimitPlaced(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n    event OpenLimitUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newPrice,\\n        uint newTp,\\n        uint newSl,\\n        uint maxSlippageP\\n    );\\n    event OpenLimitCanceled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n\\n    event TpUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newTp\\n    );\\n    event SlUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newSl\\n    );\\n\\n    event NftOrderInitiated(\\n        uint orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        bool byPassesLinkCost\\n    );\\n\\n    event ChainlinkCallbackTimeout(\\n        uint indexed orderId,\\n        StorageInterfaceV5.PendingMarketOrder order\\n    );\\n    event CouldNotCloseTrade(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n\\n    constructor(\\n        StorageInterfaceV5 _storageT,\\n        IGNSOracleRewardsV6_4_1 _oracleRewards,\\n        GNSPairInfosInterfaceV6 _pairInfos,\\n        GNSReferralsInterfaceV6_2 _referrals,\\n        GNSBorrowingFeesInterfaceV6_4 _borrowingFees,\\n        uint _maxPosDai,\\n        uint _marketOrdersTimeout\\n    ) {\\n        require(\\n            address(_storageT) != address(0) &&\\n                address(_oracleRewards) != address(0) &&\\n                address(_pairInfos) != address(0) &&\\n                address(_referrals) != address(0) &&\\n                address(_borrowingFees) != address(0) &&\\n                _maxPosDai > 0 &&\\n                _marketOrdersTimeout > 0,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        storageT = _storageT;\\n        oracleRewards = _oracleRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        borrowingFees = _borrowingFees;\\n\\n        maxPosDai = _maxPosDai;\\n        marketOrdersTimeout = _marketOrdersTimeout;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n        _;\\n    }\\n    modifier notContract() {\\n        require(tx.origin == msg.sender);\\n        _;\\n    }\\n    modifier notDone() {\\n        require(!isDone, \\\"DONE\\\");\\n        _;\\n    }\\n\\n    // Manage params\\n    function setMaxPosDai(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        maxPosDai = value;\\n        emit NumberUpdated(\\\"maxPosDai\\\", value);\\n    }\\n\\n    function setMarketOrdersTimeout(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        marketOrdersTimeout = value;\\n        emit NumberUpdated(\\\"marketOrdersTimeout\\\", value);\\n    }\\n\\n    function setBypassTriggerLink(address user, bool bypass) external onlyGov {\\n        bypassTriggerLink[user] = bypass;\\n\\n        emit BypassTriggerLinkUpdated(user, bypass);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n        emit Paused(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n        emit Done(isDone);\\n    }\\n\\n    // Open new trade (MARKET/LIMIT)\\n    function openTrade(\\n        StorageInterfaceV5.Trade memory t,\\n        IGNSOracleRewardsV6_4_1.OpenLimitOrderType orderType, // LEGACY => market\\n        uint slippageP, // 1e10 (%)\\n        address referrer\\n    ) external notContract notDone {\\n        require(!isPaused, \\\"PAUSED\\\");\\n        require(t.openPrice * slippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n        require(t.openPrice > 0, \\\"PRICE_ZERO\\\");\\n\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        address sender = _msgSender();\\n\\n        require(\\n            storageT.openTradesCount(sender, t.pairIndex) +\\n                storageT.pendingMarketOpenCount(sender, t.pairIndex) +\\n                storageT.openLimitOrdersCount(sender, t.pairIndex) <\\n                storageT.maxTradesPerPair(),\\n            \\\"MAX_TRADES_PER_PAIR\\\"\\n        );\\n\\n        require(\\n            storageT.pendingOrderIdsCount(sender) <\\n                storageT.maxPendingMarketOrders(),\\n            \\\"MAX_PENDING_ORDERS\\\"\\n        );\\n        require(t.positionSizeDai <= maxPosDai, \\\"ABOVE_MAX_POS\\\");\\n        require(\\n            t.positionSizeDai * t.leverage >=\\n                pairsStored.pairMinLevPosDai(t.pairIndex),\\n            \\\"BELOW_MIN_POS\\\"\\n        );\\n\\n        require(\\n            t.leverage > 0 &&\\n                t.leverage >= pairsStored.pairMinLeverage(t.pairIndex) &&\\n                t.leverage <= _pairMaxLeverage(pairsStored, t.pairIndex),\\n            \\\"LEVERAGE_INCORRECT\\\"\\n        );\\n\\n        require(\\n            t.tp == 0 || (t.buy ? t.tp > t.openPrice : t.tp < t.openPrice),\\n            \\\"WRONG_TP\\\"\\n        );\\n        require(\\n            t.sl == 0 || (t.buy ? t.sl < t.openPrice : t.sl > t.openPrice),\\n            \\\"WRONG_SL\\\"\\n        );\\n\\n        (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\\n            0,\\n            t.pairIndex,\\n            t.buy,\\n            t.positionSizeDai * t.leverage\\n        );\\n        require(\\n            priceImpactP * t.leverage <= pairInfos.maxNegativePnlOnOpenP(),\\n            \\\"PRICE_IMPACT_TOO_HIGH\\\"\\n        );\\n\\n        storageT.transferDai(sender, address(storageT), t.positionSizeDai);\\n\\n        if (orderType != IGNSOracleRewardsV6_4_1.OpenLimitOrderType.LEGACY) {\\n            uint index = storageT.firstEmptyOpenLimitIndex(sender, t.pairIndex);\\n\\n            storageT.storeOpenLimitOrder(\\n                StorageInterfaceV5.OpenLimitOrder(\\n                    sender,\\n                    t.pairIndex,\\n                    index,\\n                    t.positionSizeDai,\\n                    0,\\n                    t.buy,\\n                    t.leverage,\\n                    t.tp,\\n                    t.sl,\\n                    t.openPrice,\\n                    t.openPrice,\\n                    block.number,\\n                    0\\n                )\\n            );\\n\\n            oracleRewards.setOpenLimitOrderType(\\n                sender,\\n                t.pairIndex,\\n                index,\\n                orderType\\n            );\\n\\n            address c = storageT.callbacks();\\n            c.setTradeLastUpdated(\\n                sender,\\n                t.pairIndex,\\n                index,\\n                TradingCallbacksV6_4.TradeType.LIMIT,\\n                ChainUtils.getBlockNumber()\\n            );\\n            c.setTradeData(\\n                sender,\\n                t.pairIndex,\\n                index,\\n                TradingCallbacksV6_4.TradeType.LIMIT,\\n                slippageP\\n            );\\n\\n            emit OpenLimitPlaced(sender, t.pairIndex, index);\\n        } else {\\n            uint orderId = aggregator.getPrice(\\n                t.pairIndex,\\n                AggregatorInterfaceV6_4.OrderType.MARKET_OPEN,\\n                t.positionSizeDai * t.leverage,\\n                ChainUtils.getBlockNumber()\\n            );\\n\\n            storageT.storePendingMarketOrder(\\n                StorageInterfaceV5.PendingMarketOrder(\\n                    StorageInterfaceV5.Trade(\\n                        sender,\\n                        t.pairIndex,\\n                        0,\\n                        // 0,\\n                        t.positionSizeDai,\\n                        0,\\n                        t.buy,\\n                        t.leverage,\\n                        t.tp,\\n                        t.sl\\n                    ),\\n                    0,\\n                    t.openPrice,\\n                    slippageP,\\n                    0,\\n                    0\\n                ),\\n                orderId,\\n                true\\n            );\\n\\n            emit MarketOrderInitiated(orderId, sender, t.pairIndex, true);\\n        }\\n\\n        referrals.registerPotentialReferrer(sender, referrer);\\n    }\\n\\n    // Close trade (MARKET)\\n    function closeTradeMarket(\\n        uint pairIndex,\\n        uint index\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n        StorageInterfaceV5.TradeInfo memory i = storageT.openTradesInfo(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n\\n        require(\\n            storageT.pendingOrderIdsCount(sender) <\\n                storageT.maxPendingMarketOrders(),\\n            \\\"MAX_PENDING_ORDERS\\\"\\n        );\\n        require(!i.beingMarketClosed, \\\"ALREADY_BEING_CLOSED\\\");\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint orderId = storageT.priceAggregator().getPrice(\\n            pairIndex,\\n            AggregatorInterfaceV6_4.OrderType.MARKET_CLOSE,\\n            // (t.initialPosToken * i.tokenPriceDai * t.leverage) / PRECISION,\\n            t.positionSizeDai * t.leverage,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        storageT.storePendingMarketOrder(\\n            StorageInterfaceV5.PendingMarketOrder(\\n                StorageInterfaceV5.Trade(\\n                    sender,\\n                    pairIndex,\\n                    index,\\n                    // 0,\\n                    0,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0\\n                ),\\n                0,\\n                0,\\n                0,\\n                0,\\n                0\\n            ),\\n            orderId,\\n            false\\n        );\\n\\n        emit MarketOrderInitiated(orderId, sender, pairIndex, false);\\n    }\\n\\n    // Manage limit order (OPEN)\\n    function updateOpenLimitOrder(\\n        uint pairIndex,\\n        uint index,\\n        uint price, // PRECISION\\n        uint tp,\\n        uint sl,\\n        uint maxSlippageP\\n    ) external notContract notDone {\\n        require(price > 0, \\\"PRICE_ZERO\\\");\\n\\n        address sender = _msgSender();\\n        require(\\n            storageT.hasOpenLimitOrder(sender, pairIndex, index),\\n            \\\"NO_LIMIT\\\"\\n        );\\n\\n        StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n\\n        require(tp == 0 || (o.buy ? tp > price : tp < price), \\\"WRONG_TP\\\");\\n        require(sl == 0 || (o.buy ? sl < price : sl > price), \\\"WRONG_SL\\\");\\n\\n        require(price * maxSlippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n\\n        _checkNoPendingTrigger(\\n            sender,\\n            pairIndex,\\n            index,\\n            StorageInterfaceV5.LimitOrder.OPEN\\n        );\\n\\n        o.minPrice = price;\\n        o.maxPrice = price;\\n        o.tp = tp;\\n        o.sl = sl;\\n\\n        storageT.updateOpenLimitOrder(o);\\n\\n        address c = storageT.callbacks();\\n        c.setTradeLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksV6_4.TradeType.LIMIT,\\n            ChainUtils.getBlockNumber()\\n        );\\n        c.setTradeData(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksV6_4.TradeType.LIMIT,\\n            maxSlippageP\\n        );\\n\\n        emit OpenLimitUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            price,\\n            tp,\\n            sl,\\n            maxSlippageP\\n        );\\n    }\\n\\n    function cancelOpenLimitOrder(\\n        uint pairIndex,\\n        uint index\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n        require(\\n            storageT.hasOpenLimitOrder(sender, pairIndex, index),\\n            \\\"NO_LIMIT\\\"\\n        );\\n\\n        StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n\\n        _checkNoPendingTrigger(\\n            sender,\\n            pairIndex,\\n            index,\\n            StorageInterfaceV5.LimitOrder.OPEN\\n        );\\n\\n        storageT.unregisterOpenLimitOrder(sender, pairIndex, index);\\n        storageT.transferDai(address(storageT), sender, o.positionSize);\\n\\n        emit OpenLimitCanceled(sender, pairIndex, index);\\n    }\\n\\n    // Manage limit order (TP/SL)\\n    function updateTp(\\n        uint pairIndex,\\n        uint index,\\n        uint newTp\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        _checkNoPendingTrigger(\\n            sender,\\n            pairIndex,\\n            index,\\n            StorageInterfaceV5.LimitOrder.TP\\n        );\\n\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        storageT.updateTp(sender, pairIndex, index, newTp);\\n        storageT.callbacks().setTpLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksV6_4.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit TpUpdated(sender, pairIndex, index, newTp);\\n    }\\n\\n    function updateSl(\\n        uint pairIndex,\\n        uint index,\\n        uint newSl\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        _checkNoPendingTrigger(\\n            sender,\\n            pairIndex,\\n            index,\\n            StorageInterfaceV5.LimitOrder.SL\\n        );\\n\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint maxSlDist = (t.openPrice * MAX_SL_P) / 100 / t.leverage;\\n\\n        require(\\n            newSl == 0 ||\\n                (\\n                    t.buy\\n                        ? newSl >= t.openPrice - maxSlDist\\n                        : newSl <= t.openPrice + maxSlDist\\n                ),\\n            \\\"SL_TOO_BIG\\\"\\n        );\\n\\n        storageT.updateSl(sender, pairIndex, index, newSl);\\n        storageT.callbacks().setSlLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksV6_4.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit SlUpdated(sender, pairIndex, index, newSl);\\n    }\\n\\n    // Execute limit order\\n    function executeNftOrder(uint256 packed) external notContract notDone {\\n        (\\n            uint _orderType,\\n            address trader,\\n            uint pairIndex,\\n            uint index,\\n            ,\\n\\n        ) = packed.unpackExecuteNftOrder();\\n\\n        StorageInterfaceV5.LimitOrder orderType = StorageInterfaceV5.LimitOrder(\\n            _orderType\\n        );\\n        IGNSOracleRewardsV6_4_1.TriggeredLimitId\\n            memory triggeredLimitId = _checkNoPendingTrigger(\\n                trader,\\n                pairIndex,\\n                index,\\n                orderType\\n            );\\n\\n        StorageInterfaceV5.Trade memory t;\\n        bool isOpenLimit = orderType == StorageInterfaceV5.LimitOrder.OPEN;\\n\\n        if (isOpenLimit) {\\n            require(\\n                storageT.hasOpenLimitOrder(trader, pairIndex, index),\\n                \\\"NO_LIMIT\\\"\\n            );\\n        } else {\\n            t = storageT.openTrades(trader, pairIndex, index);\\n\\n            require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n            if (orderType == StorageInterfaceV5.LimitOrder.LIQ) {\\n                if (t.sl > 0) {\\n                    uint liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                        GNSBorrowingFeesInterfaceV6_4.LiqPriceInput(\\n                            t.trader,\\n                            t.pairIndex,\\n                            t.index,\\n                            t.openPrice,\\n                            t.buy,\\n                            // (t.initialPosToken *\\n                            //     storageT\\n                            //         .openTradesInfo(\\n                            //             t.trader,\\n                            //             t.pairIndex,\\n                            //             t.index\\n                            //         )\\n                            //         .tokenPriceDai) / PRECISION,\\n                            t.positionSizeDai,\\n                            t.leverage\\n                        )\\n                    );\\n\\n                    require(\\n                        t.buy ? liqPrice > t.sl : liqPrice < t.sl,\\n                        \\\"HAS_SL\\\"\\n                    );\\n                }\\n            } else {\\n                require(\\n                    orderType != StorageInterfaceV5.LimitOrder.SL || t.sl > 0,\\n                    \\\"NO_SL\\\"\\n                );\\n                require(\\n                    orderType != StorageInterfaceV5.LimitOrder.TP || t.tp > 0,\\n                    \\\"NO_TP\\\"\\n                );\\n            }\\n        }\\n\\n        address sender = _msgSender();\\n        bool byPassesLinkCost = bypassTriggerLink[sender];\\n\\n        uint leveragedPosDai;\\n\\n        if (isOpenLimit) {\\n            StorageInterfaceV5.OpenLimitOrder memory l = storageT\\n                .getOpenLimitOrder(trader, pairIndex, index);\\n\\n            uint _leveragedPosDai = l.positionSize * l.leverage;\\n            (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\\n                0,\\n                l.pairIndex,\\n                l.buy,\\n                _leveragedPosDai\\n            );\\n\\n            require(\\n                priceImpactP * l.leverage <= pairInfos.maxNegativePnlOnOpenP(),\\n                \\\"PRICE_IMPACT_TOO_HIGH\\\"\\n            );\\n\\n            if (!byPassesLinkCost) {\\n                leveragedPosDai = _leveragedPosDai;\\n            }\\n        } else if (!byPassesLinkCost) {\\n            leveragedPosDai =\\n                // (t.initialPosToken *\\n                //     storageT\\n                //         .openTradesInfo(trader, pairIndex, index)\\n                //         .tokenPriceDai *\\n                //     t.leverage) /\\n                // PRECISION;\\n                t.positionSizeDai *\\n                t.leverage;\\n        }\\n\\n        if (leveragedPosDai > 0) {\\n            storageT.transferLinkToAggregator(\\n                sender,\\n                pairIndex,\\n                leveragedPosDai\\n            );\\n        }\\n\\n        uint orderId = _getPriceNftOrder(\\n            isOpenLimit,\\n            trader,\\n            pairIndex,\\n            index,\\n            isOpenLimit\\n                ? TradingCallbacksV6_4.TradeType.LIMIT\\n                : TradingCallbacksV6_4.TradeType.MARKET,\\n            orderType,\\n            leveragedPosDai\\n        );\\n\\n        StorageInterfaceV5.PendingNftOrder memory pendingNftOrder;\\n        pendingNftOrder.nftHolder = sender;\\n        pendingNftOrder.nftId = 0;\\n        pendingNftOrder.trader = trader;\\n        pendingNftOrder.pairIndex = pairIndex;\\n        pendingNftOrder.index = index;\\n        pendingNftOrder.orderType = orderType;\\n\\n        storageT.storePendingNftOrder(pendingNftOrder, orderId);\\n        oracleRewards.storeTrigger(triggeredLimitId);\\n\\n        emit NftOrderInitiated(orderId, trader, pairIndex, byPassesLinkCost);\\n    }\\n\\n    // Market timeout\\n    function openTradeMarketTimeout(uint _order) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT\\n            .reqID_pendingMarketOrder(_order);\\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        require(\\n            o.block > 0 && block.number >= o.block + marketOrdersTimeout,\\n            \\\"WAIT_TIMEOUT\\\"\\n        );\\n        require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n        require(t.leverage > 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n        storageT.unregisterPendingMarketOrder(_order, true);\\n        storageT.transferDai(address(storageT), sender, t.positionSizeDai);\\n\\n        emit ChainlinkCallbackTimeout(_order, o);\\n    }\\n\\n    function closeTradeMarketTimeout(uint _order) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT\\n            .reqID_pendingMarketOrder(_order);\\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        require(\\n            o.block > 0 && block.number >= o.block + marketOrdersTimeout,\\n            \\\"WAIT_TIMEOUT\\\"\\n        );\\n        require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n        require(t.leverage == 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n        storageT.unregisterPendingMarketOrder(_order, false);\\n\\n        (bool success, ) = address(this).delegatecall(\\n            abi.encodeWithSignature(\\n                \\\"closeTradeMarket(uint256,uint256)\\\",\\n                t.pairIndex,\\n                t.index\\n            )\\n        );\\n\\n        if (!success) {\\n            emit CouldNotCloseTrade(sender, t.pairIndex, t.index);\\n        }\\n\\n        emit ChainlinkCallbackTimeout(_order, o);\\n    }\\n\\n    // Helpers (private)\\n    function _checkNoPendingTrigger(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        StorageInterfaceV5.LimitOrder orderType\\n    )\\n        private\\n        view\\n        returns (\\n            IGNSOracleRewardsV6_4_1.TriggeredLimitId memory triggeredLimitId\\n        )\\n    {\\n        triggeredLimitId = IGNSOracleRewardsV6_4_1.TriggeredLimitId(\\n            trader,\\n            pairIndex,\\n            index,\\n            orderType\\n        );\\n        require(\\n            !oracleRewards.triggered(triggeredLimitId) ||\\n                oracleRewards.timedOut(triggeredLimitId),\\n            \\\"PENDING_TRIGGER\\\"\\n        );\\n    }\\n\\n    function _pairMaxLeverage(\\n        PairsStorageInterfaceV6 pairsStored,\\n        uint pairIndex\\n    ) private view returns (uint) {\\n        uint max = TradingCallbacksV6_4(storageT.callbacks()).pairMaxLeverage(\\n            pairIndex\\n        );\\n        return max > 0 ? max : pairsStored.pairMaxLeverage(pairIndex);\\n    }\\n\\n    function _getPriceNftOrder(\\n        bool isOpenLimit,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType tradeType,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        uint leveragedPosDai\\n    ) private returns (uint orderId) {\\n        TradingCallbacksV6_4.LastUpdated\\n            memory lastUpdated = TradingCallbacksV6_4(storageT.callbacks())\\n                .tradeLastUpdated(trader, pairIndex, index, tradeType);\\n\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n        orderId = aggregator.getPrice(\\n            pairIndex,\\n            isOpenLimit\\n                ? AggregatorInterfaceV6_4.OrderType.LIMIT_OPEN\\n                : AggregatorInterfaceV6_4.OrderType.LIMIT_CLOSE,\\n            leveragedPosDai,\\n            isOpenLimit\\n                ? lastUpdated.limit\\n                : orderType == StorageInterfaceV5.LimitOrder.SL\\n                ? lastUpdated.sl\\n                : orderType == StorageInterfaceV5.LimitOrder.TP\\n                ? lastUpdated.tp\\n                : lastUpdated.created\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9ae114cdb736b4416f2b30f44f3c6e3581450eda00e87a9524fde3af2c11ce05\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ChainlinkFeedInterfaceV5 {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0xd13756cf435ea7e26ec8dbceed69f93553b142029e3c1753367769dde6d9cfd7\",\"license\":\"MIT\"},\"contracts/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSBorrowingFeesInterfaceV6_4 {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1e71c17d0c0428b673324ef58a8d8fb03ff3caeb6802558347f1aeb5ee49dd8a\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSPairInfosInterfaceV6 {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71feae30036c784a9685909bfc1c8132fca5384a5a80db79f35b5864470a90a6\",\"license\":\"MIT\"},\"contracts/interfaces/GNSReferralsInterfaceV6_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSReferralsInterfaceV6_2 {\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referral\\n    ) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeDai,\\n        uint pairOpenFeeP,\\n        uint tokenPriceDai\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(\\n        address trader\\n    ) external view returns (address referrer);\\n}\\n\",\"keccak256\":\"0x1e272b18fda8f42e080107f38fdad48148cd913acdae2f6eecec5790597a92da\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IGNSOracleRewardsV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport {StorageInterfaceV5} from \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface IGNSOracleRewardsV6_4_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeTrigger(TriggeredLimitId calldata) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeOracleReward(TriggeredLimitId calldata, uint) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x92824c7696db412fa7b11d7c2ececacd8a2fd496a687058b6b8e416da4c12b43\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1fd411df874a31e89b8a26375446f6bf9d14279a1e02ee1e6541f0f2a1bec9da\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x17570efd5c6708b7adc07cd3fdb11a5983bc5db9f7b3d0bf0f50b34f95ea6358\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosDai(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd274cbab16c2f7a08cd33c1c59921fae308aef6dea851621c5f1540e8c7733f6\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity ^0.8.7;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        // uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        // uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function openTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function openTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders()\\n        external\\n        view\\n        returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(\\n        TriggeredLimitId calldata,\\n        address,\\n        uint\\n    ) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(\\n        TriggeredLimitId calldata,\\n        uint,\\n        uint\\n    ) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(\\n        uint,\\n        address,\\n        uint,\\n        address,\\n        uint,\\n        uint\\n    ) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    // function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(\\n        address,\\n        uint,\\n        uint,\\n        TradeType\\n    ) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata,\\n        LastUpdated memory\\n    ) external;\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata,\\n        TradeData memory\\n    ) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x822f477e8cd542d4524b943f98576e915cae1efd6008fbe0834d7cc98f586e94\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface TokenInterfaceV5 {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1ad2a4fa990051fb693928d91a6c3192cfd68604d12436e7459c4d9f96cccd5\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0x6c7fba5c30c9f2c493d0fa6bfa8fb4414e8d74aa253cddb145b1496269cb6c1a\",\"license\":\"MIT\"},\"contracts/libraries/PackingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nlibrary PackingUtils {\\n    function pack(\\n        uint256[] memory values,\\n        uint256[] memory bitLengths\\n    ) external pure returns (uint256 packed) {\\n        require(\\n            values.length == bitLengths.length,\\n            \\\"Mismatch in the lengths of values and bitLengths arrays\\\"\\n        );\\n\\n        uint256 currentShift;\\n\\n        for (uint256 i; i < values.length; i++) {\\n            require(\\n                currentShift + bitLengths[i] <= 256,\\n                \\\"Packed value exceeds 256 bits\\\"\\n            );\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            require(\\n                values[i] <= maxValue,\\n                \\\"Value too large for specified bit length\\\"\\n            );\\n\\n            uint256 maskedValue = values[i] & maxValue;\\n            packed |= maskedValue << currentShift;\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack(\\n        uint256 packed,\\n        uint256[] memory bitLengths\\n    ) external pure returns (uint256[] memory values) {\\n        values = new uint256[](bitLengths.length);\\n\\n        uint256 currentShift;\\n        for (uint256 i; i < bitLengths.length; i++) {\\n            require(\\n                currentShift + bitLengths[i] <= 256,\\n                \\\"Unpacked value exceeds 256 bits\\\"\\n            );\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            uint256 mask = maxValue << currentShift;\\n            values[i] = (packed & mask) >> currentShift;\\n\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack256To64(\\n        uint256 packed\\n    ) external pure returns (uint64 a, uint64 b, uint64 c, uint64 d) {\\n        a = uint64(packed);\\n        b = uint64(packed >> 64);\\n        c = uint64(packed >> 128);\\n        d = uint64(packed >> 192);\\n    }\\n\\n    // Function-specific unpacking utils\\n    function unpackExecuteNftOrder(\\n        uint256 packed\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 a,\\n            address b,\\n            uint256 c,\\n            uint256 d,\\n            uint256 e,\\n            uint256 f\\n        )\\n    {\\n        a = packed & 0xFF; // 8 bits\\n        b = address(uint160(packed >> 8)); // 160 bits\\n        c = (packed >> 168) & 0xFFFF; // 16 bits\\n        d = (packed >> 184) & 0xFFFF; // 16 bits\\n        e = (packed >> 200) & 0xFFFF; // 16 bits\\n        f = (packed >> 216) & 0xFFFF; // 16 bits\\n    }\\n}\\n\",\"keccak256\":\"0x84ab3d66240a3bd097e62c47d48fbe0c373aa34a30ab30cd54fb081510a7ef99\",\"license\":\"MIT\"},\"contracts/libraries/TradeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\n\\nlibrary TradeUtils {\\n    function _getTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type\\n    )\\n        internal\\n        view\\n        returns (\\n            TradingCallbacksV6_4,\\n            TradingCallbacksV6_4.LastUpdated memory,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory\\n        )\\n    {\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        TradingCallbacksV6_4.LastUpdated memory l = callbacks.tradeLastUpdated(\\n            trader,\\n            pairIndex,\\n            index,\\n            _type\\n        );\\n\\n        return (\\n            callbacks,\\n            l,\\n            TradingCallbacksV6_4.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            )\\n        );\\n    }\\n\\n    function setTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        uint32 b = uint32(blockNumber);\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        callbacks.setTradeLastUpdated(\\n            TradingCallbacksV6_4.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            ),\\n            TradingCallbacksV6_4.LastUpdated(b, b, b, b)\\n        );\\n    }\\n\\n    function setSlLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksV6_4 callbacks,\\n            TradingCallbacksV6_4.LastUpdated memory l,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.sl = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTpLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksV6_4 callbacks,\\n            TradingCallbacksV6_4.LastUpdated memory l,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.tp = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTradeData(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint maxSlippageP\\n    ) external {\\n        require(maxSlippageP <= type(uint40).max, \\\"OVERFLOW\\\");\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        callbacks.setTradeData(\\n            TradingCallbacksV6_4.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            ),\\n            TradingCallbacksV6_4.TradeData(uint40(maxSlippageP), 0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x715a1ff34043ad891711fd3aab29b99433b35859cda19adf7b978b6af2ca8e92\",\"license\":\"MIT\"},\"contracts/v6.2/Delegatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nabstract contract Delegatable {\\n    mapping(address => address) public delegations;\\n    address private senderOverride;\\n\\n    function setDelegate(address delegate) external {\\n        require(tx.origin == msg.sender, \\\"NO_CONTRACT\\\");\\n\\n        delegations[msg.sender] = delegate;\\n    }\\n\\n    function removeDelegate() external {\\n        delegations[msg.sender] = address(0);\\n    }\\n\\n    function delegatedAction(\\n        address trader,\\n        bytes calldata call_data\\n    ) external returns (bytes memory) {\\n        require(delegations[trader] == msg.sender, \\\"DELEGATE_NOT_APPROVED\\\");\\n\\n        senderOverride = trader;\\n        (bool success, bytes memory result) = address(this).delegatecall(\\n            call_data\\n        );\\n        if (!success) {\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577 (return the original revert reason)\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n\\n        senderOverride = address(0);\\n\\n        return result;\\n    }\\n\\n    function _msgSender() public view returns (address) {\\n        if (senderOverride == address(0)) {\\n            return msg.sender;\\n        } else {\\n            return senderOverride;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x633a9f838896ef7a1173c1256df1775f470815bc5fad393486bbb763e9edac3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61012034620002cf57601f6200510638819003918201601f19168301916001600160401b03831184841017620002d45780849260e094604052833981010312620002cf5780516001600160a01b039182821691828103620002cf5760208201519084821691828103620002cf5760408401519186831693848403620002cf57606086015194888616808703620002cf576080880151998a1691828b03620002cf5760c060a08a01519901519915159384620002c4575b5083620002b9575b5082620002ae575b5081620002a3575b508062000299575b806200028f575b156200025b5760805260a05260c05260e052610100928352600255600355604051614e1b9182620002eb8339608051828181610309015281816104e9015281816106bf01528181610776015281816108ea01528181610a3401528181610c3a01528181610f36015281816110140152818161123a01528181611301015281816115e601528181611b9701528181611c8d01528181611d5a01528181611fa0015281816122a801528181612731015281816129d801528181612a8901528181612aeb01528181612b6401528181612bcb01528181612c1c01528181612df701528181612e4001528181612e7701528181612ee801528181612fb80152818161300b015281816130c601528181613474015281816134c3015281816147a101526149b4015260a05182818161034f0152818161094a01528181613049015281816145a7015261470a015260c0518281816102c3015281816107cb0152612d27015260e0518281816126ad01526131e50152518181816105aa0152610d8d0152f35b60405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b6044820152606490fd5b50851515620000dc565b50841515620000d5565b9050151538620000cd565b1515915038620000c5565b1515925038620000bd565b1515935038620000b5565b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040526004361015610013575b600080fd5b60003560e01c8063119df25f146102575780631346b0ff1461024e57806316fff07414610245578063272300c91461023c578063279a165c146102335780632c7c8f4e1461022a57806336fb8b1514610221578063410c0b7c146102185780634278bafe1461020f578063531cc965146102065780636c53cc1c146101fd5780638456cb59146101f4578063876d3abd146101eb5780638f062227146101e2578063934d1cf4146101d9578063990382cf146101d05780639a10cc32146101c7578063a2a3c0cb146101be578063a9135374146101b5578063ae8421e1146101ac578063b187bd26146101a3578063b81bfa051461019a578063b9b6573a14610191578063be73fb9914610188578063bffe34861461017f578063c641558e14610176578063ca5eb5e11461016d578063d3dc7539146101645763d8defd151461015c57600080fd5b61000e6126dc565b5061000e612696565b5061000e612610565b5061000e612244565b5061000e612204565b5061000e611f4b565b5061000e611d08565b5061000e611c46565b5061000e611c22565b5061000e611b62565b5061000e611acc565b5061000e61158b565b5061000e611517565b5061000e6112ab565b5061000e6111f3565b5061000e6111cc565b5061000e610fc0565b5061000e610f01565b5061000e6105d9565b5061000e610593565b5061000e610477565b5061000e610441565b5061000e61040e565b5061000e6103cb565b5061000e61037e565b5061000e610338565b5061000e6102f2565b5061000e6102ac565b5061000e61027e565b600091031261000e57565b6001600160a01b03909116815260200190565b503461000e57600036600319011261000e57602061029a614d98565b6040516001600160a01b039091168152f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576020600254604051908152f35b6001600160a01b0381160361000e57565b600435906103bb8261039d565b565b61016435906103bb8261039d565b503461000e57602036600319011261000e576004356103e98161039d565b60018060a01b03166000526005602052602060ff604060002054166040519015158152f35b503461000e5760008060031936011261043e5733815260208190526040812080546001600160a01b031916905580f35b80fd5b503461000e57600036600319011261000e576020600354604051908152f35b8015150361000e57565b60a435906103bb82610460565b503461000e57604036600319011261000e577f3c0f648064e21cceb91d918a80bed80a58c69474a28d50fe3d9975b72be97c4460406004356104b88161039d565b602435906104c582610460565b82516312d43a5160e01b81526001600160a01b0391906105259083906020816004817f000000000000000000000000000000000000000000000000000000000000000086165afa908115610586575b600091610558575b5016331461290b565b169081600052600560205261054981846000209060ff801983541691151516179055565b825191825215156020820152a1005b610579915060203d811161057f575b6105718183611a0e565b8101906128e6565b3861051c565b503d610567565b61058e6128fe565b610514565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e5760208060031936011261000e5733320361000e5760049061060760ff835460081c161561383e565b60409182519263cefbb3bd60e01b845260c0848061062d85358683019190602083019252565b03817384028BeCFEE8D44c5A15b328688b4BeDCbA56Afc5af4908115610ef4575b600090819282968391610eb5575b508291879161066e61072b9695613be3565b61067a84828588614748565b93610683614168565b9161068d82613be3565b60038214898115610c0757868c8a6106ff936106bb878b519586948594636e6f99cd60e11b86528501613eae565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610bfa575b600091610bcd575b50613fc9565b81858c8a8d61073261070f614d98565b6001600160a01b0381166000908152600560205260409020909f565b5460ff1690565b9a6000998715610b9c5750848096859261076361087a9851928392632e21e28b60e21b84526101a098888501613eae565b6001600160a01b039291879183919003817f000000000000000000000000000000000000000000000000000000000000000086165afa958615610b8f575b600096610b58575b50509061084e916060860151906107c660c08801928351906138da565b998a917f000000000000000000000000000000000000000000000000000000000000000016976107fd60a088830151920151151590565b8251633f54af9960e11b815260008a82019081526020810193909352901515604083015260608201939093528290819060800103818a5afa928315610b4b575b600093610b1b575b505051906138da565b928b519283809263407b67e160e11b82525afa928315610b0e575b600093610adf575b50501115613b54565b8615610ad7575b505b8b84610a31575b6108df9484600093856108a9948d87848914610a2b575060019361499b565b9a6108bc6108b5614269565b9a8b613bed565b8901526108cb87858a01613bed565b8a6060890152608088015260a087016142b9565b6001600160a01b03947f00000000000000000000000000000000000000000000000000000000000000008616803b1561000e578860009161093693838b87519687958694859363205fe86960e21b855284016142c5565b03925af18015610a1e575b610a0b575b50847f000000000000000000000000000000000000000000000000000000000000000016803b1561000e5760006109e0946109b7927f50a583b02839381dff332433f1a37825291992d796b87483d7c51649ef504d439983865180968195829463e72353d560e01b8452830161431c565b03925af180156109fe575b6109e5575b5051958652151560208601529116929081906040820190565b0390a3005b806109f26109f8926119d3565b80610260565b386109c7565b610a066128fe565b6109c2565b806109f2610a18926119d3565b38610946565b610a266128fe565b610941565b9361499b565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b1561000e5784846108a9928f808f998f89936000998a928f6108df9f610a9986925197889687958694633348540360e11b86528501613eae565b03925af18015610aca575b610ab7575b50945050935050945061088a565b806109f2610ac4926119d3565b38610aa9565b610ad26128fe565b610aa4565b935038610881565b610aff929350803d10610b07575b610af78183611a0e565b81019061395d565b90388f610871565b503d610aed565b610b166128fe565b610869565b610b3b929350803d10610b44575b610b338183611a0e565b810190613b3e565b5090388e610845565b503d610b29565b610b536128fe565b61083d565b61084e939296509081610b7f92903d10610b88575b610b778183611a0e565b810190614000565b949091386107a9565b503d610b6d565b610b976128fe565b6107a1565b955050505050508615610bb0575b50610883565b610bc691945060c06060820151910151906138da565b9238610baa565b610bed91508d803d10610bf3575b610be58183611a0e565b810190613fb4565b386106f9565b503d610bdb565b610c026128fe565b6106f1565b935084516351d407ff60e11b815280610c2784898c610120998501613eae565b6001600160a01b039291879183919003817f000000000000000000000000000000000000000000000000000000000000000086165afa958615610ea8575b600096610e79575b50508b858c8860c08301610c8381511515613f7d565b610c8c89613be3565b60028903610e16576101008401938451610cad575b505050505050506106ff565b610dd196610cec94610d89948894610d19610cce865160018060a01b031690565b95878101519380820151608083015191606060a085019d8e51151590565b940151955196610d04610cfd611a31565b9b8c613bed565b8a8c0152890152606088015215156080870152565b60a085015260c08401528d51809581948293633837d79d60e11b8452830191909160c08060e083019460018060a01b03815116845260208101516020850152604081015160408501526060810151606085015260808101511515608085015260a081015160a08501520151910152565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa938415610e09575b600094610de4575b50505115155b15610ddd575110614234565b388b818c888280610ca1565b5111614234565b610dc59294509081610e0192903d10610b0757610af78183611a0e565b92908f610dbf565b610e116128fe565b610db7565b5050509050610e589150610e2985613be3565b60018514801590610e6b575b610e3e906141cc565b610e4785613be3565b841590811591610e5d575b50614200565b6106ff565b60e091500151151538610e52565b506101008101511515610e35565b610e99929650803d10610ea1575b610e918183611a0e565b810190613e99565b933880610c6d565b503d610e87565b610eb06128fe565b610c65565b9196505061072b9250610ee0915060c03d60c011610eed575b610ed88183611a0e565b810190614131565b509197929490915061065c565b503d610ece565b610efc6128fe565b61064e565b503461000e5760008060031936011261043e576040516312d43a5160e01b8152610f70906001600160a01b03906020816004817f000000000000000000000000000000000000000000000000000000000000000086165afa908115610fb3575b8491610558575016331461290b565b7f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2602060045460ff8082161516809160ff1916176004556040519015158152a180f35b610fbb6128fe565b610f61565b503461000e57602036600319011261000e5760043533320361000e57610fee60ff60045460081c161561383e565b610ff6614d98565b60405163b66e6b0560e01b8152600481018390526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916101c091908281602481875afa9283156111bf575b600093611190575b505061108982519161107360208501518015159081611179575b506143d1565b82516001600160a01b031681169086161461440c565b61109860c08201511515614449565b823b1561000e57604051630195728b60e71b815260048101869052600160248201526060919060008160448183895af1801561116c575b611159575b50015191803b1561000e5760006111349361111792600080516020614dcf833981519152968360405180968195829463373873db60e11b84528660048501613b98565b03925af1801561114c575b611139575b506040519182918261448f565b0390a2005b806109f2611146926119d3565b38611127565b6111546128fe565b611122565b806109f2611166926119d3565b386110d4565b6111746128fe565b6110cf565b611187915060035490613987565b4310153861106d565b6111b0929350803d106111b8575b6111a88183611a0e565b810190614354565b903880611053565b503d61119e565b6111c76128fe565b61104b565b503461000e57600036600319011261000e57602060ff60045460081c166040519015158152f35b503461000e57602036600319011261000e57600080516020614daf83398151915260806004356112736040516312d43a5160e01b815260018060a01b0390602081600481857f0000000000000000000000000000000000000000000000000000000000000000165afa90811561058657600091610558575016331461290b565b61127e811515612942565b80600255604051906040825260096040830152686d6178506f7344616960b81b60608301526020820152a1005b503461000e57602036600319011261000e5760043533320361000e576112d960ff60045460081c161561383e565b6112e1614d98565b6040805163b66e6b0560e01b8152600481018490526001600160a01b03927f00000000000000000000000000000000000000000000000000000000000000008416926101c0929091908381602481885afa9384156114bb575b60009461149c575b50506113788351916113616020860151801515908161117957506143d1565b825190871696166001600160a01b0316861461440c565b61138660c082015115614449565b833b1561000e578151630195728b60e71b815260048101879052600060248201819052600080516020614dcf8339815191529661113496909291908290604490829084905af1801561148f575b61147c575b506020820160008085835195019461141761142587518951928391602083019563a2a3c0cb60e01b875260248401908152602081019190915260400190565b03601f198101835282611a0e565b5190305af46114326144ca565b5015611446575b505050519182918261448f565b51915183519081527f60e497734ddabcd7293fd91739aaf65cf525eb539c97be528125a235a89288d890602090a3388080611439565b806109f2611489926119d3565b386113d8565b6114976128fe565b6113d3565b6114b3929450803d106111b8576111a88183611a0e565b913880611342565b6114c36128fe565b61133a565b60005b8381106114db5750506000910152565b81810151838201526020016114cb565b6040916020825261150b81518092816020860152602086860191016114c8565b601f01601f1916010190565b503461000e57604036600319011261000e576004356115358161039d565b6024356001600160401b0380821161000e573660238301121561000e57816004013590811161000e57366024828401011161000e5761158792602461157b930190614c99565b604051918291826114eb565b0390f35b503461000e5760408060031936011261000e5760048035916024359133320361000e576115bf60ff825460081c161561383e565b6115c7614d98565b82516351d407ff60e11b81529093610120936001600160a01b039290917f00000000000000000000000000000000000000000000000000000000000000008416918790899088818061161d8786888e8501613eae565b0381885afa9889156119af575b600099611970575b50506116ea6116e6608061169e946116658b60a0896116ef988d519485928392638c8ff1d560e01b845288878501613eae565b03818d5afa918215611963575b600092611931575b506116df91928b519063f7b3c6fd60e01b8252818c818060209d8e9588830161026b565b03915afa908115611924575b600091611907575b508b51638049fde760e01b81529189908390818e5afa9182156118fa575b6000926118db575b50106139d6565b0151151590565b1590565b613f3a565b60c087016116ff81511515613f7d565b8451633078fff560e01b81529782898981885afa9889156118ce575b6000996118a4575b50829160606117369201519051906138da565b61173e614bbe565b988b6000898b6117798b519e8f9788968794636938c05d60e01b86528501606091949392608082019582526001602083015260408201520152565b0393165af1968715611897575b600097611875575b5060009061179a611a50565b926117a58a85613bed565b8a82850152858401528160608401528160808401528160a08401528160c08401528160e0840152816101008401526117db611a70565b9283528201526000838201526000606082015260006080820152600060a0820152813b1561000e57856118369260009283600080516020614def8339815191529887519687958694859363f3aa718160e01b85528401613c93565b03925af18015611868575b611855575b505160008152931692602090a4005b806109f2611862926119d3565b38611846565b6118706128fe565b611841565b819750611890906000923d8a11610b0757610af78183611a0e565b969061178e565b61189f6128fe565b611786565b6117369199509160606118c48594853d871161057f576105718183611a0e565b9a92505091611723565b6118d66128fe565b61171b565b6118f3919250893d8b11610b0757610af78183611a0e565b90386116d8565b6119026128fe565b6116d0565b61191e9150893d8b11610b0757610af78183611a0e565b386116b2565b61192c6128fe565b6116aa565b6116df92506119569060a03d811161195c575b61194e8183611a0e565b810190613ecc565b9161167a565b503d611944565b61196b6128fe565b611672565b6116ef929950608061169e946116658b60a0896119a06116ea98886116e699903d10610ea157610e918183611a0e565b9f985050505050945050611632565b6119b76128fe565b61162a565b50634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116119e657604052565b6119ee6119bc565b604052565b608081019081106001600160401b038211176119e657604052565b601f909101601f19168101906001600160401b038211908210176119e657604052565b6040519060e082016001600160401b038111838210176119e657604052565b6040519061012082016001600160401b038111838210176119e657604052565b6040519060c082016001600160401b038111838210176119e657604052565b604051906101a082016001600160401b038111838210176119e657604052565b604051906103bb826119f3565b6101243590600382101561000e57565b503461000e573660031901610180811261000e576101201361000e57611b60611af3611a50565b611afb6103ae565b81526024356020820152604435604082015260643560608201526084356080820152611b2561046a565b60a082015260c43560c082015260e43560e082015261010435610100820152611b4c611abc565b90611b556103bd565b916101443591612978565b005b503461000e5760008060031936011261043e576040516312d43a5160e01b8152611bd0906001600160a01b03906020816004817f000000000000000000000000000000000000000000000000000000000000000086165afa908115610fb3578491610558575016331461290b565b7fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888602060045461ff0060ff8260081c161560081b169061ff001916178060045560ff6040519160081c1615158152a180f35b503461000e57600036600319011261000e57602060ff600454166040519015158152f35b503461000e57602036600319011261000e57600080516020614daf8339815191526080600435611cc66040516312d43a5160e01b815260018060a01b0390602081600481857f0000000000000000000000000000000000000000000000000000000000000000165afa90811561058657600091610558575016331461290b565b611cd1811515612942565b80600355604051906040825260136040830152721b585c9ad95d13dc99195c9cd51a5b595bdd5d606a1b60608301526020820152a1005b503461000e5760408060031936011261000e5760048035916024359133320361000e57611d3c60ff825460081c161561383e565b611d44614d98565b8251636e6f99cd60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811694909391611daf9060208180611d958b8d8a8a8501613eae565b03818a5afa908115611f24575b600091611f0c5750613fc9565b8051632e21e28b60e21b81526101a090818180611dd08b8d8a8a8501613eae565b03818a5afa918215611eff575b600092611ee2575b5050611df287898661455d565b50853b1561000e57815163b4b0f56760e01b81526060919060008180611e1c8c8e8b8b8501613eae565b0381838c5af18015611ed5575b611ec2575b500151853b1561000e57600084877ff1b38881d7f4b2b12141c5f39c5124545d6112532eb6afbe9630cdbde3ee53e998836109e097611e8088519788968795869463373873db60e11b86528501613b98565b03925af18015611eb5575b611ea2575b50519283921694829190602083019252565b806109f2611eaf926119d3565b38611e90565b611ebd6128fe565b611e8b565b806109f2611ecf926119d3565b38611e2e565b611edd6128fe565b611e29565b611ef89250803d10610b8857610b778183611a0e565b3880611de5565b611f076128fe565b611ddd565b610bed915060203d8111610bf357610be58183611a0e565b611f2c6128fe565b611da2565b606090600319011261000e57600435906024359060443590565b503461000e57611f5a36611f31565b33320361000e57611f7360ff60045460081c161561383e565b611f7b614d98565b611f8683858361469e565b506040516351d407ff60e11b81526001600160a01b0391907f00000000000000000000000000000000000000000000000000000000000000008316906120399061012090818180611fdc8b8d8a60048501613eae565b0381875afa9182156121f7575b6000926121da575b505060c0810161200381511515613f7d565b612027608083019161201f61201884516138bc565b6064900490565b9051906140cb565b87159283156121a5575b5050506140f8565b803b1561000e5760405163a354418160e01b8152600491602091600081806120668a8c8e8b858c016140a7565b038183865af18015612198575b612185575b5060405162b1278360e01b815292839182905afa908115612178575b60009161215a575b5073d6ab9cE492f1985CAF1B9d9A6693eD3677F1a78e936120bb614bbe565b94803b1561000e576000888892866109e09661210f7f1fc4a6c7ffe506697979b8ed54dc4135cd1ecd26a2745f70b760a2492222b3169b6040519788968795869563a6b8633d60e01b875260048701613da1565b03915af4801561214d575b61213a575b50604051938493169583908152602081019190915260400190565b806109f2612147926119d3565b3861211f565b6121556128fe565b61211a565b612172915060203d811161057f576105718183611a0e565b3861209c565b6121806128fe565b612094565b806109f2612192926119d3565b38612078565b6121a06128fe565b612073565b60a0015191925090156121c8576121bc91516140eb565b8510155b388080612031565b6121d29151613987565b8511156121c0565b6121f09250803d10610ea157610e918183611a0e565b3880611ff1565b6121ff6128fe565b611fe9565b503461000e57602036600319011261000e5760206004356122248161039d565b60018060a01b038091166000526000825260406000205416604051908152f35b503461000e5760c036600319011261000e576004803590602435906044356064356084359260a43533320361000e578594825460081c60ff16156122879061383e565b612292851515613924565b61229a614d98565b93600160a01b6001900395867f0000000000000000000000000000000000000000000000000000000000000000166040908151636e6f99cd60e11b81528c81808b60209e8f948d8401926122ed93613eae565b0381855afa61230a918115612603575b6000916125ec5750613fc9565b8b888c8451632e21e28b60e21b81528a818061232e85886101a09889968501613eae565b0381885afa9283156125df575b6000936125bc575b505061238a919287158015612598575b61235c90613ad0565b88158015612574575b61236e90613b07565b61238460001961237e8c8a6138da565b106138ed565b8b61455d565b5083610120820152836101408201528460e082015285610100820152813b1561000e5787916123ce60008d93865180938192635bb3b04560e11b8352888301613ccd565b038183865af18015612567575b612554575b50835162b1278360e01b815292839182905afa998a15612547575b60009a612528575b505073d6ab9cE492f1985CAF1B9d9A6693eD3677F1a78e612422614bbe565b813b1561000e5760008b898f8f948d9561244e9289519788968796634af65df560e11b88528701613dda565b0381855af4801561251b575b612508575b50803b1561000e576000888d927f710a8db87f04e82a9de40076812593a965f4aa48693196d2144c07ff9710e8909c6109e09a8f8b6124b2918951988997889687966325f40ef960e01b88528701613dda565b03915af480156124fb575b6124e8575b5051988952602089015260408801526060870152608086015291169290819060a0820190565b806109f26124f5926119d3565b386124c2565b6125036128fe565b6124bd565b806109f2612515926119d3565b3861245f565b6125236128fe565b61245a565b61253f929a50803d1061057f576105718183611a0e565b973880612403565b61254f6128fe565b6123fb565b806109f2612561926119d3565b386123e0565b61256f6128fe565b6123db565b5060a08401511561258d5761236e878a105b9050612365565b61236e878a11612586565b5060a0840151156125b15761235c8789115b9050612353565b61235c8789106125aa565b61238a935090816125d892903d10610b8857610b778183611a0e565b9138612343565b6125e76128fe565b61233b565b610bed91508c8d3d10610bf357610be58183611a0e565b61260b6128fe565b6122fd565b503461000e57602036600319011261000e5760043561262e8161039d565b3332036126635733600090815260208190526040902080546001600160a01b0319166001600160a01b03909216919091179055005b60405162461bcd60e51b815260206004820152600b60248201526a1393d7d0d3d395149050d560aa1b6044820152606490fd5b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e576126eb36611f31565b33320361000e5761270460ff60045460081c161561383e565b61270c614d98565b6127178385836146d2565b506040516351d407ff60e11b81526001600160a01b0391907f00000000000000000000000000000000000000000000000000000000000000008316906127909060c090610120908181806127708c8e8b60048501613eae565b0381885afa9182156128ce575b6000926128b1575b505001511515613f7d565b803b1561000e57604051637fdb96f360e01b8152600491602091600081806127bd8a8c8e8b858c016140a7565b038183865af180156128a4575b612891575b5060405162b1278360e01b815292839182905afa908115612884575b600091612866575b5073d6ab9cE492f1985CAF1B9d9A6693eD3677F1a78e93612812614bbe565b94803b1561000e576000888892866109e09661210f7f7e06a81c7a47891ccc7455b5ccb2ed850e32bb655ccda67eb3ebaaeed83242a49b60405197889687958695630e79d97960e21b875260048701613da1565b61287e915060203d811161057f576105718183611a0e565b386127f3565b61288c6128fe565b6127eb565b806109f261289e926119d3565b386127cf565b6128ac6128fe565b6127ca565b6128c79250803d10610ea157610e918183611a0e565b3880612785565b6128d66128fe565b61277d565b51906103bb8261039d565b9081602091031261000e57516128fb8161039d565b90565b506040513d6000823e3d90fd5b1561291257565b60405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606490fd5b1561294957565b60405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606490fd5b909133320361000e5761299f60ff600454612998828260081c161561383e565b1615613870565b6129b360001961237e8360808601516138da565b6129c260808301511515613924565b604051633078fff560e01b8152916020836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315613831575b600093613810575b506040516335b03c1760e01b8152936020856004816001600160a01b0388165afa948515613803575b6000956137e2575b50612ce8612a4f614d98565b95612ba5612b4e612ae7612b2b612ae7612a8560208d818c01519060405193849283926307218dad60e21b84526004840161396c565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156137d5575b6000916137b6575b5060208d818c0151906040519485928392639c8912f160e01b84526004840161396c565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156137a9575b600092613788575b50613987565b602088810151604051634bf3ccad60e11b81529384918291908f6004840161396c565b604051637b2ecedf60e11b8152906020826004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa91821561377b575b60009261375a575b5010613994565b60405163f7b3c6fd60e01b8152612c5c9060208180612bc78c6004830161026b565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561374d575b60009161372e575b50604051638049fde760e01b8152906020826004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215613721575b6000926137075750106139d6565b612c6e60608501516002541015613a17565b612c81606085015160c0860151906138da565b60208581015160405163066c581160e11b815260048101919091526001600160a01b0384169392612ccb9282602481885afa9182156136fa575b6000926136d9575b501015613a53565b60c08501518015159283613668575b50508161364a575b50613a8f565b612d0060e0830151801590811561361e575b50613ad0565b612d1961010083015180159081156135f2575b50613b07565b612df0600460018060a01b037f0000000000000000000000000000000000000000000000000000000000000000166020612dc4818701516040612d5f60a08a0151151590565b612d7260608b015160c08c0151906138da565b8251633f54af9960e11b8152600089820190815260208101959095529115156040850152606084015291829081906080010381875afa9081156135e5575b6000916135c5575b5060c0880151906138da565b916040519384809263407b67e160e11b82525afa9182156135b8575b600092613597575b501115613b54565b60608201517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b1561000e5760405163373873db60e11b81529060009082908190612e72907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168b60048501613b98565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561358a575b613577575b50612eb781613bd1565b801561334c5760208281015160405163226a27ad60e11b8152955085908190612ee490896004840161396c565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa93841561333f575b60009461331e575b508460208301516060840151612f3b60a0860151151590565b60c0860151612f8960e0880151926101008901519460808a015196612f68612f61611a8f565b998a613bed565b6020890152604088018c9052606088015260006080880152151560a0870152565b60c085015260e084015261010083015261012082018190526101408201524361016082015260006101808201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b1561000e5760006130069160405180938192630d3b5fe760e41b835260048301613ccd565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af18015613311575b6132fe575b5060208201517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b1561000e57600091869183896130a060405197889687958694630ec5706160e41b865260048601613d68565b03925af180156132f1575b6132de575b5060405162b1278360e01b8152916020836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156132d1575b6000936132b0575b5073d6ab9cE492f1985CAF1B9d9A6693eD3677F1a78e926020830151613124614bbe565b90853b1561000e57866000916131506040519485938493634af65df560e11b85528d8960048701613dda565b0381885af480156132a3575b613290575b506020830151843b1561000e57602094876000936131978996604051978896879586956325f40ef960e01b875260048701613dda565b03915af48015613283575b613270575b500151604051918252906001600160a01b038316907fdfabd6f206f17b7f2e1f9e0d33c40d30d1e8d7b6a4f520a03fdc1c181105934390602090a35b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691823b1561000e576040516326e2ada160e21b81526001600160a01b03928316600482015291166024820152906000908290604490829084905af18015613263575b6132565750565b806109f26103bb926119d3565b61326b6128fe565b61324f565b806109f261327d926119d3565b386131a7565b61328b6128fe565b6131a2565b806109f261329d926119d3565b38613161565b6132ab6128fe565b61315c565b6132ca91935060203d60201161057f576105718183611a0e565b9138613100565b6132d96128fe565b6130f8565b806109f26132eb926119d3565b386130b0565b6132f96128fe565b6130ab565b806109f261330b926119d3565b38613041565b6133196128fe565b61303c565b61333891945060203d602011610b0757610af78183611a0e565b9238612f22565b6133476128fe565b612f1a565b5060206133ab93818301519061336b606085015160c0860151906138da565b6000613375614bbe565b9360405198899586948593636938c05d60e01b855260048501606091949392608082019582526000602083015260408201520152565b03926001600160a01b03165af192831561356a575b600093613549575b5060208101519160608201516133e160a0840151151590565b60c084015161342c60e086015192610100870151946133fe611a50565b986134098c8b613bed565b60208a0152600060408a015260608901526000608089015260a088019015159052565b60c086015260e08501526101008401526080820151613449611a70565b938452600060208501526040840152606083015260006080830152600060a083015260018060a01b037f0000000000000000000000000000000000000000000000000000000000000000163b1561000e576134be600084602094604051938492839263f3aa718160e01b845260048401613cb5565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561353c575b613529575b5001516040516001815290916001600160a01b03841691600080516020614def83398151915290602090a46131e3565b806109f2613536926119d3565b386134f9565b6135446128fe565b6134f4565b61356391935060203d602011610b0757610af78183611a0e565b91386133c8565b6135726128fe565b6133c0565b806109f2613584926119d3565b38612ead565b6135926128fe565b612ea8565b6135b191925060203d602011610b0757610af78183611a0e565b9038612de8565b6135c06128fe565b612de0565b6135de915060403d604011610b4457610b338183611a0e565b5038612db8565b6135ed6128fe565b612db0565b905061360160a0850151151590565b15613613576080840151115b38612d13565b60808401511061360d565b905061362d60a0850151151590565b1561363f576080840151105b38612cfa565b608084015111613639565b905061366060c085015191602086015190614782565b101538612ce2565b60208781015160405163059a992d60e41b8152600481019190915293945090839060249082905afa9182156136cc575b6000926136ab575b501015903880612cda565b6136c591925060203d602011610b0757610af78183611a0e565b90386136a0565b6136d46128fe565b613698565b6136f391925060203d602011610b0757610af78183611a0e565b9038612cc3565b6137026128fe565b612cbb565b6118f391925060203d602011610b0757610af78183611a0e565b6137296128fe565b612c4e565b613747915060203d602011610b0757610af78183611a0e565b38612c05565b6137556128fe565b612bfd565b61377491925060203d602011610b0757610af78183611a0e565b9038612b9e565b6137836128fe565b612b96565b6137a291925060203d602011610b0757610af78183611a0e565b9038612b25565b6137b16128fe565b612b1d565b6137cf915060203d602011610b0757610af78183611a0e565b38612ac3565b6137dd6128fe565b612abb565b6137fc91955060203d60201161057f576105718183611a0e565b9338612a43565b61380b6128fe565b612a3b565b61382a91935060203d60201161057f576105718183611a0e565b9138612a12565b6138396128fe565b612a0a565b1561384557565b606460405162461bcd60e51b8152602060048201526004602482015263444f4e4560e01b6044820152fd5b1561387757565b60405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b6044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b90604b820291808304604b14901517156138d257565b6103bb6138a5565b818102929181159184041417156138d257565b156138f457565b60405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b6044820152606490fd5b1561392b57565b60405162461bcd60e51b815260206004820152600a60248201526950524943455f5a45524f60b01b6044820152606490fd5b9081602091031261000e575190565b6001600160a01b039091168152602081019190915260400190565b919082018092116138d257565b1561399b57565b60405162461bcd60e51b815260206004820152601360248201527226a0ac2faa2920a222a9afa822a92fa820a4a960691b6044820152606490fd5b156139dd57565b60405162461bcd60e51b81526020600482015260126024820152714d41585f50454e44494e475f4f524445525360701b6044820152606490fd5b15613a1e57565b60405162461bcd60e51b815260206004820152600d60248201526c41424f56455f4d41585f504f5360981b6044820152606490fd5b15613a5a57565b60405162461bcd60e51b815260206004820152600d60248201526c42454c4f575f4d494e5f504f5360981b6044820152606490fd5b15613a9657565b60405162461bcd60e51b815260206004820152601260248201527113115591549051d157d25390d3d4949150d560721b6044820152606490fd5b15613ad757565b60405162461bcd60e51b8152602060048201526008602482015267057524f4e475f54560c41b6044820152606490fd5b15613b0e57565b60405162461bcd60e51b815260206004820152600860248201526715d493d391d7d4d360c21b6044820152606490fd5b919082604091031261000e576020825192015190565b15613b5b57565b60405162461bcd60e51b81526020600482015260156024820152740a0a492868abe929aa08286a8bea89e9ebe90928e9605b1b6044820152606490fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b50634e487b7160e01b600052602160045260246000fd5b60031115613bdb57565b6103bb613bba565b60041115613bdb57565b6001600160a01b039091169052565b60a06101a0918051600180841b038151168552602081015160208601526040810151604086015260608101516060860152608081015160808601528281015115158386015260c081015160c086015260e081015160e0860152610100809101519085015260208101516101208501526040810151610140850152606081015161016085015260808101516101808501520151910152565b6101e0906000929493613cab82610200810197613bfc565b6101c08201520152565b6101e0906001929493613cab82610200810197613bfc565b81516001600160a01b031681526101a08101929160208101516020830152604081015160408301526060810151606083015260808101516080830152613d1c60a082015160a084019015159052565b60c081015160c083015260e081015160e0830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080910151910152565b90949392606092608083019660018060a01b03168352602083015260408201526003831015613d95570152565b613d9d613bba565b0152565b6001600160a01b03918216815291166020820152604081019190915260608101919091526000608082015260a081019190915260c00190565b6001600160a01b03918216815291166020820152604081019190915260608101919091526001608082015260a081019190915260c00190565b51906103bb82610460565b91908261012091031261000e57613e33611a50565b91613e3d816128db565b835260208101516020840152604081015160408401526060810151606084015260808101516080840152613e7360a08201613e13565b60a084015260c081015160c084015260e081015160e08401526101008091015190830152565b906101208282031261000e576128fb91613e1e565b604091949392606082019560018060a01b0316825260208201520152565b908160a091031261000e576040519060809060a083016001600160401b03811184821017613f2d575b604052805183526020810151602084015260408101516040840152606081015160608401520151613f2581610460565b608082015290565b613f356119bc565b613ef5565b15613f4157565b60405162461bcd60e51b81526020600482015260146024820152731053149150511657d091525391d7d0d313d4d15160621b6044820152606490fd5b15613f8457565b60405162461bcd60e51b81526020600482015260086024820152674e4f5f545241444560c01b6044820152606490fd5b9081602091031261000e57516128fb81610460565b15613fd057565b60405162461bcd60e51b81526020600482015260086024820152671393d7d31253525560c21b6044820152606490fd5b90816101a091031261000e57614014611a8f565b9061401e816128db565b82526020810151602083015260408101516040830152606081015160608301526080810151608083015261405460a08201613e13565b60a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080820151908301526101608082015190830152610180809101519082015290565b90949392606092608083019660018060a01b03168352602083015260408201520152565b81156140d5570490565b634e487b7160e01b600052601260045260246000fd5b919082039182116138d257565b156140ff57565b60405162461bcd60e51b815260206004820152600a602482015269534c5f544f4f5f42494760b01b6044820152606490fd5b91908260c091031261000e57815191602081015161414e8161039d565b9160408201519160608101519160a0608083015192015190565b6040519061012082016001600160401b038111838210176141bf575b604052816101006000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b6141c76119bc565b614184565b156141d357565b60405162461bcd60e51b81526020600482015260056024820152641393d7d4d360da1b6044820152606490fd5b1561420757565b60405162461bcd60e51b815260206004820152600560248201526404e4f5f54560dc1b6044820152606490fd5b1561423b57565b60405162461bcd60e51b8152602060048201526006602482015265121054d7d4d360d21b6044820152606490fd5b6040519060c082016001600160401b038111838210176142ac575b6040528160a06000918281528260208201528260408201528260608201528260808201520152565b6142b46119bc565b614284565b6142c282613be3565b52565b60c0909392919360a060e0820195600180831b038082511684526020820151602085015260408201511660408401526060810151606084015260808101516080840152015161431381613be3565b60a08201520152565b81516001600160a01b0316815260208083015190820152604080830151908201526060918201516080820193929091613d9d83613be3565b6101c08183031261000e57604051916101a0919061438c9060c085016001600160401b038111868210176143c4575b60405282613e1e565b83526101208101516020840152610140810151604084015261016081015160608401526101808101516080840152015160a082015290565b6143cc6119bc565b614383565b156143d857565b60405162461bcd60e51b815260206004820152600c60248201526b15d0525517d512535153d55560a21b6044820152606490fd5b1561441357565b60405162461bcd60e51b815260206004820152600e60248201526d2727aa2faca7aaa92fa7a92222a960911b6044820152606490fd5b1561445057565b60405162461bcd60e51b815260206004820152601760248201527657524f4e475f4d41524b45545f4f524445525f5459504560481b6044820152606490fd5b6101c0810192916103bb9190613bfc565b6020906001600160401b0381116144bd575b601f01601f19160190565b6144c56119bc565b6144b2565b3d156144f5573d906144db826144a0565b916144e96040519384611a0e565b82523d6000602084013e565b606090565b60405190614507826119f3565b60006060838281528260208201528260408201520152565b1561452657565b60405162461bcd60e51b815260206004820152600f60248201526e2822a72224a723afaa2924a3a3a2a960891b6044820152606490fd5b9291906103bb9161456c6144fa565b5061457f614578611aaf565b9586613bed565b6020918286015260408501526145986060850160039052565b60405163108c3d4960e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169185918181806145e2866004830161431c565b0381875afa908115614691575b600091614674575b501591821561460a575b5050905061451f565b61462c925081936040518080958194633f1b72bf60e21b83526004830161431c565b03915afa918215614667575b60009261464a575b5050803880614601565b6146609250803d10610bf357610be58183611a0e565b3880614640565b61466f6128fe565b614638565b61468b9150823d8411610bf357610be58183611a0e565b386145f7565b6146996128fe565b6145ef565b9291906103bb916146ad6144fa565b506146b9614578611aaf565b6020918286015260408501526145986060850160019052565b9291906103bb916146e16144fa565b506146ed614578611aaf565b602091828601526040850152600060608501528360018060a01b037f0000000000000000000000000000000000000000000000000000000000000000169160405163108c3d4960e11b81528181806145e2866004830161431c565b9392614598906103bb9361475a6144fa565b5061476d614766611aaf565b9788613bed565b602093848801526040870152606086016142b9565b60405162b1278360e01b81526001600160a01b039260209081836004817f000000000000000000000000000000000000000000000000000000000000000089165afa9283156148cb575b6000936148ac575b50604051938285630a06da4f60e21b958682528189816147fc88600483019190602083019252565b0392165afa94851561489f575b600095614880575b506000938515614825575050505050905090565b61484695508394966040518097819582948352600483019190602083019252565b0392165afa928315614873575b9261485d57505090565b6128fb9250803d10610b0757610af78183611a0e565b61487b6128fe565b614853565b614898919550833d8511610b0757610af78183611a0e565b9338614811565b6148a76128fe565b614809565b6148c4919350823d841161057f576105718183611a0e565b91386147d4565b6148d36128fe565b6147cc565b519063ffffffff8216820361000e57565b9081608091031261000e57614939606060405192614906846119f3565b61490f816148d8565b845261491d602082016148d8565b602085015261492e604082016148d8565b6040850152016148d8565b606082015290565b90949392606092608083019660018060a01b03168352602083015260408201526002831015613d95570152565b929363ffffffff9195946060936080860197865261498b81613be3565b6020860152604085015216910152565b8296936004929596939660018060a01b039687926080847f0000000000000000000000000000000000000000000000000000000000000000169160405162b1278360e01b815260209d8e9c8d9687848d818a5afa938415614bb1575b600094614b92575b50614a20604051998a9687958694639bd24d8360e01b865260048601614941565b0392165afa928315614b85575b600093614b53575b50819060405196878092633078fff560e01b82525afa948515614b46575b600095614b24575b506000939495858514614b1c576002955b85908614614ac9575050506040015163ffffffff16965b614aa360405198899788968794636938c05d60e01b86526004860161496e565b0393165af1918215614abc575b60009261485d57505090565b614ac46128fe565b614ab0565b614ad282613be3565b600182148614614aed575050015163ffffffff165b96614a83565b909150614af982613be3565b50158314614b0d575163ffffffff16614ae7565b6060015163ffffffff16614ae7565b600395614a6c565b6000949550614b3f90823d841161057f576105718183611a0e565b9493614a5b565b614b4e6128fe565b614a53565b82919350614b779060803d8111614b7e575b614b6f8183611a0e565b8101906148e9565b9290614a35565b503d614b65565b614b8d6128fe565b614a2d565b614baa919450883d8a1161057f576105718183611a0e565b92386149ff565b614bb96128fe565b6149f7565b61a4b146148015614c21575b614bd2574390565b60405163a3b1b31d60e01b815260208160048160645afa908115614c14575b600091614bfc575090565b6128fb915060203d8111610b0757610af78183611a0e565b614c1c6128fe565b614bf1565b5062066eed4614614bca565b908092918237016000815290565b60208183031261000e578051906001600160401b03821161000e570181601f8201121561000e578051614c6d816144a0565b92614c7b6040519485611a0e565b8184526020828401011161000e576128fb91602080850191016114c8565b6001600160a01b03818116600090815260208190526040812054909491163303614d5b57600180546001600160a01b0319166001600160a01b03909316929092179091558291829190614cf160405180938193614c2d565b0390305af4614cfe6144ca565b91829115614d1b575050600180546001600160a01b031916905590565b6044839293511061043e57614d57614d3f8460248060048701518301019101614c3b565b60405162461bcd60e51b8152918291600483016114eb565b0390fd5b60405162461bcd60e51b81526020600482015260156024820152741111531151d0551157d393d517d054141493d59151605a1b6044820152606490fd5b6001546001600160a01b0316806128fb5750339056fe8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab70f3c378d4b7a9489814034b5c8cf677550a8dae9288aa7c0b7bcdfbf7f9a11c3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a86a164736f6c6343000811000a",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063119df25f146102575780631346b0ff1461024e57806316fff07414610245578063272300c91461023c578063279a165c146102335780632c7c8f4e1461022a57806336fb8b1514610221578063410c0b7c146102185780634278bafe1461020f578063531cc965146102065780636c53cc1c146101fd5780638456cb59146101f4578063876d3abd146101eb5780638f062227146101e2578063934d1cf4146101d9578063990382cf146101d05780639a10cc32146101c7578063a2a3c0cb146101be578063a9135374146101b5578063ae8421e1146101ac578063b187bd26146101a3578063b81bfa051461019a578063b9b6573a14610191578063be73fb9914610188578063bffe34861461017f578063c641558e14610176578063ca5eb5e11461016d578063d3dc7539146101645763d8defd151461015c57600080fd5b61000e6126dc565b5061000e612696565b5061000e612610565b5061000e612244565b5061000e612204565b5061000e611f4b565b5061000e611d08565b5061000e611c46565b5061000e611c22565b5061000e611b62565b5061000e611acc565b5061000e61158b565b5061000e611517565b5061000e6112ab565b5061000e6111f3565b5061000e6111cc565b5061000e610fc0565b5061000e610f01565b5061000e6105d9565b5061000e610593565b5061000e610477565b5061000e610441565b5061000e61040e565b5061000e6103cb565b5061000e61037e565b5061000e610338565b5061000e6102f2565b5061000e6102ac565b5061000e61027e565b600091031261000e57565b6001600160a01b03909116815260200190565b503461000e57600036600319011261000e57602061029a614d98565b6040516001600160a01b039091168152f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576020600254604051908152f35b6001600160a01b0381160361000e57565b600435906103bb8261039d565b565b61016435906103bb8261039d565b503461000e57602036600319011261000e576004356103e98161039d565b60018060a01b03166000526005602052602060ff604060002054166040519015158152f35b503461000e5760008060031936011261043e5733815260208190526040812080546001600160a01b031916905580f35b80fd5b503461000e57600036600319011261000e576020600354604051908152f35b8015150361000e57565b60a435906103bb82610460565b503461000e57604036600319011261000e577f3c0f648064e21cceb91d918a80bed80a58c69474a28d50fe3d9975b72be97c4460406004356104b88161039d565b602435906104c582610460565b82516312d43a5160e01b81526001600160a01b0391906105259083906020816004817f000000000000000000000000000000000000000000000000000000000000000086165afa908115610586575b600091610558575b5016331461290b565b169081600052600560205261054981846000209060ff801983541691151516179055565b825191825215156020820152a1005b610579915060203d811161057f575b6105718183611a0e565b8101906128e6565b3861051c565b503d610567565b61058e6128fe565b610514565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e5760208060031936011261000e5733320361000e5760049061060760ff835460081c161561383e565b60409182519263cefbb3bd60e01b845260c0848061062d85358683019190602083019252565b038173__$0a787ca790b72760fa5f2fae68e461a66f$__5af4908115610ef4575b600090819282968391610eb5575b508291879161066e61072b9695613be3565b61067a84828588614748565b93610683614168565b9161068d82613be3565b60038214898115610c0757868c8a6106ff936106bb878b519586948594636e6f99cd60e11b86528501613eae565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610bfa575b600091610bcd575b50613fc9565b81858c8a8d61073261070f614d98565b6001600160a01b0381166000908152600560205260409020909f565b5460ff1690565b9a6000998715610b9c5750848096859261076361087a9851928392632e21e28b60e21b84526101a098888501613eae565b6001600160a01b039291879183919003817f000000000000000000000000000000000000000000000000000000000000000086165afa958615610b8f575b600096610b58575b50509061084e916060860151906107c660c08801928351906138da565b998a917f000000000000000000000000000000000000000000000000000000000000000016976107fd60a088830151920151151590565b8251633f54af9960e11b815260008a82019081526020810193909352901515604083015260608201939093528290819060800103818a5afa928315610b4b575b600093610b1b575b505051906138da565b928b519283809263407b67e160e11b82525afa928315610b0e575b600093610adf575b50501115613b54565b8615610ad7575b505b8b84610a31575b6108df9484600093856108a9948d87848914610a2b575060019361499b565b9a6108bc6108b5614269565b9a8b613bed565b8901526108cb87858a01613bed565b8a6060890152608088015260a087016142b9565b6001600160a01b03947f00000000000000000000000000000000000000000000000000000000000000008616803b1561000e578860009161093693838b87519687958694859363205fe86960e21b855284016142c5565b03925af18015610a1e575b610a0b575b50847f000000000000000000000000000000000000000000000000000000000000000016803b1561000e5760006109e0946109b7927f50a583b02839381dff332433f1a37825291992d796b87483d7c51649ef504d439983865180968195829463e72353d560e01b8452830161431c565b03925af180156109fe575b6109e5575b5051958652151560208601529116929081906040820190565b0390a3005b806109f26109f8926119d3565b80610260565b386109c7565b610a066128fe565b6109c2565b806109f2610a18926119d3565b38610946565b610a266128fe565b610941565b9361499b565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b1561000e5784846108a9928f808f998f89936000998a928f6108df9f610a9986925197889687958694633348540360e11b86528501613eae565b03925af18015610aca575b610ab7575b50945050935050945061088a565b806109f2610ac4926119d3565b38610aa9565b610ad26128fe565b610aa4565b935038610881565b610aff929350803d10610b07575b610af78183611a0e565b81019061395d565b90388f610871565b503d610aed565b610b166128fe565b610869565b610b3b929350803d10610b44575b610b338183611a0e565b810190613b3e565b5090388e610845565b503d610b29565b610b536128fe565b61083d565b61084e939296509081610b7f92903d10610b88575b610b778183611a0e565b810190614000565b949091386107a9565b503d610b6d565b610b976128fe565b6107a1565b955050505050508615610bb0575b50610883565b610bc691945060c06060820151910151906138da565b9238610baa565b610bed91508d803d10610bf3575b610be58183611a0e565b810190613fb4565b386106f9565b503d610bdb565b610c026128fe565b6106f1565b935084516351d407ff60e11b815280610c2784898c610120998501613eae565b6001600160a01b039291879183919003817f000000000000000000000000000000000000000000000000000000000000000086165afa958615610ea8575b600096610e79575b50508b858c8860c08301610c8381511515613f7d565b610c8c89613be3565b60028903610e16576101008401938451610cad575b505050505050506106ff565b610dd196610cec94610d89948894610d19610cce865160018060a01b031690565b95878101519380820151608083015191606060a085019d8e51151590565b940151955196610d04610cfd611a31565b9b8c613bed565b8a8c0152890152606088015215156080870152565b60a085015260c08401528d51809581948293633837d79d60e11b8452830191909160c08060e083019460018060a01b03815116845260208101516020850152604081015160408501526060810151606085015260808101511515608085015260a081015160a08501520151910152565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa938415610e09575b600094610de4575b50505115155b15610ddd575110614234565b388b818c888280610ca1565b5111614234565b610dc59294509081610e0192903d10610b0757610af78183611a0e565b92908f610dbf565b610e116128fe565b610db7565b5050509050610e589150610e2985613be3565b60018514801590610e6b575b610e3e906141cc565b610e4785613be3565b841590811591610e5d575b50614200565b6106ff565b60e091500151151538610e52565b506101008101511515610e35565b610e99929650803d10610ea1575b610e918183611a0e565b810190613e99565b933880610c6d565b503d610e87565b610eb06128fe565b610c65565b9196505061072b9250610ee0915060c03d60c011610eed575b610ed88183611a0e565b810190614131565b509197929490915061065c565b503d610ece565b610efc6128fe565b61064e565b503461000e5760008060031936011261043e576040516312d43a5160e01b8152610f70906001600160a01b03906020816004817f000000000000000000000000000000000000000000000000000000000000000086165afa908115610fb3575b8491610558575016331461290b565b7f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2602060045460ff8082161516809160ff1916176004556040519015158152a180f35b610fbb6128fe565b610f61565b503461000e57602036600319011261000e5760043533320361000e57610fee60ff60045460081c161561383e565b610ff6614d98565b60405163b66e6b0560e01b8152600481018390526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916101c091908281602481875afa9283156111bf575b600093611190575b505061108982519161107360208501518015159081611179575b506143d1565b82516001600160a01b031681169086161461440c565b61109860c08201511515614449565b823b1561000e57604051630195728b60e71b815260048101869052600160248201526060919060008160448183895af1801561116c575b611159575b50015191803b1561000e5760006111349361111792600080516020614dcf833981519152968360405180968195829463373873db60e11b84528660048501613b98565b03925af1801561114c575b611139575b506040519182918261448f565b0390a2005b806109f2611146926119d3565b38611127565b6111546128fe565b611122565b806109f2611166926119d3565b386110d4565b6111746128fe565b6110cf565b611187915060035490613987565b4310153861106d565b6111b0929350803d106111b8575b6111a88183611a0e565b810190614354565b903880611053565b503d61119e565b6111c76128fe565b61104b565b503461000e57600036600319011261000e57602060ff60045460081c166040519015158152f35b503461000e57602036600319011261000e57600080516020614daf83398151915260806004356112736040516312d43a5160e01b815260018060a01b0390602081600481857f0000000000000000000000000000000000000000000000000000000000000000165afa90811561058657600091610558575016331461290b565b61127e811515612942565b80600255604051906040825260096040830152686d6178506f7344616960b81b60608301526020820152a1005b503461000e57602036600319011261000e5760043533320361000e576112d960ff60045460081c161561383e565b6112e1614d98565b6040805163b66e6b0560e01b8152600481018490526001600160a01b03927f00000000000000000000000000000000000000000000000000000000000000008416926101c0929091908381602481885afa9384156114bb575b60009461149c575b50506113788351916113616020860151801515908161117957506143d1565b825190871696166001600160a01b0316861461440c565b61138660c082015115614449565b833b1561000e578151630195728b60e71b815260048101879052600060248201819052600080516020614dcf8339815191529661113496909291908290604490829084905af1801561148f575b61147c575b506020820160008085835195019461141761142587518951928391602083019563a2a3c0cb60e01b875260248401908152602081019190915260400190565b03601f198101835282611a0e565b5190305af46114326144ca565b5015611446575b505050519182918261448f565b51915183519081527f60e497734ddabcd7293fd91739aaf65cf525eb539c97be528125a235a89288d890602090a3388080611439565b806109f2611489926119d3565b386113d8565b6114976128fe565b6113d3565b6114b3929450803d106111b8576111a88183611a0e565b913880611342565b6114c36128fe565b61133a565b60005b8381106114db5750506000910152565b81810151838201526020016114cb565b6040916020825261150b81518092816020860152602086860191016114c8565b601f01601f1916010190565b503461000e57604036600319011261000e576004356115358161039d565b6024356001600160401b0380821161000e573660238301121561000e57816004013590811161000e57366024828401011161000e5761158792602461157b930190614c99565b604051918291826114eb565b0390f35b503461000e5760408060031936011261000e5760048035916024359133320361000e576115bf60ff825460081c161561383e565b6115c7614d98565b82516351d407ff60e11b81529093610120936001600160a01b039290917f00000000000000000000000000000000000000000000000000000000000000008416918790899088818061161d8786888e8501613eae565b0381885afa9889156119af575b600099611970575b50506116ea6116e6608061169e946116658b60a0896116ef988d519485928392638c8ff1d560e01b845288878501613eae565b03818d5afa918215611963575b600092611931575b506116df91928b519063f7b3c6fd60e01b8252818c818060209d8e9588830161026b565b03915afa908115611924575b600091611907575b508b51638049fde760e01b81529189908390818e5afa9182156118fa575b6000926118db575b50106139d6565b0151151590565b1590565b613f3a565b60c087016116ff81511515613f7d565b8451633078fff560e01b81529782898981885afa9889156118ce575b6000996118a4575b50829160606117369201519051906138da565b61173e614bbe565b988b6000898b6117798b519e8f9788968794636938c05d60e01b86528501606091949392608082019582526001602083015260408201520152565b0393165af1968715611897575b600097611875575b5060009061179a611a50565b926117a58a85613bed565b8a82850152858401528160608401528160808401528160a08401528160c08401528160e0840152816101008401526117db611a70565b9283528201526000838201526000606082015260006080820152600060a0820152813b1561000e57856118369260009283600080516020614def8339815191529887519687958694859363f3aa718160e01b85528401613c93565b03925af18015611868575b611855575b505160008152931692602090a4005b806109f2611862926119d3565b38611846565b6118706128fe565b611841565b819750611890906000923d8a11610b0757610af78183611a0e565b969061178e565b61189f6128fe565b611786565b6117369199509160606118c48594853d871161057f576105718183611a0e565b9a92505091611723565b6118d66128fe565b61171b565b6118f3919250893d8b11610b0757610af78183611a0e565b90386116d8565b6119026128fe565b6116d0565b61191e9150893d8b11610b0757610af78183611a0e565b386116b2565b61192c6128fe565b6116aa565b6116df92506119569060a03d811161195c575b61194e8183611a0e565b810190613ecc565b9161167a565b503d611944565b61196b6128fe565b611672565b6116ef929950608061169e946116658b60a0896119a06116ea98886116e699903d10610ea157610e918183611a0e565b9f985050505050945050611632565b6119b76128fe565b61162a565b50634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116119e657604052565b6119ee6119bc565b604052565b608081019081106001600160401b038211176119e657604052565b601f909101601f19168101906001600160401b038211908210176119e657604052565b6040519060e082016001600160401b038111838210176119e657604052565b6040519061012082016001600160401b038111838210176119e657604052565b6040519060c082016001600160401b038111838210176119e657604052565b604051906101a082016001600160401b038111838210176119e657604052565b604051906103bb826119f3565b6101243590600382101561000e57565b503461000e573660031901610180811261000e576101201361000e57611b60611af3611a50565b611afb6103ae565b81526024356020820152604435604082015260643560608201526084356080820152611b2561046a565b60a082015260c43560c082015260e43560e082015261010435610100820152611b4c611abc565b90611b556103bd565b916101443591612978565b005b503461000e5760008060031936011261043e576040516312d43a5160e01b8152611bd0906001600160a01b03906020816004817f000000000000000000000000000000000000000000000000000000000000000086165afa908115610fb3578491610558575016331461290b565b7fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888602060045461ff0060ff8260081c161560081b169061ff001916178060045560ff6040519160081c1615158152a180f35b503461000e57600036600319011261000e57602060ff600454166040519015158152f35b503461000e57602036600319011261000e57600080516020614daf8339815191526080600435611cc66040516312d43a5160e01b815260018060a01b0390602081600481857f0000000000000000000000000000000000000000000000000000000000000000165afa90811561058657600091610558575016331461290b565b611cd1811515612942565b80600355604051906040825260136040830152721b585c9ad95d13dc99195c9cd51a5b595bdd5d606a1b60608301526020820152a1005b503461000e5760408060031936011261000e5760048035916024359133320361000e57611d3c60ff825460081c161561383e565b611d44614d98565b8251636e6f99cd60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811694909391611daf9060208180611d958b8d8a8a8501613eae565b03818a5afa908115611f24575b600091611f0c5750613fc9565b8051632e21e28b60e21b81526101a090818180611dd08b8d8a8a8501613eae565b03818a5afa918215611eff575b600092611ee2575b5050611df287898661455d565b50853b1561000e57815163b4b0f56760e01b81526060919060008180611e1c8c8e8b8b8501613eae565b0381838c5af18015611ed5575b611ec2575b500151853b1561000e57600084877ff1b38881d7f4b2b12141c5f39c5124545d6112532eb6afbe9630cdbde3ee53e998836109e097611e8088519788968795869463373873db60e11b86528501613b98565b03925af18015611eb5575b611ea2575b50519283921694829190602083019252565b806109f2611eaf926119d3565b38611e90565b611ebd6128fe565b611e8b565b806109f2611ecf926119d3565b38611e2e565b611edd6128fe565b611e29565b611ef89250803d10610b8857610b778183611a0e565b3880611de5565b611f076128fe565b611ddd565b610bed915060203d8111610bf357610be58183611a0e565b611f2c6128fe565b611da2565b606090600319011261000e57600435906024359060443590565b503461000e57611f5a36611f31565b33320361000e57611f7360ff60045460081c161561383e565b611f7b614d98565b611f8683858361469e565b506040516351d407ff60e11b81526001600160a01b0391907f00000000000000000000000000000000000000000000000000000000000000008316906120399061012090818180611fdc8b8d8a60048501613eae565b0381875afa9182156121f7575b6000926121da575b505060c0810161200381511515613f7d565b612027608083019161201f61201884516138bc565b6064900490565b9051906140cb565b87159283156121a5575b5050506140f8565b803b1561000e5760405163a354418160e01b8152600491602091600081806120668a8c8e8b858c016140a7565b038183865af18015612198575b612185575b5060405162b1278360e01b815292839182905afa908115612178575b60009161215a575b5073__$f600c6c046224cd62da9c8e7a0d00fc8b2$__936120bb614bbe565b94803b1561000e576000888892866109e09661210f7f1fc4a6c7ffe506697979b8ed54dc4135cd1ecd26a2745f70b760a2492222b3169b6040519788968795869563a6b8633d60e01b875260048701613da1565b03915af4801561214d575b61213a575b50604051938493169583908152602081019190915260400190565b806109f2612147926119d3565b3861211f565b6121556128fe565b61211a565b612172915060203d811161057f576105718183611a0e565b3861209c565b6121806128fe565b612094565b806109f2612192926119d3565b38612078565b6121a06128fe565b612073565b60a0015191925090156121c8576121bc91516140eb565b8510155b388080612031565b6121d29151613987565b8511156121c0565b6121f09250803d10610ea157610e918183611a0e565b3880611ff1565b6121ff6128fe565b611fe9565b503461000e57602036600319011261000e5760206004356122248161039d565b60018060a01b038091166000526000825260406000205416604051908152f35b503461000e5760c036600319011261000e576004803590602435906044356064356084359260a43533320361000e578594825460081c60ff16156122879061383e565b612292851515613924565b61229a614d98565b93600160a01b6001900395867f0000000000000000000000000000000000000000000000000000000000000000166040908151636e6f99cd60e11b81528c81808b60209e8f948d8401926122ed93613eae565b0381855afa61230a918115612603575b6000916125ec5750613fc9565b8b888c8451632e21e28b60e21b81528a818061232e85886101a09889968501613eae565b0381885afa9283156125df575b6000936125bc575b505061238a919287158015612598575b61235c90613ad0565b88158015612574575b61236e90613b07565b61238460001961237e8c8a6138da565b106138ed565b8b61455d565b5083610120820152836101408201528460e082015285610100820152813b1561000e5787916123ce60008d93865180938192635bb3b04560e11b8352888301613ccd565b038183865af18015612567575b612554575b50835162b1278360e01b815292839182905afa998a15612547575b60009a612528575b505073__$f600c6c046224cd62da9c8e7a0d00fc8b2$__612422614bbe565b813b1561000e5760008b898f8f948d9561244e9289519788968796634af65df560e11b88528701613dda565b0381855af4801561251b575b612508575b50803b1561000e576000888d927f710a8db87f04e82a9de40076812593a965f4aa48693196d2144c07ff9710e8909c6109e09a8f8b6124b2918951988997889687966325f40ef960e01b88528701613dda565b03915af480156124fb575b6124e8575b5051988952602089015260408801526060870152608086015291169290819060a0820190565b806109f26124f5926119d3565b386124c2565b6125036128fe565b6124bd565b806109f2612515926119d3565b3861245f565b6125236128fe565b61245a565b61253f929a50803d1061057f576105718183611a0e565b973880612403565b61254f6128fe565b6123fb565b806109f2612561926119d3565b386123e0565b61256f6128fe565b6123db565b5060a08401511561258d5761236e878a105b9050612365565b61236e878a11612586565b5060a0840151156125b15761235c8789115b9050612353565b61235c8789106125aa565b61238a935090816125d892903d10610b8857610b778183611a0e565b9138612343565b6125e76128fe565b61233b565b610bed91508c8d3d10610bf357610be58183611a0e565b61260b6128fe565b6122fd565b503461000e57602036600319011261000e5760043561262e8161039d565b3332036126635733600090815260208190526040902080546001600160a01b0319166001600160a01b03909216919091179055005b60405162461bcd60e51b815260206004820152600b60248201526a1393d7d0d3d395149050d560aa1b6044820152606490fd5b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e576126eb36611f31565b33320361000e5761270460ff60045460081c161561383e565b61270c614d98565b6127178385836146d2565b506040516351d407ff60e11b81526001600160a01b0391907f00000000000000000000000000000000000000000000000000000000000000008316906127909060c090610120908181806127708c8e8b60048501613eae565b0381885afa9182156128ce575b6000926128b1575b505001511515613f7d565b803b1561000e57604051637fdb96f360e01b8152600491602091600081806127bd8a8c8e8b858c016140a7565b038183865af180156128a4575b612891575b5060405162b1278360e01b815292839182905afa908115612884575b600091612866575b5073__$f600c6c046224cd62da9c8e7a0d00fc8b2$__93612812614bbe565b94803b1561000e576000888892866109e09661210f7f7e06a81c7a47891ccc7455b5ccb2ed850e32bb655ccda67eb3ebaaeed83242a49b60405197889687958695630e79d97960e21b875260048701613da1565b61287e915060203d811161057f576105718183611a0e565b386127f3565b61288c6128fe565b6127eb565b806109f261289e926119d3565b386127cf565b6128ac6128fe565b6127ca565b6128c79250803d10610ea157610e918183611a0e565b3880612785565b6128d66128fe565b61277d565b51906103bb8261039d565b9081602091031261000e57516128fb8161039d565b90565b506040513d6000823e3d90fd5b1561291257565b60405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606490fd5b1561294957565b60405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606490fd5b909133320361000e5761299f60ff600454612998828260081c161561383e565b1615613870565b6129b360001961237e8360808601516138da565b6129c260808301511515613924565b604051633078fff560e01b8152916020836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315613831575b600093613810575b506040516335b03c1760e01b8152936020856004816001600160a01b0388165afa948515613803575b6000956137e2575b50612ce8612a4f614d98565b95612ba5612b4e612ae7612b2b612ae7612a8560208d818c01519060405193849283926307218dad60e21b84526004840161396c565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156137d5575b6000916137b6575b5060208d818c0151906040519485928392639c8912f160e01b84526004840161396c565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156137a9575b600092613788575b50613987565b602088810151604051634bf3ccad60e11b81529384918291908f6004840161396c565b604051637b2ecedf60e11b8152906020826004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa91821561377b575b60009261375a575b5010613994565b60405163f7b3c6fd60e01b8152612c5c9060208180612bc78c6004830161026b565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561374d575b60009161372e575b50604051638049fde760e01b8152906020826004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215613721575b6000926137075750106139d6565b612c6e60608501516002541015613a17565b612c81606085015160c0860151906138da565b60208581015160405163066c581160e11b815260048101919091526001600160a01b0384169392612ccb9282602481885afa9182156136fa575b6000926136d9575b501015613a53565b60c08501518015159283613668575b50508161364a575b50613a8f565b612d0060e0830151801590811561361e575b50613ad0565b612d1961010083015180159081156135f2575b50613b07565b612df0600460018060a01b037f0000000000000000000000000000000000000000000000000000000000000000166020612dc4818701516040612d5f60a08a0151151590565b612d7260608b015160c08c0151906138da565b8251633f54af9960e11b8152600089820190815260208101959095529115156040850152606084015291829081906080010381875afa9081156135e5575b6000916135c5575b5060c0880151906138da565b916040519384809263407b67e160e11b82525afa9182156135b8575b600092613597575b501115613b54565b60608201517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b1561000e5760405163373873db60e11b81529060009082908190612e72907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168b60048501613b98565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561358a575b613577575b50612eb781613bd1565b801561334c5760208281015160405163226a27ad60e11b8152955085908190612ee490896004840161396c565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa93841561333f575b60009461331e575b508460208301516060840151612f3b60a0860151151590565b60c0860151612f8960e0880151926101008901519460808a015196612f68612f61611a8f565b998a613bed565b6020890152604088018c9052606088015260006080880152151560a0870152565b60c085015260e084015261010083015261012082018190526101408201524361016082015260006101808201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b1561000e5760006130069160405180938192630d3b5fe760e41b835260048301613ccd565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af18015613311575b6132fe575b5060208201517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b1561000e57600091869183896130a060405197889687958694630ec5706160e41b865260048601613d68565b03925af180156132f1575b6132de575b5060405162b1278360e01b8152916020836004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156132d1575b6000936132b0575b5073__$f600c6c046224cd62da9c8e7a0d00fc8b2$__926020830151613124614bbe565b90853b1561000e57866000916131506040519485938493634af65df560e11b85528d8960048701613dda565b0381885af480156132a3575b613290575b506020830151843b1561000e57602094876000936131978996604051978896879586956325f40ef960e01b875260048701613dda565b03915af48015613283575b613270575b500151604051918252906001600160a01b038316907fdfabd6f206f17b7f2e1f9e0d33c40d30d1e8d7b6a4f520a03fdc1c181105934390602090a35b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691823b1561000e576040516326e2ada160e21b81526001600160a01b03928316600482015291166024820152906000908290604490829084905af18015613263575b6132565750565b806109f26103bb926119d3565b61326b6128fe565b61324f565b806109f261327d926119d3565b386131a7565b61328b6128fe565b6131a2565b806109f261329d926119d3565b38613161565b6132ab6128fe565b61315c565b6132ca91935060203d60201161057f576105718183611a0e565b9138613100565b6132d96128fe565b6130f8565b806109f26132eb926119d3565b386130b0565b6132f96128fe565b6130ab565b806109f261330b926119d3565b38613041565b6133196128fe565b61303c565b61333891945060203d602011610b0757610af78183611a0e565b9238612f22565b6133476128fe565b612f1a565b5060206133ab93818301519061336b606085015160c0860151906138da565b6000613375614bbe565b9360405198899586948593636938c05d60e01b855260048501606091949392608082019582526000602083015260408201520152565b03926001600160a01b03165af192831561356a575b600093613549575b5060208101519160608201516133e160a0840151151590565b60c084015161342c60e086015192610100870151946133fe611a50565b986134098c8b613bed565b60208a0152600060408a015260608901526000608089015260a088019015159052565b60c086015260e08501526101008401526080820151613449611a70565b938452600060208501526040840152606083015260006080830152600060a083015260018060a01b037f0000000000000000000000000000000000000000000000000000000000000000163b1561000e576134be600084602094604051938492839263f3aa718160e01b845260048401613cb5565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561353c575b613529575b5001516040516001815290916001600160a01b03841691600080516020614def83398151915290602090a46131e3565b806109f2613536926119d3565b386134f9565b6135446128fe565b6134f4565b61356391935060203d602011610b0757610af78183611a0e565b91386133c8565b6135726128fe565b6133c0565b806109f2613584926119d3565b38612ead565b6135926128fe565b612ea8565b6135b191925060203d602011610b0757610af78183611a0e565b9038612de8565b6135c06128fe565b612de0565b6135de915060403d604011610b4457610b338183611a0e565b5038612db8565b6135ed6128fe565b612db0565b905061360160a0850151151590565b15613613576080840151115b38612d13565b60808401511061360d565b905061362d60a0850151151590565b1561363f576080840151105b38612cfa565b608084015111613639565b905061366060c085015191602086015190614782565b101538612ce2565b60208781015160405163059a992d60e41b8152600481019190915293945090839060249082905afa9182156136cc575b6000926136ab575b501015903880612cda565b6136c591925060203d602011610b0757610af78183611a0e565b90386136a0565b6136d46128fe565b613698565b6136f391925060203d602011610b0757610af78183611a0e565b9038612cc3565b6137026128fe565b612cbb565b6118f391925060203d602011610b0757610af78183611a0e565b6137296128fe565b612c4e565b613747915060203d602011610b0757610af78183611a0e565b38612c05565b6137556128fe565b612bfd565b61377491925060203d602011610b0757610af78183611a0e565b9038612b9e565b6137836128fe565b612b96565b6137a291925060203d602011610b0757610af78183611a0e565b9038612b25565b6137b16128fe565b612b1d565b6137cf915060203d602011610b0757610af78183611a0e565b38612ac3565b6137dd6128fe565b612abb565b6137fc91955060203d60201161057f576105718183611a0e565b9338612a43565b61380b6128fe565b612a3b565b61382a91935060203d60201161057f576105718183611a0e565b9138612a12565b6138396128fe565b612a0a565b1561384557565b606460405162461bcd60e51b8152602060048201526004602482015263444f4e4560e01b6044820152fd5b1561387757565b60405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b6044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b90604b820291808304604b14901517156138d257565b6103bb6138a5565b818102929181159184041417156138d257565b156138f457565b60405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b6044820152606490fd5b1561392b57565b60405162461bcd60e51b815260206004820152600a60248201526950524943455f5a45524f60b01b6044820152606490fd5b9081602091031261000e575190565b6001600160a01b039091168152602081019190915260400190565b919082018092116138d257565b1561399b57565b60405162461bcd60e51b815260206004820152601360248201527226a0ac2faa2920a222a9afa822a92fa820a4a960691b6044820152606490fd5b156139dd57565b60405162461bcd60e51b81526020600482015260126024820152714d41585f50454e44494e475f4f524445525360701b6044820152606490fd5b15613a1e57565b60405162461bcd60e51b815260206004820152600d60248201526c41424f56455f4d41585f504f5360981b6044820152606490fd5b15613a5a57565b60405162461bcd60e51b815260206004820152600d60248201526c42454c4f575f4d494e5f504f5360981b6044820152606490fd5b15613a9657565b60405162461bcd60e51b815260206004820152601260248201527113115591549051d157d25390d3d4949150d560721b6044820152606490fd5b15613ad757565b60405162461bcd60e51b8152602060048201526008602482015267057524f4e475f54560c41b6044820152606490fd5b15613b0e57565b60405162461bcd60e51b815260206004820152600860248201526715d493d391d7d4d360c21b6044820152606490fd5b919082604091031261000e576020825192015190565b15613b5b57565b60405162461bcd60e51b81526020600482015260156024820152740a0a492868abe929aa08286a8bea89e9ebe90928e9605b1b6044820152606490fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b50634e487b7160e01b600052602160045260246000fd5b60031115613bdb57565b6103bb613bba565b60041115613bdb57565b6001600160a01b039091169052565b60a06101a0918051600180841b038151168552602081015160208601526040810151604086015260608101516060860152608081015160808601528281015115158386015260c081015160c086015260e081015160e0860152610100809101519085015260208101516101208501526040810151610140850152606081015161016085015260808101516101808501520151910152565b6101e0906000929493613cab82610200810197613bfc565b6101c08201520152565b6101e0906001929493613cab82610200810197613bfc565b81516001600160a01b031681526101a08101929160208101516020830152604081015160408301526060810151606083015260808101516080830152613d1c60a082015160a084019015159052565b60c081015160c083015260e081015160e0830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080910151910152565b90949392606092608083019660018060a01b03168352602083015260408201526003831015613d95570152565b613d9d613bba565b0152565b6001600160a01b03918216815291166020820152604081019190915260608101919091526000608082015260a081019190915260c00190565b6001600160a01b03918216815291166020820152604081019190915260608101919091526001608082015260a081019190915260c00190565b51906103bb82610460565b91908261012091031261000e57613e33611a50565b91613e3d816128db565b835260208101516020840152604081015160408401526060810151606084015260808101516080840152613e7360a08201613e13565b60a084015260c081015160c084015260e081015160e08401526101008091015190830152565b906101208282031261000e576128fb91613e1e565b604091949392606082019560018060a01b0316825260208201520152565b908160a091031261000e576040519060809060a083016001600160401b03811184821017613f2d575b604052805183526020810151602084015260408101516040840152606081015160608401520151613f2581610460565b608082015290565b613f356119bc565b613ef5565b15613f4157565b60405162461bcd60e51b81526020600482015260146024820152731053149150511657d091525391d7d0d313d4d15160621b6044820152606490fd5b15613f8457565b60405162461bcd60e51b81526020600482015260086024820152674e4f5f545241444560c01b6044820152606490fd5b9081602091031261000e57516128fb81610460565b15613fd057565b60405162461bcd60e51b81526020600482015260086024820152671393d7d31253525560c21b6044820152606490fd5b90816101a091031261000e57614014611a8f565b9061401e816128db565b82526020810151602083015260408101516040830152606081015160608301526080810151608083015261405460a08201613e13565b60a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080820151908301526101608082015190830152610180809101519082015290565b90949392606092608083019660018060a01b03168352602083015260408201520152565b81156140d5570490565b634e487b7160e01b600052601260045260246000fd5b919082039182116138d257565b156140ff57565b60405162461bcd60e51b815260206004820152600a602482015269534c5f544f4f5f42494760b01b6044820152606490fd5b91908260c091031261000e57815191602081015161414e8161039d565b9160408201519160608101519160a0608083015192015190565b6040519061012082016001600160401b038111838210176141bf575b604052816101006000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b6141c76119bc565b614184565b156141d357565b60405162461bcd60e51b81526020600482015260056024820152641393d7d4d360da1b6044820152606490fd5b1561420757565b60405162461bcd60e51b815260206004820152600560248201526404e4f5f54560dc1b6044820152606490fd5b1561423b57565b60405162461bcd60e51b8152602060048201526006602482015265121054d7d4d360d21b6044820152606490fd5b6040519060c082016001600160401b038111838210176142ac575b6040528160a06000918281528260208201528260408201528260608201528260808201520152565b6142b46119bc565b614284565b6142c282613be3565b52565b60c0909392919360a060e0820195600180831b038082511684526020820151602085015260408201511660408401526060810151606084015260808101516080840152015161431381613be3565b60a08201520152565b81516001600160a01b0316815260208083015190820152604080830151908201526060918201516080820193929091613d9d83613be3565b6101c08183031261000e57604051916101a0919061438c9060c085016001600160401b038111868210176143c4575b60405282613e1e565b83526101208101516020840152610140810151604084015261016081015160608401526101808101516080840152015160a082015290565b6143cc6119bc565b614383565b156143d857565b60405162461bcd60e51b815260206004820152600c60248201526b15d0525517d512535153d55560a21b6044820152606490fd5b1561441357565b60405162461bcd60e51b815260206004820152600e60248201526d2727aa2faca7aaa92fa7a92222a960911b6044820152606490fd5b1561445057565b60405162461bcd60e51b815260206004820152601760248201527657524f4e475f4d41524b45545f4f524445525f5459504560481b6044820152606490fd5b6101c0810192916103bb9190613bfc565b6020906001600160401b0381116144bd575b601f01601f19160190565b6144c56119bc565b6144b2565b3d156144f5573d906144db826144a0565b916144e96040519384611a0e565b82523d6000602084013e565b606090565b60405190614507826119f3565b60006060838281528260208201528260408201520152565b1561452657565b60405162461bcd60e51b815260206004820152600f60248201526e2822a72224a723afaa2924a3a3a2a960891b6044820152606490fd5b9291906103bb9161456c6144fa565b5061457f614578611aaf565b9586613bed565b6020918286015260408501526145986060850160039052565b60405163108c3d4960e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169185918181806145e2866004830161431c565b0381875afa908115614691575b600091614674575b501591821561460a575b5050905061451f565b61462c925081936040518080958194633f1b72bf60e21b83526004830161431c565b03915afa918215614667575b60009261464a575b5050803880614601565b6146609250803d10610bf357610be58183611a0e565b3880614640565b61466f6128fe565b614638565b61468b9150823d8411610bf357610be58183611a0e565b386145f7565b6146996128fe565b6145ef565b9291906103bb916146ad6144fa565b506146b9614578611aaf565b6020918286015260408501526145986060850160019052565b9291906103bb916146e16144fa565b506146ed614578611aaf565b602091828601526040850152600060608501528360018060a01b037f0000000000000000000000000000000000000000000000000000000000000000169160405163108c3d4960e11b81528181806145e2866004830161431c565b9392614598906103bb9361475a6144fa565b5061476d614766611aaf565b9788613bed565b602093848801526040870152606086016142b9565b60405162b1278360e01b81526001600160a01b039260209081836004817f000000000000000000000000000000000000000000000000000000000000000089165afa9283156148cb575b6000936148ac575b50604051938285630a06da4f60e21b958682528189816147fc88600483019190602083019252565b0392165afa94851561489f575b600095614880575b506000938515614825575050505050905090565b61484695508394966040518097819582948352600483019190602083019252565b0392165afa928315614873575b9261485d57505090565b6128fb9250803d10610b0757610af78183611a0e565b61487b6128fe565b614853565b614898919550833d8511610b0757610af78183611a0e565b9338614811565b6148a76128fe565b614809565b6148c4919350823d841161057f576105718183611a0e565b91386147d4565b6148d36128fe565b6147cc565b519063ffffffff8216820361000e57565b9081608091031261000e57614939606060405192614906846119f3565b61490f816148d8565b845261491d602082016148d8565b602085015261492e604082016148d8565b6040850152016148d8565b606082015290565b90949392606092608083019660018060a01b03168352602083015260408201526002831015613d95570152565b929363ffffffff9195946060936080860197865261498b81613be3565b6020860152604085015216910152565b8296936004929596939660018060a01b039687926080847f0000000000000000000000000000000000000000000000000000000000000000169160405162b1278360e01b815260209d8e9c8d9687848d818a5afa938415614bb1575b600094614b92575b50614a20604051998a9687958694639bd24d8360e01b865260048601614941565b0392165afa928315614b85575b600093614b53575b50819060405196878092633078fff560e01b82525afa948515614b46575b600095614b24575b506000939495858514614b1c576002955b85908614614ac9575050506040015163ffffffff16965b614aa360405198899788968794636938c05d60e01b86526004860161496e565b0393165af1918215614abc575b60009261485d57505090565b614ac46128fe565b614ab0565b614ad282613be3565b600182148614614aed575050015163ffffffff165b96614a83565b909150614af982613be3565b50158314614b0d575163ffffffff16614ae7565b6060015163ffffffff16614ae7565b600395614a6c565b6000949550614b3f90823d841161057f576105718183611a0e565b9493614a5b565b614b4e6128fe565b614a53565b82919350614b779060803d8111614b7e575b614b6f8183611a0e565b8101906148e9565b9290614a35565b503d614b65565b614b8d6128fe565b614a2d565b614baa919450883d8a1161057f576105718183611a0e565b92386149ff565b614bb96128fe565b6149f7565b61a4b146148015614c21575b614bd2574390565b60405163a3b1b31d60e01b815260208160048160645afa908115614c14575b600091614bfc575090565b6128fb915060203d8111610b0757610af78183611a0e565b614c1c6128fe565b614bf1565b5062066eed4614614bca565b908092918237016000815290565b60208183031261000e578051906001600160401b03821161000e570181601f8201121561000e578051614c6d816144a0565b92614c7b6040519485611a0e565b8184526020828401011161000e576128fb91602080850191016114c8565b6001600160a01b03818116600090815260208190526040812054909491163303614d5b57600180546001600160a01b0319166001600160a01b03909316929092179091558291829190614cf160405180938193614c2d565b0390305af4614cfe6144ca565b91829115614d1b575050600180546001600160a01b031916905590565b6044839293511061043e57614d57614d3f8460248060048701518301019101614c3b565b60405162461bcd60e51b8152918291600483016114eb565b0390fd5b60405162461bcd60e51b81526020600482015260156024820152741111531151d0551157d393d517d054141493d59151605a1b6044820152606490fd5b6001546001600160a01b0316806128fb5750339056fe8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab70f3c378d4b7a9489814034b5c8cf677550a8dae9288aa7c0b7bcdfbf7f9a11c3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a86a164736f6c6343000811000a",
  "libraries": {
    "PackingUtils": "0x84028BeCFEE8D44c5A15b328688b4BeDCbA56Afc",
    "TradeUtils": "0xd6ab9cE492f1985CAF1B9d9A6693eD3677F1a78e"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22577,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "delegations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 22579,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "senderOverride",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 17409,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "maxPosDai",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 17411,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "marketOrdersTimeout",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 17413,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "isPaused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 17415,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "isDone",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 17419,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "bypassTriggerLink",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}