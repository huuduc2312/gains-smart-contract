{
  "address": "0x55259A79B8E5de4d526667ba3BBE08AF91eBd377",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAccValue",
          "type": "uint256"
        }
      ],
      "name": "AccBlockWeightedMarketCapStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevPositiveOpenPnl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPositiveOpenPnl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochPositiveOpenPnl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newAccPnlPerTokenUsed",
          "type": "int256"
        }
      ],
      "name": "AccPnlPerTokenUsedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "AddressParamUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetsLessDeplete",
          "type": "uint256"
        }
      ],
      "name": "AssetsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "AssetsSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CurrentMaxSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DailyAccPnlDeltaReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGns",
          "type": "uint256"
        }
      ],
      "name": "Depleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDiscount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "atTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDuration",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IGToken.LockedDeposit",
          "name": "d",
          "type": "tuple"
        }
      ],
      "name": "DepositLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDiscount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "atTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDuration",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IGToken.LockedDeposit",
          "name": "d",
          "type": "tuple"
        }
      ],
      "name": "DepositUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct GTokenV6_3_2.GnsPriceProvider",
          "name": "newValue",
          "type": "tuple"
        }
      ],
      "name": "GnsPriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "NumberParamUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "OpenTradesPnlFeedCallFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGns",
          "type": "uint256"
        }
      ],
      "name": "Refilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "RewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ShareToAssetsPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "unlockEpoch",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "newValue",
          "type": "uint256[2]"
        }
      ],
      "name": "WithdrawLockThresholdsPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "unlockEpoch",
          "type": "uint256"
        }
      ],
      "name": "WithdrawRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accBlockWeightedMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accBlockWeightedMarketCapLastStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accPnlPerToken",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accPnlPerTokenUsed",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accRewardsPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetsToDeplete",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "unlockEpoch",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralizationP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBalanceDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpochPositiveOpenPnl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpochStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dailyAccPnlDelta",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "deplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "depositWithDiscountAndLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "distributeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "getLockedDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDiscount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "atTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDuration",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGToken.LockedDeposit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getPendingAccBlockWeightedMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gnsPriceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gnsToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gnsTokenToAssetsPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "gnsToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lockedDepositNft",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pnlHandler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "openTradesPnlFeed",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                }
              ],
              "internalType": "struct GTokenV6_3_2.GnsPriceProvider",
              "name": "gnsPriceProvider",
              "type": "tuple"
            }
          ],
          "internalType": "struct GTokenV6_3_2.ContractAddresses",
          "name": "_contractAddresses",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_MIN_LOCK_DURATION",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAccOpenPnlDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDailyAccPnlDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "_withdrawLockThresholdsP",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupplyIncreaseDailyP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lossesBurnP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxGnsSupplyMintDailyP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDiscountP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDiscountThresholdP",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDailyAccPnlDeltaReset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastMaxSupplyUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collatP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        }
      ],
      "name": "lockDiscountP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedDepositNft",
      "outputs": [
        {
          "internalType": "contract INft",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedDeposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetsDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetsDiscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "atTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedDepositsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lossesBurnP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "makeWithdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAccOpenPnlDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAccPnlPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDailyAccPnlDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDiscountP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDiscountThresholdP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGnsSupplyMintDailyP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyIncreaseDailyP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mintWithDiscountAndLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openTradesPnlFeed",
      "outputs": [
        {
          "internalType": "contract IOpenTradesPnlFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pnlHandler",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "receiveAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "refill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "sendAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareToAssetsPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storeAccBlockWeightedMarketCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClosedPnl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDepleted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDiscounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiability",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedDiscounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRefilled",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "totalSharesBeingWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryNewOpenPnlRequestOrEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryResetDailyAccPnlDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryUpdateCurrentMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "unlockDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prevPositiveOpenPnl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPositiveOpenPnl",
          "type": "uint256"
        }
      ],
      "name": "updateAccPnlPerTokenUsed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct GTokenV6_3_2.GnsPriceProvider",
          "name": "newValue",
          "type": "tuple"
        }
      ],
      "name": "updateGnsPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateLossesBurnP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxAccOpenPnlDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDailyAccPnlDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDiscountP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDiscountThresholdP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxGnsSupplyMintDailyP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxSupplyIncreaseDailyP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateOpenTradesPnlFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updatePnlHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "newValue",
          "type": "uint256[2]"
        }
      ],
      "name": "updateWithdrawLockThresholdsP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEpochsTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawLockThresholdsP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x18237b202734916c13538df95c614109ff25672b9ad2bfec1b50cc5666f4464e",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0x55259A79B8E5de4d526667ba3BBE08AF91eBd377",
    "transactionIndex": 78,
    "gasUsed": "4927620",
    "logsBloom": "0x
    "blockHash": "0xbae9b1de8e3d6c9595242d51c198d2d659eb96f112adb35c9cbed984f75c0dc5",
    "transactionHash": "0x18237b202734916c13538df95c614109ff25672b9ad2bfec1b50cc5666f4464e",
    "logs": [],
    "blockNumber": 6071127,
    "cumulativeGasUsed": "13608091",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "edab1d0feb7ffa5be1c95101a46d74db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAccValue\",\"type\":\"uint256\"}],\"name\":\"AccBlockWeightedMarketCapStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevPositiveOpenPnl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPositiveOpenPnl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochPositiveOpenPnl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newAccPnlPerTokenUsed\",\"type\":\"int256\"}],\"name\":\"AccPnlPerTokenUsedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"AddressParamUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsLessDeplete\",\"type\":\"uint256\"}],\"name\":\"AssetsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"AssetsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CurrentMaxSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DailyAccPnlDeltaReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGns\",\"type\":\"uint256\"}],\"name\":\"Depleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IGToken.LockedDeposit\",\"name\":\"d\",\"type\":\"tuple\"}],\"name\":\"DepositLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IGToken.LockedDeposit\",\"name\":\"d\",\"type\":\"tuple\"}],\"name\":\"DepositUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct GTokenV6_3_2.GnsPriceProvider\",\"name\":\"newValue\",\"type\":\"tuple\"}],\"name\":\"GnsPriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"NumberParamUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OpenTradesPnlFeedCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGns\",\"type\":\"uint256\"}],\"name\":\"Refilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ShareToAssetsPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"WithdrawCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"newValue\",\"type\":\"uint256[2]\"}],\"name\":\"WithdrawLockThresholdsPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accBlockWeightedMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accBlockWeightedMarketCapLastStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accPnlPerToken\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accPnlPerTokenUsed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsToDeplete\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"cancelWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralizationP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBalanceDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochPositiveOpenPnl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyAccPnlDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"deplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositWithDiscountAndLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"getLockedDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct IGToken.LockedDeposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getPendingAccBlockWeightedMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnsPriceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnsTokenToAssetsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gnsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockedDepositNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pnlHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openTradesPnlFeed\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct GTokenV6_3_2.GnsPriceProvider\",\"name\":\"gnsPriceProvider\",\"type\":\"tuple\"}],\"internalType\":\"struct GTokenV6_3_2.ContractAddresses\",\"name\":\"_contractAddresses\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_MIN_LOCK_DURATION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAccOpenPnlDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDailyAccPnlDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_withdrawLockThresholdsP\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupplyIncreaseDailyP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lossesBurnP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGnsSupplyMintDailyP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDiscountP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDiscountThresholdP\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDailyAccPnlDeltaReset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMaxSupplyUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collatP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"lockDiscountP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedDepositNft\",\"outputs\":[{\"internalType\":\"contract INft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedDeposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedDepositsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossesBurnP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"makeWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAccOpenPnlDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAccPnlPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDailyAccPnlDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountThresholdP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGnsSupplyMintDailyP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyIncreaseDailyP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mintWithDiscountAndLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTradesPnlFeed\",\"outputs\":[{\"internalType\":\"contract IOpenTradesPnlFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pnlHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"receiveAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"refill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareToAssetsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeAccBlockWeightedMarketCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClosedPnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepleted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDiscounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiability\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedDiscounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"totalSharesBeingWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryNewOpenPnlRequestOrEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryResetDailyAccPnlDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryUpdateCurrentMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"unlockDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevPositiveOpenPnl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPositiveOpenPnl\",\"type\":\"uint256\"}],\"name\":\"updateAccPnlPerTokenUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct GTokenV6_3_2.GnsPriceProvider\",\"name\":\"newValue\",\"type\":\"tuple\"}],\"name\":\"updateGnsPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateLossesBurnP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxAccOpenPnlDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxDailyAccPnlDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxDiscountP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxDiscountThresholdP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxGnsSupplyMintDailyP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxSupplyIncreaseDailyP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateOpenTradesPnlFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updatePnlHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"newValue\",\"type\":\"uint256[2]\"}],\"name\":\"updateWithdrawLockThresholdsP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEpochsTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawLockThresholdsP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GTokenV6_3_2.sol\":\"GTokenV6_3_2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/contracts/GTokenV6_3_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"../utils/ERC20Upgradeable.sol\\\";\\nimport \\\"../utils/IERC20Upgradeable.sol\\\";\\nimport \\\"../utils/ERC4626Upgradeable.sol\\\";\\nimport \\\"../utils/MathUpgradeable.sol\\\";\\nimport \\\"../utils/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IGToken.sol\\\";\\nimport \\\"../interfaces/IGnsToken.sol\\\";\\nimport \\\"../interfaces/INft.sol\\\";\\nimport \\\"../interfaces/IOpenTradesPnlFeed.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\n\\npragma solidity ^0.8.7;\\n\\ncontract GTokenV6_3_2 is\\n    IERC20Upgradeable,\\n    ERC20Upgradeable,\\n    ERC4626Upgradeable,\\n    OwnableUpgradeable,\\n    IGToken\\n{\\n    using MathUpgradeable for uint;\\n\\n    // Contracts & Addresses (constant)\\n    address public gnsToken;\\n    INft public lockedDepositNft;\\n\\n    // Contracts & Addresses (adjustable)\\n    address public override manager; // 3-day timelock contract\\n    address public override admin; // bypasses timelock, access to emergency functions\\n\\n    address public pnlHandler;\\n    IOpenTradesPnlFeed public openTradesPnlFeed;\\n    GnsPriceProvider public gnsPriceProvider;\\n\\n    struct GnsPriceProvider {\\n        address addr;\\n        bytes signature;\\n    }\\n\\n    // Parameters (constant)\\n    uint constant PRECISION = 1e18; // 18 decimals (acc values & price)\\n    uint constant PRECISION_2 = 1e40; // 40 decimals (acc block weighted market cap)\\n    uint constant GNS_PRECISION = 1e10; // 10 decimals (gns/asset oracle)\\n    uint constant MIN_DAILY_ACC_PNL_DELTA = PRECISION / 10; // 0.1 (price delta)\\n    uint constant MAX_SUPPLY_INCREASE_DAILY_P = 50 * PRECISION; // 50% / day (when under collat)\\n    uint constant MAX_LOSSES_BURN_P = 25 * PRECISION; // 25% of all losses\\n    uint constant MAX_GNS_SUPPLY_MINT_DAILY_P = PRECISION / 20; // 0.05% / day (18.25% / yr max)\\n    uint constant MAX_DISCOUNT_P = 10 * PRECISION; // 10%\\n    uint public MIN_LOCK_DURATION; // min locked asset deposit duration\\n    uint constant MAX_LOCK_DURATION = 365 days; // max locked asset deposit duration\\n    uint[] WITHDRAW_EPOCHS_LOCKS; // epochs withdraw locks at over collat thresholds\\n\\n    // Parameters (adjustable)\\n    uint public maxAccOpenPnlDelta; // PRECISION (max price delta on new epochs from open pnl)\\n    uint public maxDailyAccPnlDelta; // PRECISION (max daily price delta from closed pnl)\\n    uint[2] public withdrawLockThresholdsP; // PRECISION (% of over collat, used with WITHDRAW_EPOCHS_LOCKS)\\n    uint public maxSupplyIncreaseDailyP; // PRECISION (% per day, when under collat)\\n    uint public lossesBurnP; // PRECISION (% of all losses)\\n    uint public maxGnsSupplyMintDailyP; // PRECISION (% of gns supply)\\n    uint public maxDiscountP; // PRECISION (%, maximum discount for locked deposits)\\n    uint public maxDiscountThresholdP; // PRECISION (maximum collat %, for locked deposits)\\n\\n    // Price state\\n    uint public shareToAssetsPrice; // PRECISION\\n    int public accPnlPerTokenUsed; // PRECISION (snapshot of accPnlPerToken)\\n    int public accPnlPerToken; // PRECISION (updated in real-time)\\n    uint public accRewardsPerToken; // PRECISION\\n\\n    // Closed Pnl state\\n    int public dailyAccPnlDelta; // PRECISION\\n    uint public lastDailyAccPnlDeltaReset; // timestamp\\n\\n    // Epochs state (withdrawals)\\n    uint public override currentEpoch; // global id\\n    uint public override currentEpochStart; // timestamp\\n    uint public override currentEpochPositiveOpenPnl; // 1e18\\n\\n    // Deposit / Withdraw state\\n    uint public currentMaxSupply; // 1e18\\n    uint public lastMaxSupplyUpdate; // timestamp\\n    mapping(address => mapping(uint => uint)) public withdrawRequests; // owner => unlock epoch => shares\\n\\n    // Locked deposits state\\n    uint public lockedDepositsCount; // global id\\n    mapping(uint => LockedDeposit) public lockedDeposits;\\n\\n    // Deplete / Refill state\\n    uint public assetsToDeplete; // 1e18\\n    // uint public dailyMintedGns; // 1e18\\n    // uint public lastDailyMintedGnsReset; // timestamp\\n\\n    // Statistics (not used for contract logic)\\n    uint public totalDeposited; // 1e18 (assets)\\n    int public totalClosedPnl; // 1e18 (assets)\\n    uint public totalRewards; // 1e18 (assets)\\n    int public totalLiability; // 1e18 (assets)\\n    uint public totalLockedDiscounts; // 1e18 (assets)\\n    uint public totalDiscounts; // 1e18 (assets)\\n    uint public totalDepleted; // 1e18 (assets)\\n    uint public totalRefilled; // 1e18 (assets)\\n\\n    // Useful acc values\\n    uint public accBlockWeightedMarketCap; // 1e40, acc sum of (blocks elapsed / market cap)\\n    uint public accBlockWeightedMarketCapLastStored; // block\\n\\n    // Events\\n    event AddressParamUpdated(string name, address newValue);\\n    event GnsPriceProviderUpdated(GnsPriceProvider newValue);\\n    event NumberParamUpdated(string name, uint newValue);\\n    event WithdrawLockThresholdsPUpdated(uint[2] newValue);\\n\\n    event CurrentMaxSupplyUpdated(uint newValue);\\n    event DailyAccPnlDeltaReset();\\n    event ShareToAssetsPriceUpdated(uint newValue);\\n    event OpenTradesPnlFeedCallFailed();\\n\\n    event WithdrawRequested(\\n        address indexed sender,\\n        address indexed owner,\\n        uint shares,\\n        uint currEpoch,\\n        uint indexed unlockEpoch\\n    );\\n    event WithdrawCanceled(\\n        address indexed sender,\\n        address indexed owner,\\n        uint shares,\\n        uint currEpoch,\\n        uint indexed unlockEpoch\\n    );\\n\\n    event DepositLocked(\\n        address indexed sender,\\n        address indexed owner,\\n        uint depositId,\\n        LockedDeposit d\\n    );\\n    event DepositUnlocked(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint depositId,\\n        LockedDeposit d\\n    );\\n\\n    event RewardDistributed(address indexed sender, uint assets);\\n\\n    event AssetsSent(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint assets\\n    );\\n    event AssetsReceived(\\n        address indexed sender,\\n        address indexed user,\\n        uint assets,\\n        uint assetsLessDeplete\\n    );\\n\\n    event Depleted(address indexed sender, uint assets, uint amountGns);\\n    event Refilled(address indexed sender, uint assets, uint amountGns);\\n\\n    event AccPnlPerTokenUsedUpdated(\\n        address indexed sender,\\n        uint indexed newEpoch,\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl,\\n        uint newEpochPositiveOpenPnl,\\n        int newAccPnlPerTokenUsed\\n    );\\n\\n    event AccBlockWeightedMarketCapStored(uint newAccValue);\\n\\n    // Prevent stack too deep error\\n    struct ContractAddresses {\\n        address asset;\\n        address owner; // 2-week timelock contract\\n        address manager; // 3-day timelock contract\\n        address admin; // bypasses timelock, access to emergency functions\\n        address gnsToken;\\n        address lockedDepositNft;\\n        address pnlHandler;\\n        address openTradesPnlFeed;\\n        GnsPriceProvider gnsPriceProvider;\\n    }\\n\\n    // Initializer function called when this contract is deployed\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        ContractAddresses memory _contractAddresses,\\n        uint _MIN_LOCK_DURATION,\\n        uint _maxAccOpenPnlDelta,\\n        uint _maxDailyAccPnlDelta,\\n        uint[2] memory _withdrawLockThresholdsP,\\n        uint _maxSupplyIncreaseDailyP,\\n        uint _lossesBurnP,\\n        uint _maxGnsSupplyMintDailyP,\\n        uint _maxDiscountP,\\n        uint _maxDiscountThresholdP\\n    ) external initializer {\\n        require(\\n            _contractAddresses.asset != address(0) &&\\n                _contractAddresses.owner != address(0) &&\\n                _contractAddresses.manager != address(0) &&\\n                _contractAddresses.admin != address(0) &&\\n                _contractAddresses.owner != _contractAddresses.manager &&\\n                _contractAddresses.manager != _contractAddresses.admin &&\\n                _contractAddresses.lockedDepositNft != address(0) &&\\n                _contractAddresses.pnlHandler != address(0) &&\\n                _contractAddresses.openTradesPnlFeed != address(0) &&\\n                _maxDailyAccPnlDelta >= MIN_DAILY_ACC_PNL_DELTA &&\\n                _withdrawLockThresholdsP[1] > _withdrawLockThresholdsP[0] &&\\n                _maxSupplyIncreaseDailyP <= MAX_SUPPLY_INCREASE_DAILY_P &&\\n                _lossesBurnP <= MAX_LOSSES_BURN_P &&\\n                _maxGnsSupplyMintDailyP <= MAX_GNS_SUPPLY_MINT_DAILY_P &&\\n                _maxDiscountP <= MAX_DISCOUNT_P &&\\n                _maxDiscountThresholdP >= 100 * PRECISION,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        __ERC20_init(_name, _symbol);\\n        __ERC4626_init(IERC20MetadataUpgradeable(_contractAddresses.asset));\\n        _transferOwnership(_contractAddresses.owner);\\n\\n        gnsToken = _contractAddresses.gnsToken;\\n        lockedDepositNft = INft(_contractAddresses.lockedDepositNft);\\n        manager = _contractAddresses.manager;\\n        admin = _contractAddresses.admin;\\n        pnlHandler = _contractAddresses.pnlHandler;\\n        openTradesPnlFeed = IOpenTradesPnlFeed(\\n            _contractAddresses.openTradesPnlFeed\\n        );\\n        gnsPriceProvider = _contractAddresses.gnsPriceProvider;\\n\\n        MIN_LOCK_DURATION = _MIN_LOCK_DURATION;\\n\\n        maxAccOpenPnlDelta = _maxAccOpenPnlDelta;\\n        maxDailyAccPnlDelta = _maxDailyAccPnlDelta;\\n        withdrawLockThresholdsP = _withdrawLockThresholdsP;\\n        maxSupplyIncreaseDailyP = _maxSupplyIncreaseDailyP;\\n        lossesBurnP = _lossesBurnP;\\n        maxDiscountP = _maxDiscountP;\\n        maxDiscountThresholdP = _maxDiscountThresholdP;\\n\\n        shareToAssetsPrice = PRECISION;\\n        currentEpoch = 1;\\n        currentEpochStart = block.timestamp;\\n        WITHDRAW_EPOCHS_LOCKS = [3, 2, 1];\\n    }\\n\\n    function initializeV2() external reinitializer(2) {\\n        storeAccBlockWeightedMarketCap();\\n        totalDeposited += totalRewards; // include all already distributed rewards in totalDeposited\\n    }\\n\\n    // Modifiers\\n    modifier onlyManager() {\\n        require(_msgSender() == manager, \\\"ONLY_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier checks(uint assetsOrShares) {\\n        require(shareToAssetsPrice > 0, \\\"PRICE_0\\\");\\n        require(assetsOrShares > 0, \\\"VALUE_0\\\");\\n        _;\\n    }\\n\\n    modifier validDiscount(uint lockDuration) {\\n        require(maxDiscountP > 0, \\\"NO_ACTIVE_DISCOUNT\\\");\\n        require(lockDuration >= MIN_LOCK_DURATION, \\\"BELOW_MIN_LOCK_DURATION\\\");\\n        require(lockDuration <= MAX_LOCK_DURATION, \\\"ABOVE_MAX_LOCK_DURATION\\\");\\n        _;\\n    }\\n\\n    // Manage addresses\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        require(newOwner != manager && newOwner != admin, \\\"WRONG_VALUE\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function updateManager(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"ADDRESS_0\\\");\\n        require(newValue != owner() && newValue != admin, \\\"WRONG_VALUE\\\");\\n        manager = newValue;\\n        emit AddressParamUpdated(\\\"manager\\\", newValue);\\n    }\\n\\n    function updateAdmin(address newValue) external onlyManager {\\n        require(newValue != address(0), \\\"ADDRESS_0\\\");\\n        require(newValue != owner() && newValue != manager, \\\"WRONG_VALUE\\\");\\n        admin = newValue;\\n        emit AddressParamUpdated(\\\"admin\\\", newValue);\\n    }\\n\\n    function updatePnlHandler(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"ADDRESS_0\\\");\\n        pnlHandler = newValue;\\n        emit AddressParamUpdated(\\\"pnlHandler\\\", newValue);\\n    }\\n\\n    function updateGnsPriceProvider(\\n        GnsPriceProvider memory newValue\\n    ) external onlyManager {\\n        require(newValue.addr != address(0), \\\"ADDRESS_0\\\");\\n        require(newValue.signature.length > 0, \\\"BYTES_0\\\");\\n        gnsPriceProvider = newValue;\\n        emit GnsPriceProviderUpdated(newValue);\\n    }\\n\\n    function updateOpenTradesPnlFeed(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"ADDRESS_0\\\");\\n        openTradesPnlFeed = IOpenTradesPnlFeed(newValue);\\n        emit AddressParamUpdated(\\\"openTradesPnlFeed\\\", newValue);\\n    }\\n\\n    // Manage parameters\\n    function updateMaxAccOpenPnlDelta(uint newValue) external onlyOwner {\\n        maxAccOpenPnlDelta = newValue;\\n        emit NumberParamUpdated(\\\"maxAccOpenPnlDelta\\\", newValue);\\n    }\\n\\n    function updateMaxDailyAccPnlDelta(uint newValue) external onlyManager {\\n        require(newValue >= MIN_DAILY_ACC_PNL_DELTA, \\\"BELOW_MIN\\\");\\n        maxDailyAccPnlDelta = newValue;\\n        emit NumberParamUpdated(\\\"maxDailyAccPnlDelta\\\", newValue);\\n    }\\n\\n    function updateWithdrawLockThresholdsP(\\n        uint[2] memory newValue\\n    ) external onlyOwner {\\n        require(newValue[1] > newValue[0], \\\"WRONG_VALUES\\\");\\n        withdrawLockThresholdsP = newValue;\\n        emit WithdrawLockThresholdsPUpdated(newValue);\\n    }\\n\\n    function updateMaxSupplyIncreaseDailyP(uint newValue) external onlyManager {\\n        require(newValue <= MAX_SUPPLY_INCREASE_DAILY_P, \\\"ABOVE_MAX\\\");\\n        maxSupplyIncreaseDailyP = newValue;\\n        emit NumberParamUpdated(\\\"maxSupplyIncreaseDailyP\\\", newValue);\\n    }\\n\\n    function updateLossesBurnP(uint newValue) external onlyManager {\\n        require(newValue <= MAX_LOSSES_BURN_P, \\\"ABOVE_MAX\\\");\\n        lossesBurnP = newValue;\\n        emit NumberParamUpdated(\\\"lossesBurnP\\\", newValue);\\n    }\\n\\n    function updateMaxGnsSupplyMintDailyP(uint newValue) external onlyManager {\\n        require(newValue <= MAX_GNS_SUPPLY_MINT_DAILY_P, \\\"ABOVE_MAX\\\");\\n        maxGnsSupplyMintDailyP = newValue;\\n        emit NumberParamUpdated(\\\"maxGnsSupplyMintDailyP\\\", newValue);\\n    }\\n\\n    function updateMaxDiscountP(uint newValue) external onlyManager {\\n        require(newValue <= MAX_DISCOUNT_P, \\\"ABOVE_MAX_DISCOUNT\\\");\\n        maxDiscountP = newValue;\\n        emit NumberParamUpdated(\\\"maxDiscountP\\\", newValue);\\n    }\\n\\n    function updateMaxDiscountThresholdP(uint newValue) external onlyManager {\\n        require(newValue >= 100 * PRECISION, \\\"BELOW_MIN\\\");\\n        maxDiscountThresholdP = newValue;\\n        emit NumberParamUpdated(\\\"maxDiscountThresholdP\\\", newValue);\\n    }\\n\\n    // View helper functions\\n    function maxAccPnlPerToken() public view returns (uint) {\\n        // PRECISION\\n        return PRECISION + accRewardsPerToken;\\n    }\\n\\n    function collateralizationP() public view returns (uint) {\\n        // PRECISION (%)\\n        uint _maxAccPnlPerToken = maxAccPnlPerToken();\\n        return\\n            ((\\n                accPnlPerTokenUsed > 0\\n                    ? (_maxAccPnlPerToken - uint(accPnlPerTokenUsed))\\n                    : (_maxAccPnlPerToken + uint(accPnlPerTokenUsed * (-1)))\\n            ) *\\n                100 *\\n                PRECISION) / _maxAccPnlPerToken;\\n    }\\n\\n    function gnsTokenToAssetsPrice() public view returns (uint price) {\\n        // GNS_PRECISION\\n        (bool success, bytes memory result) = gnsPriceProvider.addr.staticcall(\\n            gnsPriceProvider.signature\\n        );\\n\\n        require(success == true, \\\"GNS_PRICE_CALL_FAILED\\\");\\n        (price) = abi.decode(result, (uint));\\n\\n        require(price > 0, \\\"GNS_TOKEN_PRICE_0\\\");\\n    }\\n\\n    function withdrawEpochsTimelock() public view returns (uint) {\\n        uint collatP = collateralizationP();\\n        uint overCollatP = (collatP -\\n            MathUpgradeable.min(collatP, 100 * PRECISION));\\n\\n        return\\n            overCollatP > withdrawLockThresholdsP[1]\\n                ? WITHDRAW_EPOCHS_LOCKS[2]\\n                : (\\n                    overCollatP > withdrawLockThresholdsP[0]\\n                        ? WITHDRAW_EPOCHS_LOCKS[1]\\n                        : WITHDRAW_EPOCHS_LOCKS[0]\\n                );\\n    }\\n\\n    function lockDiscountP(\\n        uint collatP,\\n        uint lockDuration\\n    ) public view returns (uint) {\\n        return\\n            ((\\n                collatP <= 100 * PRECISION\\n                    ? maxDiscountP\\n                    : (\\n                        collatP <= maxDiscountThresholdP\\n                            ? (maxDiscountP *\\n                                (maxDiscountThresholdP - collatP)) /\\n                                (maxDiscountThresholdP - 100 * PRECISION)\\n                            : 0\\n                    )\\n            ) * lockDuration) / MAX_LOCK_DURATION;\\n    }\\n\\n    function totalSharesBeingWithdrawn(\\n        address owner\\n    ) public view returns (uint shares) {\\n        for (\\n            uint i = currentEpoch;\\n            i <= currentEpoch + WITHDRAW_EPOCHS_LOCKS[0];\\n            i++\\n        ) {\\n            shares += withdrawRequests[owner][i];\\n        }\\n    }\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) public view override returns (uint) {\\n        return\\n            accBlockWeightedMarketCap +\\n            ((currentBlock - accBlockWeightedMarketCapLastStored) *\\n                PRECISION_2) /\\n            MathUpgradeable.max(marketCap(), 1);\\n    }\\n\\n    // Public helper functions\\n    function tryUpdateCurrentMaxSupply() public {\\n        if (block.timestamp - lastMaxSupplyUpdate >= 24 hours) {\\n            currentMaxSupply =\\n                (totalSupply() * (PRECISION * 100 + maxSupplyIncreaseDailyP)) /\\n                (PRECISION * 100);\\n            lastMaxSupplyUpdate = block.timestamp;\\n\\n            emit CurrentMaxSupplyUpdated(currentMaxSupply);\\n        }\\n    }\\n\\n    function tryResetDailyAccPnlDelta() public {\\n        if (block.timestamp - lastDailyAccPnlDeltaReset >= 24 hours) {\\n            dailyAccPnlDelta = 0;\\n            lastDailyAccPnlDeltaReset = block.timestamp;\\n\\n            emit DailyAccPnlDeltaReset();\\n        }\\n    }\\n\\n    function tryNewOpenPnlRequestOrEpoch() public {\\n        // Fault tolerance so that activity can continue anyway\\n        (bool success, ) = address(openTradesPnlFeed).call(\\n            abi.encodeWithSignature(\\\"newOpenPnlRequestOrEpoch()\\\")\\n        );\\n        if (!success) {\\n            emit OpenTradesPnlFeedCallFailed();\\n        }\\n    }\\n\\n    function storeAccBlockWeightedMarketCap() public {\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n        accBlockWeightedMarketCap = getPendingAccBlockWeightedMarketCap(\\n            currentBlock\\n        );\\n        accBlockWeightedMarketCapLastStored = currentBlock;\\n\\n        emit AccBlockWeightedMarketCapStored(accBlockWeightedMarketCap);\\n    }\\n\\n    // Private helper functions\\n    function updateShareToAssetsPrice() private {\\n        storeAccBlockWeightedMarketCap();\\n\\n        shareToAssetsPrice =\\n            maxAccPnlPerToken() -\\n            (accPnlPerTokenUsed > 0 ? uint(accPnlPerTokenUsed) : uint(0)); // PRECISION\\n        emit ShareToAssetsPriceUpdated(shareToAssetsPrice);\\n    }\\n\\n    function _assetIERC20() private view returns (IERC20Upgradeable) {\\n        return IERC20Upgradeable(asset());\\n    }\\n\\n    // Override ERC-20 functions (prevent sending to address that is withdrawing)\\n    function transfer(\\n        address to,\\n        uint amount\\n    ) public override(IERC20Upgradeable, ERC20Upgradeable) returns (bool) {\\n        address sender = _msgSender();\\n        require(\\n            totalSharesBeingWithdrawn(sender) <= balanceOf(sender) - amount,\\n            \\\"PENDING_WITHDRAWAL\\\"\\n        );\\n        _transfer(sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint amount\\n    ) public override(IERC20Upgradeable, ERC20Upgradeable) returns (bool) {\\n        require(\\n            totalSharesBeingWithdrawn(from) <= balanceOf(from) - amount,\\n            \\\"PENDING_WITHDRAWAL\\\"\\n        );\\n        _spendAllowance(from, _msgSender(), amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    // Override ERC-4626 view functions\\n    function decimals()\\n        public\\n        view\\n        override(ERC20Upgradeable, ERC4626Upgradeable)\\n        returns (uint8)\\n    {\\n        return ERC4626Upgradeable.decimals();\\n    }\\n\\n    function _convertToShares(\\n        uint assets,\\n        MathUpgradeable.Rounding rounding\\n    ) internal view override returns (uint shares) {\\n        return assets.mulDiv(PRECISION, shareToAssetsPrice, rounding);\\n    }\\n\\n    function _convertToAssets(\\n        uint shares,\\n        MathUpgradeable.Rounding rounding\\n    ) internal view override returns (uint assets) {\\n        // Prevent overflow when called from maxDeposit with maxMint = uint.max\\n        if (shares == type(uint).max && shareToAssetsPrice >= PRECISION) {\\n            return shares;\\n        }\\n        return shares.mulDiv(shareToAssetsPrice, PRECISION, rounding);\\n    }\\n\\n    function maxMint(address) public view override returns (uint) {\\n        return\\n            accPnlPerTokenUsed > 0\\n                ? currentMaxSupply -\\n                    MathUpgradeable.min(currentMaxSupply, totalSupply())\\n                : type(uint).max;\\n    }\\n\\n    function maxDeposit(address owner) public view override returns (uint) {\\n        return _convertToAssets(maxMint(owner), MathUpgradeable.Rounding.Down);\\n    }\\n\\n    function maxRedeem(address owner) public view override returns (uint) {\\n        return\\n            openTradesPnlFeed.nextEpochValuesRequestCount() == 0\\n                ? MathUpgradeable.min(\\n                    withdrawRequests[owner][currentEpoch],\\n                    totalSupply() - 1\\n                )\\n                : 0;\\n    }\\n\\n    function maxWithdraw(address owner) public view override returns (uint) {\\n        return\\n            _convertToAssets(maxRedeem(owner), MathUpgradeable.Rounding.Down);\\n    }\\n\\n    // Override ERC-4626 interactions (call scaleVariables on every deposit / withdrawal)\\n    function deposit(\\n        uint assets,\\n        address receiver\\n    ) public override checks(assets) returns (uint) {\\n        require(\\n            assets <= maxDeposit(receiver),\\n            \\\"ERC4626: deposit more than max\\\"\\n        );\\n\\n        uint shares = previewDeposit(assets);\\n        scaleVariables(shares, assets, true);\\n\\n        _deposit(_msgSender(), receiver, assets, shares);\\n        return shares;\\n    }\\n\\n    function mint(\\n        uint shares,\\n        address receiver\\n    ) public override checks(shares) returns (uint) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint assets = previewMint(shares);\\n        scaleVariables(shares, assets, true);\\n\\n        _deposit(_msgSender(), receiver, assets, shares);\\n        return assets;\\n    }\\n\\n    function withdraw(\\n        uint assets,\\n        address receiver,\\n        address owner\\n    ) public override checks(assets) returns (uint) {\\n        require(\\n            assets <= maxWithdraw(owner),\\n            \\\"ERC4626: withdraw more than max\\\"\\n        );\\n\\n        uint shares = previewWithdraw(assets);\\n        withdrawRequests[owner][currentEpoch] -= shares;\\n\\n        scaleVariables(shares, assets, false);\\n\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n        return shares;\\n    }\\n\\n    function redeem(\\n        uint shares,\\n        address receiver,\\n        address owner\\n    ) public override checks(shares) returns (uint) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        withdrawRequests[owner][currentEpoch] -= shares;\\n\\n        uint assets = previewRedeem(shares);\\n        scaleVariables(shares, assets, false);\\n\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n        return assets;\\n    }\\n\\n    function scaleVariables(uint shares, uint assets, bool isDeposit) private {\\n        uint supply = totalSupply();\\n\\n        if (accPnlPerToken < 0) {\\n            accPnlPerToken =\\n                (accPnlPerToken * int(supply)) /\\n                (isDeposit ? int(supply + shares) : int(supply - shares));\\n        } else if (accPnlPerToken > 0) {\\n            totalLiability +=\\n                ((int(shares) * totalLiability) / int(supply)) *\\n                (isDeposit ? int(1) : int(-1));\\n        }\\n\\n        totalDeposited = isDeposit\\n            ? totalDeposited + assets\\n            : totalDeposited - assets;\\n\\n        storeAccBlockWeightedMarketCap();\\n    }\\n\\n    // Withdraw requests (need to be done before calling 'withdraw' / 'redeem')\\n    function makeWithdrawRequest(uint shares, address owner) external {\\n        require(\\n            openTradesPnlFeed.nextEpochValuesRequestCount() == 0,\\n            \\\"END_OF_EPOCH\\\"\\n        );\\n\\n        address sender = _msgSender();\\n        uint allowance = allowance(owner, sender);\\n        require(\\n            sender == owner || (allowance > 0 && allowance >= shares),\\n            \\\"NOT_ALLOWED\\\"\\n        );\\n\\n        require(\\n            totalSharesBeingWithdrawn(owner) + shares <= balanceOf(owner),\\n            \\\"MORE_THAN_BALANCE\\\"\\n        );\\n\\n        uint unlockEpoch = currentEpoch + withdrawEpochsTimelock();\\n        withdrawRequests[owner][unlockEpoch] += shares;\\n\\n        emit WithdrawRequested(\\n            sender,\\n            owner,\\n            shares,\\n            currentEpoch,\\n            unlockEpoch\\n        );\\n    }\\n\\n    function cancelWithdrawRequest(\\n        uint shares,\\n        address owner,\\n        uint unlockEpoch\\n    ) external {\\n        require(\\n            shares <= withdrawRequests[owner][unlockEpoch],\\n            \\\"MORE_THAN_WITHDRAW_AMOUNT\\\"\\n        );\\n\\n        address sender = _msgSender();\\n        uint allowance = allowance(owner, sender);\\n        require(\\n            sender == owner || (allowance > 0 && allowance >= shares),\\n            \\\"NOT_ALLOWED\\\"\\n        );\\n\\n        withdrawRequests[owner][unlockEpoch] -= shares;\\n\\n        emit WithdrawCanceled(sender, owner, shares, currentEpoch, unlockEpoch);\\n    }\\n\\n    // Locked and discounted deposits\\n    function depositWithDiscountAndLock(\\n        uint assets,\\n        uint lockDuration,\\n        address receiver\\n    ) external checks(assets) validDiscount(lockDuration) returns (uint) {\\n        uint simulatedAssets = (assets *\\n            (PRECISION *\\n                100 +\\n                lockDiscountP(collateralizationP(), lockDuration))) /\\n            (PRECISION * 100);\\n\\n        require(\\n            simulatedAssets <= maxDeposit(receiver),\\n            \\\"DEPOSIT_MORE_THAN_MAX\\\"\\n        );\\n\\n        return\\n            _executeDiscountAndLock(\\n                simulatedAssets,\\n                assets,\\n                previewDeposit(simulatedAssets),\\n                lockDuration,\\n                receiver\\n            );\\n    }\\n\\n    function mintWithDiscountAndLock(\\n        uint shares,\\n        uint lockDuration,\\n        address receiver\\n    ) external checks(shares) validDiscount(lockDuration) returns (uint) {\\n        require(shares <= maxMint(receiver), \\\"MINT_MORE_THAN_MAX\\\");\\n        uint assets = previewMint(shares);\\n\\n        return\\n            _executeDiscountAndLock(\\n                assets,\\n                (assets * (PRECISION * 100)) /\\n                    (PRECISION *\\n                        100 +\\n                        lockDiscountP(collateralizationP(), lockDuration)),\\n                shares,\\n                lockDuration,\\n                receiver\\n            );\\n    }\\n\\n    function _executeDiscountAndLock(\\n        uint assets,\\n        uint assetsDeposited,\\n        uint shares,\\n        uint lockDuration,\\n        address receiver\\n    ) private returns (uint) {\\n        require(assets > assetsDeposited, \\\"NO_DISCOUNT\\\");\\n\\n        uint depositId = ++lockedDepositsCount;\\n        uint assetsDiscount = assets - assetsDeposited;\\n\\n        LockedDeposit storage d = lockedDeposits[depositId];\\n        d.owner = receiver;\\n        d.shares = shares;\\n        d.assetsDeposited = assetsDeposited;\\n        d.assetsDiscount = assetsDiscount;\\n        d.atTimestamp = block.timestamp;\\n        d.lockDuration = lockDuration;\\n\\n        scaleVariables(shares, assetsDeposited, true);\\n        address sender = _msgSender();\\n        _deposit(sender, address(this), assetsDeposited, shares);\\n\\n        totalDiscounts += assetsDiscount;\\n        totalLockedDiscounts += assetsDiscount;\\n\\n        lockedDepositNft.mint(receiver, depositId);\\n\\n        emit DepositLocked(sender, d.owner, depositId, d);\\n        return depositId;\\n    }\\n\\n    function unlockDeposit(uint depositId, address receiver) external {\\n        LockedDeposit storage d = lockedDeposits[depositId];\\n\\n        address sender = _msgSender();\\n        address owner = lockedDepositNft.ownerOf(depositId);\\n\\n        require(\\n            owner == sender ||\\n                lockedDepositNft.getApproved(depositId) == sender ||\\n                lockedDepositNft.isApprovedForAll(owner, sender),\\n            \\\"NOT_ALLOWED\\\"\\n        );\\n        require(\\n            block.timestamp >= d.atTimestamp + d.lockDuration,\\n            \\\"NOT_UNLOCKED\\\"\\n        );\\n\\n        int accPnlDelta = int(\\n            d.assetsDiscount.mulDiv(\\n                PRECISION,\\n                totalSupply(),\\n                MathUpgradeable.Rounding.Up\\n            )\\n        );\\n\\n        accPnlPerToken += accPnlDelta;\\n        require(\\n            accPnlPerToken <= int(maxAccPnlPerToken()),\\n            \\\"NOT_ENOUGH_ASSETS\\\"\\n        );\\n\\n        lockedDepositNft.burn(depositId);\\n\\n        accPnlPerTokenUsed += accPnlDelta;\\n        updateShareToAssetsPrice();\\n\\n        totalLiability += int(d.assetsDiscount);\\n        totalLockedDiscounts -= d.assetsDiscount;\\n\\n        _transfer(address(this), receiver, d.shares);\\n\\n        emit DepositUnlocked(sender, receiver, owner, depositId, d);\\n    }\\n\\n    // Distributes a reward evenly to all stakers of the vault\\n    function distributeReward(uint assets) external override {\\n        address sender = _msgSender();\\n        SafeERC20Upgradeable.safeTransferFrom(\\n            _assetIERC20(),\\n            sender,\\n            address(this),\\n            assets\\n        );\\n\\n        accRewardsPerToken += (assets * PRECISION) / totalSupply();\\n        updateShareToAssetsPrice();\\n\\n        totalRewards += assets;\\n        totalDeposited += assets;\\n\\n        emit RewardDistributed(sender, assets);\\n    }\\n\\n    // PnL interactions (happens often, so also used to trigger other actions)\\n    function sendAssets(uint assets, address receiver) external override {\\n        address sender = _msgSender();\\n        require(sender == pnlHandler, \\\"ONLY_TRADING_PNL_HANDLER\\\");\\n\\n        int accPnlDelta = int(\\n            assets.mulDiv(PRECISION, totalSupply(), MathUpgradeable.Rounding.Up)\\n        );\\n\\n        accPnlPerToken += accPnlDelta;\\n        require(\\n            accPnlPerToken <= int(maxAccPnlPerToken()),\\n            \\\"NOT_ENOUGH_ASSETS\\\"\\n        );\\n\\n        tryResetDailyAccPnlDelta();\\n        dailyAccPnlDelta += accPnlDelta;\\n        require(dailyAccPnlDelta <= int(maxDailyAccPnlDelta), \\\"MAX_DAILY_PNL\\\");\\n\\n        totalLiability += int(assets);\\n        totalClosedPnl += int(assets);\\n\\n        tryNewOpenPnlRequestOrEpoch();\\n        tryUpdateCurrentMaxSupply();\\n\\n        SafeERC20Upgradeable.safeTransfer(_assetIERC20(), receiver, assets);\\n\\n        emit AssetsSent(sender, receiver, assets);\\n    }\\n\\n    function receiveAssets(uint assets, address user) external override {\\n        address sender = _msgSender();\\n        SafeERC20Upgradeable.safeTransferFrom(\\n            _assetIERC20(),\\n            sender,\\n            address(this),\\n            assets\\n        );\\n\\n        uint assetsLessDeplete = assets;\\n\\n        if (accPnlPerTokenUsed < 0 && accPnlPerToken < 0) {\\n            uint depleteAmount = (assets * lossesBurnP) / PRECISION / 100;\\n            assetsToDeplete += depleteAmount;\\n            assetsLessDeplete -= depleteAmount;\\n        }\\n\\n        int accPnlDelta = int((assetsLessDeplete * PRECISION) / totalSupply());\\n        accPnlPerToken -= accPnlDelta;\\n\\n        tryResetDailyAccPnlDelta();\\n        dailyAccPnlDelta -= accPnlDelta;\\n\\n        totalLiability -= int(assetsLessDeplete);\\n        totalClosedPnl -= int(assetsLessDeplete);\\n\\n        tryNewOpenPnlRequestOrEpoch();\\n        tryUpdateCurrentMaxSupply();\\n\\n        emit AssetsReceived(sender, user, assets, assetsLessDeplete);\\n    }\\n\\n    // GNS mint / burn mechanism\\n    function deplete(uint assets) external {\\n        require(assets <= assetsToDeplete, \\\"AMOUNT_TOO_BIG\\\");\\n        assetsToDeplete -= assets;\\n\\n        address sender = _msgSender();\\n        totalDepleted += assets;\\n\\n        SafeERC20Upgradeable.safeTransfer(_assetIERC20(), sender, assets);\\n        emit Depleted(sender, assets, 0);\\n    }\\n\\n    function refill(uint assets) external {\\n        require(accPnlPerTokenUsed > 0, \\\"NOT_UNDER_COLLATERALIZED\\\");\\n\\n        uint supply = totalSupply();\\n        require(\\n            assets <= (uint(accPnlPerTokenUsed) * supply) / PRECISION,\\n            \\\"AMOUNT_TOO_BIG\\\"\\n        );\\n\\n        address sender = _msgSender();\\n        SafeERC20Upgradeable.safeTransferFrom(\\n            _assetIERC20(),\\n            sender,\\n            address(this),\\n            assets\\n        );\\n\\n        int accPnlDelta = int((assets * PRECISION) / supply);\\n        accPnlPerToken -= accPnlDelta;\\n        accPnlPerTokenUsed -= accPnlDelta;\\n        updateShareToAssetsPrice();\\n\\n        totalRefilled += assets;\\n        emit Refilled(sender, assets, 0);\\n    }\\n\\n    // Updates shareToAssetsPrice based on the new PnL and starts a new epoch\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl, // 1e18\\n        uint newPositiveOpenPnl // 1e18\\n    ) external override returns (uint) {\\n        address sender = _msgSender();\\n        require(sender == address(openTradesPnlFeed), \\\"ONLY_PNL_FEED\\\");\\n\\n        int delta = int(newPositiveOpenPnl) - int(prevPositiveOpenPnl); // 1e18\\n        uint supply = totalSupply();\\n\\n        int maxDelta = int(\\n            MathUpgradeable.min(\\n                (uint(int(maxAccPnlPerToken()) - accPnlPerToken) * supply) /\\n                    PRECISION,\\n                (maxAccOpenPnlDelta * supply) / PRECISION\\n            )\\n        ); // 1e18\\n\\n        delta = delta > maxDelta ? maxDelta : delta;\\n\\n        accPnlPerToken += (delta * int(PRECISION)) / int(supply);\\n        totalLiability += delta;\\n\\n        accPnlPerTokenUsed = accPnlPerToken;\\n        updateShareToAssetsPrice();\\n\\n        currentEpoch++;\\n        currentEpochStart = block.timestamp;\\n        currentEpochPositiveOpenPnl = uint(int(prevPositiveOpenPnl) + delta);\\n\\n        tryUpdateCurrentMaxSupply();\\n\\n        emit AccPnlPerTokenUsedUpdated(\\n            sender,\\n            currentEpoch,\\n            prevPositiveOpenPnl,\\n            newPositiveOpenPnl,\\n            currentEpochPositiveOpenPnl,\\n            accPnlPerTokenUsed\\n        );\\n\\n        return currentEpochPositiveOpenPnl;\\n    }\\n\\n    // Getters\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view override returns (LockedDeposit memory) {\\n        return lockedDeposits[depositId];\\n    }\\n\\n    function tvl() public view override returns (uint) {\\n        return (maxAccPnlPerToken() * totalSupply()) / PRECISION; // 1e18\\n    }\\n\\n    function availableAssets() public view returns (uint) {\\n        return\\n            (uint(int(maxAccPnlPerToken()) - accPnlPerTokenUsed) *\\n                totalSupply()) / PRECISION; // 1e18\\n    }\\n\\n    // To be compatible with old pairs storage contract v6 (to be used only with gDAI vault)\\n    function currentBalanceDai() external view override returns (uint) {\\n        return availableAssets(); // 1e18\\n    }\\n\\n    function marketCap() public view override returns (uint) {\\n        return (totalSupply() * shareToAssetsPrice) / PRECISION; // 1e18\\n    }\\n}\\n\",\"keccak256\":\"0x8ac427bec45a853f56a346057a6562d1edae5e88902f336cb34ba9ac196be6f2\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1fd411df874a31e89b8a26375446f6bf9d14279a1e02ee1e6541f0f2a1bec9da\",\"license\":\"MIT\"},\"contracts/interfaces/IGnsToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IGnsToken {\\n    function burn(address to, uint amount) external;\\n\\n    function mint(address from, uint amount) external;\\n}\\n\",\"keccak256\":\"0xab2f2c074377860d80b2c06d0dcfc0a14c671fcc09aac9ff4a6ca204a99b584b\",\"license\":\"MIT\"},\"contracts/interfaces/INft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\npragma solidity ^0.8.7;\\n\\ninterface INft is IERC721 {\\n    function mint(address to, uint tokenId) external;\\n\\n    function burn(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0x94edc7019a6344cbbdfb63370012b2d3bcb2e5779270fbcb5ea2916bda5dc3c3\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenTradesPnlFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IOpenTradesPnlFeed {\\n    function nextEpochValuesRequestCount() external view returns (uint);\\n\\n    function newOpenPnlRequestOrEpoch() external;\\n}\\n\",\"keccak256\":\"0x611ed17775d1aad123dd41a52bd8e10fd3ff5afc9712ba4f792f8d2d1ac97638\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0x6c7fba5c30c9f2c493d0fa6bfa8fb4414e8d74aa253cddb145b1496269cb6c1a\",\"license\":\"MIT\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\",\"keccak256\":\"0xe3ded73d85620c3a752c8c82be5e24e22b868e47f021e2b6e1783fb2be56aa24\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\",\"keccak256\":\"0x3ef4c9add07628e009b35ee24c956fd626f4569d910b314fe09ed9deebe686c4\",\"license\":\"MIT\"},\"contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.7;\\nimport \\\"../libraries/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0xfebd2cea60968da584614602ffd9490901d1fb5ae30bde44aac1bfca59e1f5c4\",\"license\":\"MIT\"},\"contracts/utils/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../libraries/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\",\"keccak256\":\"0x157c8ef31d20dcc273ad559341d6ad761b3eedd51341e01154cd8b73feead35c\",\"license\":\"MIT\"},\"contracts/utils/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"./SafeERC20Upgradeable.sol\\\";\\nimport \\\"./IERC4626Upgradeable.sol\\\";\\nimport \\\"./MathUpgradeable.sol\\\";\\nimport \\\"../libraries/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * CAUTION: When the vault is empty or nearly empty, deposits are at high risk of being stolen through frontrunning with\\n * a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * _Available since v4.7._\\n */\\n \\nabstract contract ERC4626Upgradeable is Initializable, ERC20Upgradeable, IERC4626Upgradeable {\\n    using MathUpgradeable for uint256;\\n\\n    IERC20Upgradeable private _asset;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    function __ERC4626_init(IERC20Upgradeable asset_) internal onlyInitializing {\\n        __ERC4626_init_unchained(asset_);\\n    }\\n\\n    function __ERC4626_init_unchained(IERC20Upgradeable asset_) internal onlyInitializing {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _decimals = success ? assetDecimals : super.decimals();\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20Upgradeable asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeWithSelector(IERC20MetadataUpgradeable.decimals.selector)\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are read from the underlying asset in the constructor and cached. If this fails (e.g., the asset\\n     * has not been created yet), the cached value is set to a default obtained by `super.decimals()` (which depends on\\n     * inheritance but is most likely 18). Override this function in order to set a guaranteed hardcoded value.\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20MetadataUpgradeable, ERC20Upgradeable) returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256 shares) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256 assets) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return _isVaultCollateralized() ? type(uint256).max : 0;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     *\\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\\n     * would represent an infinite amount of shares.\\n     */\\n    function _convertToShares(uint256 assets, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256 shares) {\\n        uint256 supply = totalSupply();\\n        return\\n            (assets == 0 || supply == 0)\\n                ? _initialConvertToShares(assets, rounding)\\n                : assets.mulDiv(supply, totalAssets(), rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) to apply when the vault is empty.\\n     *\\n     * NOTE: Make sure to keep this function consistent with {_initialConvertToAssets} when overriding it.\\n     */\\n    function _initialConvertToShares(\\n        uint256 assets,\\n        MathUpgradeable.Rounding /*rounding*/\\n    ) internal view virtual returns (uint256 shares) {\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256 assets) {\\n        uint256 supply = totalSupply();\\n        return\\n            (supply == 0) ? _initialConvertToAssets(shares, rounding) : shares.mulDiv(totalAssets(), supply, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) to apply when the vault is empty.\\n     *\\n     * NOTE: Make sure to keep this function consistent with {_initialConvertToShares} when overriding it.\\n     */\\n    function _initialConvertToAssets(\\n        uint256 shares,\\n        MathUpgradeable.Rounding /*rounding*/\\n    ) internal view virtual returns (uint256 assets) {\\n        return shares;\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reenterancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20Upgradeable.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20Upgradeable.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Checks if vault is \\\"healthy\\\" in the sense of having assets backing the circulating shares.\\n     */\\n    function _isVaultCollateralized() private view returns (bool) {\\n        return totalAssets() > 0 || totalSupply() == 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0x8c1654918bde783f98120bb29057026deec6e287d47f8a051a6da79d7fa35871\",\"license\":\"MIT\"},\"contracts/utils/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x2be2ce7c4fa39a66495aee272f4f8a5623f5b4db400b6b4d46d6b45311d8b409\",\"license\":\"MIT\"},\"contracts/utils/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0xda5ceaca0cc0f143305eed12971d7699f9f6191880d90e8eaf2928bdc36fa68e\",\"license\":\"MIT\"},\"contracts/utils/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\",\"keccak256\":\"0x4157d2c6a53470357c46fd4627bb738e57094507d0f957c7cc24625804183e88\",\"license\":\"MIT\"},\"contracts/utils/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\",\"keccak256\":\"0x6d9a71ba557e154bccafe1ed043fa77479b3ecde7081103eebf79a87adbd76a7\",\"license\":\"MIT\"},\"contracts/utils/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../libraries/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\",\"keccak256\":\"0xceb60dcbc3b3ccacd131ee2ff3df43da7767ebac27a6f6095cd4fe7736b4a822\",\"license\":\"MIT\"},\"contracts/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xc07b9c78729f2b6e629c69e97e532b5be2236f835af80039604c9931d2b37b51\",\"license\":\"MIT\"},\"contracts/utils/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\",\"keccak256\":\"0x63fedebd2dee2d9ee1792bd9678e877f5f71c707ddd42baa9aa331decfdfa9c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100175761581790816200001d8239f35b600080fdfe6080806040526004361015610014575b600080fd5b60009060e08235811c91826301e1d11414613a33575081630307604f14613a155781630344e8a31461375757816306fdde03146136c457816307a2d13a146131a55781630851a2021461344b578163095ea7b31461369d5781630a28a4771461367b5781630dfb5287146136625781630e15561a146136445781630fc29349146136265781630fcc6f3114613608578163104aeef8146135ea57816318160ddd146135cc5781631f91f287146135a35781631fc8d0991461345657816320124bce1461344b57816320e70a56146133c1578163215e2fae146133a357816322b2ef851461338557816323b872dd1461331f5781632c135b93146132f4578163313ce567146132d057816338d52e0f146132a757816339509351146132565781633b418c1e146132385781633cc775271461321a5781633d7e458714613201578163402d267d146131d9578163481c6a75146131b05781634cdad506146131a55781634ea0ddf71461318757816353409be21461316957816354508847146130e257816358aba00f14613038578163596f0bc514612f555781635a6953d314612f2c5781635cd8a76b14612eac5781635e93f86014612e8e5781635f4ae74114612e7057816361a8c8c414612e525781636445ec0014612e3957816366d8ecf114612e1b5781636ce7dcc914612d8e5781636d6ca31914612d4b5781636e553f6514612c055781636ee432f214612bd857816370a0823114612b9f578163715018a614612b535781637361a544146129d157816375cd9da9146129b3578163766718081461299557816378b4330f1461297757816379431d9c1461294e5781637dfc6922146129305781637fcff2af146129125781638d6cb288146128f45781638da5cb5b146128cb578163940a4e45146127fd57816394bf804d1461275657816395d89b4114612682578163979abb25146125cc578163979b0895146125ad5781639aca06dc1461258f578163a457c2d7146124ea578163a481c14b14612396578163a50043a01461226d578163a8abe90514612095578163a9059cbb14612039578163aabf8ede146116c6578163ad00a5a4146116a2578163b224e73514611684578163b3c4850a14611587578163b3d7f6b914611568578163b460af941461149d578163b54bf9c9146112d6578163b82c58991461126c578163ba087652146111a1578163be216e8314611186578163c4c14169146110fd578163c63384ab146110e2578163c63d75b6146110bd578163c6e6f592146110b2578163ca9d07ba14610f79578163cb7f2c3914610f50578163ce96cb7714610f2e578163ce9e1b2114610eae578163cf39c2db14610e24578163d1e08c2014610e0a578163d229b2dd14610d87578163d272df1014610d22578163d8bdfd4814610d07578163d905777e14610ce3578163db0447d514610cc5578163dd62ed3e14610c76578163ddd65e3114610c58578163e2f273bd14610baa578163e5328e0614610b71578163e66a6e3b14610a0b57508063e783967614610942578063e7899c0614610929578063e8e4311014610837578063ea5f2bba14610819578063ef8b30f71461080f578063f0a77446146107f1578063f2fde38b14610734578063f31bd8f714610716578063f5521eaa14610610578063f851a440146105e7578063f8fb10f7146105c9578063faf33f29146105ab578063fe0b6d901461051f5763ff50abdc146104ff57600080fd5b3461051c578060031936011261051c57602060eb54604051908152f35b80fd5b503461051c57602036600319011261051c5760008051602061578b833981519152608060043561055a60018060a01b0360cb54163314613f4d565b61056f6802b5e3af16b1880000821115613fc0565b8060d7556040519060408252601760408301527606d6178537570706c79496e6372656173654461696c795604c1b60608301526020820152a180f35b503461051c578060031936011261051c57602060e454604051908152f35b503461051c578060031936011261051c57602060da54604051908152f35b503461051c578060031936011261051c5760cc546040516001600160a01b039091168152602090f35b503461051c57604036600319011261051c57366023121561000f5760405161063781613c01565b8060449136831161000f576004905b838210610706575050610657615416565b60209182820151825110156106d4575080835b600281106106c15750506040519183835b600282106106ac57857f8472b50e25b52d8de564f9719bd793b18d83cf59ce4d309e211fb6a4fdc14811604087a180f35b8280600192865181520194019101909261067b565b815160d58201559083019060010161066a565b826b57524f4e475f56414c55455360a01b6064926040519262461bcd60e51b84526004840152600c6024840152820152fd5b8135815260209182019101610646565b503461051c578060031936011261051c57602060f154604051908152f35b503461051c57602036600319011261051c5761074e613adc565b610756615416565b6001600160a01b0390808216801561079d57826107869161078b9460cb5416811415918261078e575b5050613edb565b61546e565b80f35b60cc541614159050388061077f565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461051c578060031936011261051c57602060d354604051908152f35b505061000f613d8a565b503461051c578060031936011261051c57602060dc54604051908152f35b503461051c5761084636613d2b565b60dc549161085583151561468d565b6108608415156146c3565b61086d60da54151561489f565b61087b60d1548210156148e0565b61088b6301e13380821115614926565b68056bc75e2d631000006108b76108b16108ac846108a7614041565b614212565b613eb7565b86613e2f565b046108c86108c3614522565b61454f565b81116108ec576020946108de6108e49583615315565b916149d3565b604051908152f35b60405162461bcd60e51b81526020600482015260156024820152740888aa09ea692a8be9a9ea48abea890829cbe9a82b605b1b6044820152606490fd5b503461051c578060031936011261051c5761078b6143eb565b503461051c57602036600319011261051c5760408160c09260a0835161096781613be6565b82815282602082015282858201528260608201528260808201520152600435815260e96020522060405161099a81613be6565b60018060a01b03825416918282526001810154602083019081526002820154604084019081526003830154916060850192835260a0600560048601549560808801968752015495019485526040519586525160208601525160408501525160608401525160808301525160a0820152f35b905034610b6d576040366003190112610b6d5760043590610a2a613ac6565b60cd546001600160a01b03929083163303610b2d57610a7f610a4e603554866152f1565b610a70610a5d8260de54614714565b8060de55610a69613ff8565b1215614b74565b610a786143eb565b8254614714565b80915560d45412610af857610a968360ee54614714565b60ee55610aa58360ec54614714565b60ec55610ab0614433565b610ab8614383565b610ac7838284606554166154a5565b60405192835216907f17ffe64fb2212f31d60284d6471e06abb7db8d66f0a60f9b884b29f1597d05da60203392a380f35b60405162461bcd60e51b815260206004820152600d60248201526c13505617d11052531657d41393609a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527727a7262cafaa2920a224a723afa827262fa420a7222622a960411b6044820152606490fd5b5080fd5b823461051c578060031936011261051c576020670de0b6b3a7640000610ba1610b98613ff8565b60355490613e2f565b04604051908152f35b823461051c57602036600319011261051c576000805160206157eb8339815191526080610bd5613adc565b60cb546001600160a01b0391610c16918316908390610bf5338414613f4d565b1692610c02841515613f15565b609754168314159081610c4d575b50613edb565b8060018060a01b031960cc54161760cc556040519060408252600560408301526430b236b4b760d91b60608301526020820152a180f35b905082141586610c10565b823461051c578060031936011261051c57602060dd54604051908152f35b823461051c57604036600319011261051c57610c90613adc565b6040610c9a613ac6565b9260018060a01b03809316815260346020522091166000526020526020604060002054604051908152f35b823461051c578060031936011261051c57602060d754604051908152f35b823461051c57602036600319011261051c5760206108e4610d02613adc565b6145ce565b823461051c578060031936011261051c5760206108e461413f565b823461051c57602036600319011261051c5760008051602061578b8339815191526080600435610d50615416565b8060d355604051906040825260126040830152716d61784163634f70656e506e6c44656c746160701b60608301526020820152a180f35b823461051c57602036600319011261051c576000805160206157eb8339815191526080610db2613adc565b610dba615416565b6001600160a01b0316610dce811515613f15565b8060018060a01b031960cd54161760cd556040519060408252600a6040830152693837362430b7323632b960b11b60608301526020820152a180f35b823461051c5760206108e4610e1e36613c3f565b90614212565b823461051c57602036600319011261051c5760008051602061578b8339815191526080600435610e5f60018060a01b0360cb54163314613f4d565b610e7468056bc75e2d63100000821015613f88565b8060db556040519060408252601560408301527406d6178446973636f756e745468726573686f6c645605c1b60608301526020820152a180f35b823461051c57602036600319011261051c5760008051602061578b8339815191526080600435610ee960018060a01b0360cb54163314613f4d565b610efe68015af1d78b58c40000821115613fc0565b8060d8556040519060408252600b60408301526a06c6f737365734275726e560ac1b60608301526020820152a180f35b823461051c57602036600319011261051c5760206108e46108c3610d02613adc565b823461051c578060031936011261051c5760c9546040516001600160a01b039091168152602090f35b823461051c57602036600319011261051c5760043560dd548281131561107257610fc090603554918291610fb7670de0b6b3a7640000938492613e2f565b04841115614c2c565b606554610fdb908490309033906001600160a01b03166154df565b80830290838204148315171561105e5761100f91610ff891613e0f565b6110048160de54614c13565b60de5560dd54614c13565b60dd5561101a614bb4565b6110268160f254613ece565b60f2556040519081528160208201527f19aee2c21e4d63823896cb2a77a3e61197dda70b1043a55fca38aa8d75c0edd360403392a280f35b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b81526020600482015260186024820152771393d517d55391115497d0d3d3131055115490531256915160421b6044820152606490fd5b50505061000f613d8a565b823461051c57602036600319011261051c576110d7613adc565b5060206108e4614522565b823461051c578060031936011261051c5760206108e4614041565b823461051c57602036600319011261051c5760008051602061578b833981519152608060043561113860018060a01b0360cb54163314613f4d565b61114b66b1a2bc2ec50000821115613fc0565b8060d9556040519060408252601660408301527506d6178476e73537570706c794d696e744461696c79560541b60608301526020820152a180f35b823461051c578060031936011261051c5760206108e4613ff8565b823461051c576111b036613d55565b916111c160dc94929454151561468d565b6111cc8115156146c3565b6111d5836145ce565b81116112275760209360406108e49360018060a01b038616815260e7875281812060e2548252875220611209838254614034565b90556112148261454f565b93849161122183856147ba565b3361518d565b60405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468616e206d61780000006044820152606490fd5b823461051c57602036600319011261051c57604060c091600435815260e96020522060018060a01b038154169060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b823461051c576020908160031936011261051c576001600160401b036004358181116114995761130a903690600401613cc5565b60cb546001600160a01b0392906113249084163314613f4d565b611332838351161515613f15565b848201908151511561146a5761134a84845116613e42565b81518051918211611456576113698261136460d054613b99565b613e7b565b8690601f83116001146113dd5791808798926113cc959460008051602061572b83398151915299926113d2575b50508160011b916000199060031b1c19161760d0555b604051948594828652511690840152516040808401526060830190613b06565b0390a180f35b015190508980611396565b60d087528787209190601f198416885b81811061143f57509260019285926113cc979660008051602061572b8339815191529b9c9610611426575b505050811b0160d0556113ac565b015160001960f88460031b161c19169055898080611418565b92938a6001819287860151815501950193016113ed565b634e487b7160e01b86526041600452602486fd5b60405162461bcd60e51b8152600481018790526007602482015266042595445535f360cc1b6044820152606490fd5b8280fd5b823461051c576114ac36613d55565b9260dc92919254916114bf83151561468d565b6114ca8115156146c3565b6114d66108c3866145ce565b8111611523576020946040946114ef6108e495846152f1565b95869460018060a01b038416815260e7895281812060e2548252895220611517858254614034565b905561122183856147ba565b60405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468616e206d6178006044820152606490fd5b823461051c57602036600319011261051c5760206108e460043561457e565b823461051c5761159636613d2b565b6115a660dc93929354151561468d565b6115b18215156146c3565b6115be60da54151561489f565b6115cc60d1548410156148e0565b6115dc6301e13380841115614926565b6115e4614522565b821161164a576115f38261457e565b9268056bc75e2d63100000928385029385850414851517156116345760209461162e6108e4956116286108ac866108a7614041565b90613e0f565b906149d3565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601260248201527109a929ca8be9a9ea48abea890829cbe9a82b60731b6044820152606490fd5b823461051c578060031936011261051c57602060e154604051908152f35b823461051c57602036600319011261051c5760206108e46116c1613adc565b6142a7565b823461051c576003196101a036820112610b6d576004356001600160401b038111611499576116f9903690600401613ca7565b906024356001600160401b03811161203557611719903690600401613ca7565b936044356001600160401b0381116120315761012080938236030112612031576040519283016001600160401b03811184821017611c035760405261176081600401613af2565b835261176e60248201613af2565b602084015261177f60448201613af2565b604084015261179060648201613af2565b60608401526117a160848201613af2565b60808401526117b260a48201613af2565b60a08401526117c360c48201613af2565b60c08401526117d460e48201613af2565b838301526101048101356001600160401b03811161202d576117fb91369101600401613cc5565b6101008301523660e3121561000f576040519461181786613c01565b85366101041161000f5760c4905b610104821061201d57505084549360ff8560081c161594858096612010575b8015611ff9575b61185490613dac565b60ff198116600117875585611fe8575b5083516001600160a01b0316151580611fd2575b80611fbc575b80611fa6575b80611f87575b80611f68575b80611f52575b80611f3c575b80611f27575b80611f13575b80611f05575b80611eef575b80611ed9575b80611ec5575b80611eb0575b80611e9a575b15611e66576118ea60ff875460081c166118e581614ce0565b614ce0565b8051906001600160401b038211611e52578190611908603654613b99565b601f8111611e15575b50602090601f8311600114611d9f578892611d94575b50508160011b916000199060031b1c1916176036555b8051906001600160401b03821161145657611959603754613b99565b601f8111611d4c575b50602090601f8311600114611cd15791806101009492602096948992611cc6575b50508160011b916000199060031b1c1916176037555b60018060a01b038251166119b760ff885460081c166118e581614ce0565b6119c081615038565b9015611cbe575b606580546001600160a81b03191660a09290921b60ff60a01b169190911791909117905581840151611a01906001600160a01b031661546e565b608082015160c980546001600160a01b03199081166001600160a01b039384161790915560a084015160ca80548316918416919091179055604084015160cb80548316918416919091179055606084015160cc8054831691841691909117905560c084015160cd805483169184169190911790559183015160ce80549093169082161790915591015180519091611a989116613e42565b015180519093906001600160401b038111611caa57611abc8161136460d054613b99565b6020601f8211600114611c395784958293949592611c2e575b50508160011b916000199060031b1c19161760d0555b60643560d15560843560d35560a43560d455825b60028110611c195750506101043560d7556101243560d8556101643560da556101843560db55670de0b6b3a764000060dc55600160e2554260e355604051606081016001600160401b03811182821017611c0357604052600390818152600260208201526001604082015260d2548260d255808310611bdb575b5060d284526000805160206156ab833981519152845b838110611bc4578585611b9f5780f35b61ff0019815416815560008051602061574b833981519152602060405160018152a180f35b600190602060ff8551169401938184015501611b8f565b60d28552611bfd906000805160206156ab833981519152908101908401613e64565b84611b79565b634e487b7160e01b600052604160045260246000fd5b600190602083519301928160d5015501611aff565b015190508580611ad5565b60d08552601f198216956000805160206156eb8339815191529190865b888110611c9257508360019596979810611c79575b505050811b0160d055611aeb565b015160001960f88460031b161c19169055858080611c6b565b91926020600181928685015181550194019201611c56565b634e487b7160e01b84526041600452602484fd5b5060126119c7565b015190508980611983565b603787526000805160206157cb8339815191529190875b601f1985168110611d3457509261010094926001926020979583601f19811610611d1b575b505050811b01603755611999565b015160001960f88460031b161c19169055898080611d0d565b91926020600181928685015181550194019201611ce8565b6037600052611d84906000805160206157cb833981519152601f850160051c81019160208610611d8a575b601f0160051c0190613e64565b87611962565b9091508190611d77565b015190508880611927565b603689528893506000805160206156cb83398151915291905b601f1984168510611dfa576001945083601f19811610611de1575b505050811b0160365561193d565b015160001960f88460031b161c19169055888080611dd3565b81810151835560209485019460019093019290910190611db8565b6036600052611e4c906000805160206156cb833981519152601f850160051c81019160208610611d8a57601f0160051c0190613e64565b89611911565b634e487b7160e01b87526041600452602487fd5b60405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b6044820152606490fd5b5068056bc75e2d631000006101843510156118cc565b50678ac7230489e800006101643511156118c6565b5066b1a2bc2ec500006101443511156118c0565b5068015af1d78b58c400006101243511156118ba565b506802b5e3af16b18800006101043511156118b4565b5060208701518751106118ae565b5067016345785d8a000060a43510156118a8565b50838301516001600160a01b031615156118a2565b5060c08401516001600160a01b0316151561189c565b5060a08401516001600160a01b03161515611896565b50604084015160608501516001600160a01b0390811691161415611890565b50602084015160408501516001600160a01b039081169116141561188a565b5060608401516001600160a01b03161515611884565b5060408401516001600160a01b0316151561187e565b5060208401516001600160a01b03161515611878565b61ffff191661010117865587611864565b50303b15801561184b575060ff811660011461184b565b50600160ff821610611844565b8135815260209182019101611825565b8580fd5b8480fd5b8380fd5b823461051c57604036600319011261051c5761208a90612057613adc565b6120846024359261207d84604061206d336142a7565b9333815260336020522054614034565b10156144e1565b33614d40565b602060405160018152f35b823461051c57604036600319011261051c576004356120b2613ac6565b60ce54604051632e3fbb9960e21b8152602093916001600160a01b03919085908290600490829086165afa908115612262578691612235575b50612201578161212661212b9285169485885260348752604088203360005287526116c16040600020548733149081156121e1575b50614865565b613ece565b828552603384526040852054106121a85761215060e25461214a61413f565b90613ece565b9282855260e7815260408520848652815260408520612170838254613ece565b905560e254906040519283528201527f21b8e5e36008677ea26efbbc967e568e01b127f731ed0fda0a8685fda37d0d5f60403392a480f35b60405162461bcd60e51b81526004810184905260116024820152704d4f52455f5448414e5f42414c414e434560781b6044820152606490fd5b90508481151591826121f6575b50508a612120565b10159050848b6121ee565b60405162461bcd60e51b815260048101859052600c60248201526b08a9c88be9e8cbe8aa09e86960a31b6044820152606490fd5b90508481813d831161225b575b61224c8183613c1c565b8101031261000f5751866120eb565b503d612242565b6040513d88823e3d90fd5b823461051c57606036600319011261051c5760043561228a613ac6565b906044359160018060a01b031690818452602060e78152604085208486528152604085205482116123565782855260348152604085203360005281526122df6040600020548433149081156123365750614865565b82855260e78152604085208486528152604085206122fe838254614034565b905560e254906040519283528201527f443ccdbbbde35bd48740a9ea14c47318b735db4631ed1ebcdaaaa9f4636c84ea60403392a480f35b905083811515918261234b575b505087612120565b101590508388612343565b6064906040519062461bcd60e51b8252600482015260196024820152781353d49157d512105397d5d2551211149055d7d05353d55395603a1b6044820152fd5b905034610b6d576040366003190112610b6d57600435906123b5613ac6565b6065546001600160a01b0392906123d39085903090339087166154df565b83908560dd5412806124df575b6124a6575b670de0b6b3a76400008083029083820414831517156124925761240e61242c9160355490613e0f565b61241a8160de54614c13565b60de556124256143eb565b8254614c13565b905561243a8160ee54614c13565b60ee556124498160ec54614c13565b60ec55612454614433565b61245c614383565b604051938452602084015216907f2083893e39f8ae736fed502f7e149cc5bfe6159878615fae685a9a98bc452d5a60403392a380f35b634e487b7160e01b87526011600452602487fd5b90506124d96064670de0b6b3a76400006124c260d85488613e2f565b04046124d08160ea54613ece565b60ea5585614034565b906123e5565b508560de54126123e0565b823461051c57604036600319011261051c57612504613adc565b60406024359233815260346020522060018060a01b0382166000526020526040600020549180831061253c5761208a92039033614e9e565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b823461051c578060031936011261051c57602060f054604051908152f35b823461051c57602036600319011261051c5760206108e4600435614318565b823461051c57602036600319011261051c576004356125f660018060a01b0360cb54163314613f4d565b678ac7230489e8000081116126485760808160008051602061578b8339815191529260da556040519060408252600c60408301526b06d6178446973636f756e74560a41b60608301526020820152a180f35b60405162461bcd60e51b8152602060048201526012602482015271105093d59157d3505617d11254d0d3d5539560721b6044820152606490fd5b823461051c578060031936011261051c576040516000906037546126a581613b99565b80835260019180831690811561272e57506001146126e6575b6126e2836126ce81870382613c1c565b604051918291602083526020830190613b06565b0390f35b6037600090815260209450916000805160206157cb8339815191525b82841061271b575050508101909101906126ce816126be565b8054858501870152928501928101612702565b6126e295506126ce93506020915091849260ff191682840152151560051b82010193506126be565b823461051c57604036600319011261051c57600435612773613ac6565b61278060dc54151561468d565b61278b8215156146c3565b612793614522565b82116127ba576108e4826127a860209461457e565b80936127b48284614730565b336150b4565b60405162461bcd60e51b815260206004820152601b60248201527a08aa486686c646c7440dad2dce840dadee4ca40e8d0c2dc40dac2f602b1b6044820152606490fd5b823461051c57602036600319011261051c576065546004359061282e908290309033906001600160a01b03166154df565b670de0b6b3a76400008082029082820414821517156128b75761285761285f9160355490613e0f565b60df54613ece565b60df5561286a614bb4565b6128768160ed54613ece565b60ed556128858160eb54613ece565b60eb556040519081527fe34918ff1c7084970068b53fd71ad6d8b04e9f15d3886cbf006443e6cdc52ea660203392a280f35b634e487b7160e01b83526011600452602483fd5b823461051c578060031936011261051c576097546040516001600160a01b039091168152602090f35b823461051c578060031936011261051c57602060f454604051908152f35b823461051c578060031936011261051c57602060df54604051908152f35b823461051c578060031936011261051c57602060db54604051908152f35b823461051c578060031936011261051c5760ca546040516001600160a01b039091168152602090f35b823461051c578060031936011261051c57602060d154604051908152f35b823461051c578060031936011261051c57602060e254604051908152f35b823461051c578060031936011261051c57602060d854604051908152f35b823461051c576129e036613c3f565b60ce549091906001600160a01b03163303612b1e576129ff8183614c13565b92603554612a0b613ff8565b9160de54958693612a2f84612a2a670de0b6b3a7640000978894614c13565b613e2f565b0484612a3d8560d354613e2f565b0480821015612b165750915b5081811315612b0e5750905b82820292828405148215171561163457602095612a78612a7e92612ab4956146f9565b90614714565b8060de55612a8e8260ee54614714565b60ee5560dd55612a9c614bb4565b612aa760e254614298565b60e2554260e35582614714565b60e455612abf614383565b60e2549060e4549260dd54906040519283528583015283604083015260608201527f115621a72d6f59323a1d752b116219634bc004cadb85d6bdc8e7eb254905722d60803392a3604051908152f35b905090612a55565b905091612a49565b60405162461bcd60e51b815260206004820152600d60248201526c13d3931657d4139317d1915151609a1b6044820152606490fd5b823461051c578060031936011261051c57612b6c615416565b609780546001600160a01b031981169091556000906001600160a01b031660008051602061576b8339815191528280a380f35b823461051c57602036600319011261051c576020906040906001600160a01b03612bc7613adc565b168152603383522054604051908152f35b823461051c57602036600319011261051c576004356002811015610b6d5760209060d50154604051908152f35b823461051c57604036600319011261051c57600435612c22613ac6565b9060dc54612c3181151561468d565b612c3c8215156146c3565b612c476108c3614522565b8211612d0657612c579082615315565b9060355460de5460008112600014612cad57506108e491602094612c9283612c8c87612c86819760de54614011565b92613ece565b906146f9565b60de555b612ca28260eb54613ece565b60eb556127b461449c565b600012612cc3575b50816108e491602094612c96565b90612cda60ee5492612cd58486614011565b6146f9565b908180056001148215171561163457602094612cfa85936108e495614714565b60ee5594509150612cb5565b60405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d617800006044820152606490fd5b823461051c57604036600319011261051c576020906040906001600160a01b03612d73613adc565b16815260e78352818120602435825283522054604051908152f35b823461051c57602036600319011261051c57600435612dbb8160ea54612db681831115614c2c565b614034565b60ea55612dca8160f154613ece565b60f155606554612de690829033906001600160a01b03166154a5565b6040519081528160208201527f1fb4f167278bb29c47ac4fd58ca1586b0626b52807f2991ef78abdbb97bb433360403392a280f35b823461051c578060031936011261051c57602060ea54604051908152f35b823461051c578060031936011261051c5761078b614383565b823461051c578060031936011261051c57602060e354604051908152f35b823461051c578060031936011261051c57602060f254604051908152f35b905034610b6d5781600319360112610b6d5760209054604051908152f35b823461051c578060031936011261051c57610102815460ff8160081c161580612f1f575b612ed990613dac565b61ffff1916178155612ee961449c565b612ef760ed5460eb54613ece565b60eb5561ff0019815416815560008051602061574b833981519152602060405160028152a180f35b50600260ff821610612ed0565b823461051c578060031936011261051c5760cd546040516001600160a01b039091168152602090f35b823461051c578060031936011261051c5760cf5460405160d05490916001600160a01b031690826000612f8783613b99565b8083526001938085169081156130175750600114612fc9575b50612fad92500383613c1c565b6126e26040519283928352604060208401526040830190613b06565b60d060009081526000805160206156eb83398151915294602093509091905b818310612fff575050612fad935082010185612fa0565b85548884018501529485019487945091830191612fe8565b9050612fad94506020925060ff191682840152151560051b82010185612fa0565b823461051c57602036600319011261051c576000805160206157eb8339815191526080613063613adc565b61306b615416565b6001600160a01b039081169061309a90613086831515613f15565b806097541683141590816130d35750613edb565b8060018060a01b031960cb54161760cb556040519060408252600760408301526636b0b730b3b2b960c91b60608301526020820152a180f35b905060cc541682141586610c10565b823461051c57602036600319011261051c5760008051602061578b833981519152608060043561311d60018060a01b0360cb54163314613f4d565b61313167016345785d8a0000821015613f88565b8060d455604051906040825260136040830152726d61784461696c79416363506e6c44656c746160681b60608301526020820152a180f35b823461051c578060031936011261051c57602060ef54604051908152f35b823461051c578060031936011261051c57602060de54604051908152f35b50505061000f613b46565b823461051c578060031936011261051c5760cb546040516001600160a01b039091168152602090f35b823461051c57602036600319011261051c576131f3613adc565b5060206108e46108c3614522565b823461051c578060031936011261051c5761078b61449c565b823461051c578060031936011261051c57602060d954604051908152f35b823461051c578060031936011261051c57602060d454604051908152f35b823461051c57604036600319011261051c5761208a906040613276613adc565b9133815260346020522060018060a01b0382166000526020526132a0602435604060002054613ece565b9033614e9e565b823461051c578060031936011261051c576065546040516001600160a01b039091168152602090f35b823461051c578060031936011261051c57602060ff60655460a01c16604051908152f35b823461051c578060031936011261051c576020670de0b6b3a7640000610ba160355460dc5490613e2f565b823461051c57606036600319011261051c5761208a9061333d613adc565b613345613ac6565b906133756044359361207d85604061335c866142a7565b6001600160a01b03871685526033602052932054614034565b613380833383614fa0565b614d40565b823461051c578060031936011261051c57602060e654604051908152f35b823461051c578060031936011261051c57602060e854604051908152f35b823461051c57602036600319011261051c576000805160206157eb83398151915260806133ec613adc565b6133f4615416565b6001600160a01b0316613408811515613f15565b8060018060a01b031960ce54161760ce55604051906040825260116040830152701bdc195b951c9859195cd41b9b11995959607a1b60608301526020820152a180f35b50505061000f613b65565b823461051c578060031936011261051c5760cf5460405160d0549183916001600160a01b039091169061348884613b99565b60019480861690811561358e5750600114613550575b508083949503915afa906134b06140d8565b911515036135135760208180518101031261000f576020015180156134da57602090604051908152f35b60405162461bcd60e51b81526020600482015260116024820152700474e535f544f4b454e5f50524943455f3607c1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601560248201527411d394d7d4149250d157d0d0531317d19052531151605a1b6044820152606490fd5b60d0845294506020836000805160206156eb8339815191525b87821061357d57505050938401938061349e565b805484830152908201908601613569565b60ff191683525080151502810194508061349e565b823461051c578060031936011261051c5760ce546040516001600160a01b039091168152602090f35b823461051c578060031936011261051c576020603554604051908152f35b823461051c578060031936011261051c57602060e554604051908152f35b823461051c578060031936011261051c57602060ec54604051908152f35b823461051c578060031936011261051c57602060ee54604051908152f35b823461051c578060031936011261051c57602060ed54604051908152f35b823461051c578060031936011261051c5761078b614433565b823461051c57602036600319011261051c5760206108e460dc546004356152f1565b823461051c57604036600319011261051c5761208a6136ba613adc565b6024359033614e9e565b823461051c578060031936011261051c576040516000906036546136e781613b99565b80835260019180831690811561272e575060011461370f576126e2836126ce81870382613c1c565b6036600090815260209450916000805160206156cb8339815191525b828410613744575050508101909101906126ce816126be565b805485850187015292850192810161372b565b823461051c57604036600319011261051c57600435613774613ac6565b81835260209160e98352604084209160018060a01b03908160ca54166040516331a9108f60e11b81528460048201528681602481855afa8015613a0a57849189916139ed575b501695338714801561398b575b8015613922575b6137d790614865565b6137ea6004870154600588015490613ece565b42106138ef57506003850190876138058354603554906152f1565b91613815610a5d8460de54614714565b803b15610b6d578190602460405180948193630852cd8d60e31b83528b60048401525af180156138e4576138b5575b5060008051602061570b83398151915293929161386661388a9260dd54614714565b60dd55613871614bb4565b61387e815460ee54614714565b60ee555460ef54614034565b60ef5561389c60018601548230614d40565b6138af6040519283921695339583614987565b0390a480f35b9161386661388a92996138d860008051602061570b833981519152979695613bd3565b99925050919293613844565b6040513d8b823e3d90fd5b6064906040519062461bcd60e51b82526004820152600c60248201526b1393d517d5539313d0d2d15160a21b6044820152fd5b5060405163e985e9c560e01b8152600481018890523360248201528181604481865afa80156138e4576137d7918a9161395e575b5090506137ce565b61397e9150833d8511613984575b6139768183613c1c565b810190614b5c565b8a613956565b503d61396c565b5060405163020604bf60e21b8152600481018690528181602481865afa9081156138e45789916139c0575b50841633146137c7565b6139e09150823d84116139e6575b6139d88183613c1c565b810190614b3d565b896139b6565b503d6139ce565b613a049150883d8a116139e6576139d88183613c1c565b896137ba565b6040513d8a823e3d90fd5b823461051c578060031936011261051c57602060f354604051908152f35b839034610b6d5781600319360112610b6d576065546370a0823160e01b8252306004830152602090829060249082906001600160a01b03165afa908115613abb578291613a86575b602082604051908152f35b90506020813d8211613ab3575b81613aa060209383613c1c565b81010312610b6d57602091505182613a7b565b3d9150613a93565b6040513d84823e3d90fd5b602435906001600160a01b038216820361000f57565b600435906001600160a01b038216820361000f57565b35906001600160a01b038216820361000f57565b919082519283825260005b848110613b32575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201613b11565b503461000f57602036600319011261000f5760206108e460043561454f565b503461000f57600036600319011261000f576020670de0b6b3a7640000610ba1610b98613b90613ff8565b60dd5490614c13565b90600182811c92168015613bc9575b6020831014613bb357565b634e487b7160e01b600052602260045260246000fd5b91607f1691613ba8565b6001600160401b038111611c0357604052565b60c081019081106001600160401b03821117611c0357604052565b604081019081106001600160401b03821117611c0357604052565b601f909101601f19168101906001600160401b03821190821017611c0357604052565b604090600319011261000f576004359060243590565b6001600160401b038111611c0357601f01601f191660200190565b929192613c7c82613c55565b91613c8a6040519384613c1c565b82948184528183011161000f578281602093846000960137010152565b9080601f8301121561000f57816020613cc293359101613c70565b90565b919060408382031261000f576040805191906001600160401b0390830181811184821017611c03576040528294613cfb81613af2565b8452602081013591821161000f570181601f8201121561000f576020918183613d2693359101613c70565b910152565b606090600319011261000f5760043590602435906044356001600160a01b038116810361000f5790565b606090600319011261000f57600435906001600160a01b0390602435828116810361000f5791604435908116810361000f5790565b503461000f57602036600319011261000f5760206108e460dc54600435615315565b15613db357565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b8115613e19570490565b634e487b7160e01b600052601260045260246000fd5b8181029291811591840414171561163457565b60cf80546001600160a01b0319166001600160a01b0392909216919091179055565b818110613e6f575050565b60008155600101613e64565b90601f8211613e88575050565b613eb59160d06000526020600020906020601f840160051c83019310611d8a57601f0160051c0190613e64565b565b9068056bc75e2d6310000091820180921161163457565b9190820180921161163457565b15613ee257565b60405162461bcd60e51b815260206004820152600b60248201526a57524f4e475f56414c554560a81b6044820152606490fd5b15613f1c57565b60405162461bcd60e51b81526020600482015260096024820152680414444524553535f360bc1b6044820152606490fd5b15613f5457565b60405162461bcd60e51b815260206004820152600c60248201526b27a7262cafa6a0a720a3a2a960a11b6044820152606490fd5b15613f8f57565b60405162461bcd60e51b81526020600482015260096024820152682122a627abafa6a4a760b91b6044820152606490fd5b15613fc757565b60405162461bcd60e51b8152602060048201526009602482015268082849eac8abe9a82b60bb1b6044820152606490fd5b60df54670de0b6b3a76400009081018091116116345790565b818102929160008212600160ff1b82141661163457818405149015171561163457565b9190820391821161163457565b614049613ff8565b60dd546000808213156140a057506140619082614034565b905b6064820291808304606414811517156116345768056bc75e2d631000000291808304670de0b6b3a7640000149015171561163457613cc291613e0f565b8181039180830560001914901517156140c457506140be9082613ece565b90614063565b634e487b7160e01b81526011600452602490fd5b3d15614103573d906140e982613c55565b916140f76040519384613c1c565b82523d6000602084013e565b606090565b60d254156141295760d260009081526000805160206156ab83398151915291565b634e487b7160e01b600052603260045260246000fd5b61416361414a614041565b68056bc75e2d631000008082101561420c575080614034565b60d654600091908111156141a857505060d254600210156141295760d26000527ff2192e1030363415d7b4fb0406540a0060e8e2fc8982f3f32289379e11fa65485490565b60d55410156141f95760d254600110156141e55760d290527ff2192e1030363415d7b4fb0406540a0060e8e2fc8982f3f32289379e11fa65475490565b634e487b7160e01b81526032600452602490fd5b50614202614108565b90549060031b1c90565b90614034565b600068056bc75e2d63100000821161423b5750506142376301e133809160da54613e2f565b0490565b60db54918281116142865761425d9061425760da549185614034565b90613e2f565b9068056bc75e2d630fffff1983019283116140c4575091612a2a614237926301e1338094613e0f565b506142379150916301e1338092613e2f565b60001981146116345760010190565b60e254918291600091825b6142ca6142bd614108565b90549060031b1c86613ece565b8611614310576001600160a01b038316845260e7602090815260408086208887529091528420546142ca916143089161430291613ece565b96614298565b9590506142b2565b945092505050565b61432860f3549160f45490614034565b6b1d6329f1c35ca4bfabb9f56160281b8082029291801590840490911417156116345761214a613cc292670de0b6b3a764000061436a60355460dc5490613e2f565b04600181111561437a5790613e0f565b50600190613e0f565b6201518061439360e65442614034565b101561439b57565b7fd103db6eec024592fa6d47db028ec6408076ac4762eb021a6e52b525828bab9b602068056bc75e2d631000006143d960355461425760d754613eb7565b048060e5554260e655604051908152a1565b620151806143fb60e15442614034565b101561440357565b600060e0554260e1557fa047de172c12fcf40e0ff45a86ac45befb232ae644862699ef140a8c5f763b41600080a1565b60008060018060a01b0360ce541660405182602082019163bef35b7960e01b83526004815261446181613c01565b51925af161446d6140d8565b501561447557565b7f46f2d6138acb3be39ad6ae5c9279b648c2a2c68743d0ddc18cc3a81cedecebd5600080a1565b7f9551c7fda0233728a7b7eae3d388b53a068086c3f7d613bdf74e6e58dd6b41ec60206144c7614c69565b6144d081614318565b908160f35560f455604051908152a1565b156144e857565b60405162461bcd60e51b815260206004820152601260248201527114115391125391d7d5d2551211149055d05360721b6044820152606490fd5b600060dd541360001461454957613cc260e55460355480821060001461420c575080614034565b60001990565b60001981148061456a575b613cc25760dc54613cc2916153a2565b50670de0b6b3a764000060dc54101561455a565b6000198114806145ba575b613cc257670de0b6b3a764000060dc546145a381846153a2565b92096145ac5790565b600181018091116116345790565b50670de0b6b3a764000060dc541015614589565b60ce54604051632e3fbb9960e21b81526020926001600160a01b039290919084908290600490829087165afa90811561468157600091614654575b5060009061464d57501660005260e7815260406000209060e2546000525260406000205460355460001981019081116116345780821015614648575090565b905090565b9250505090565b908482813d831161467a575b61466a8183613c1c565b8101031261051c57505138614609565b503d614660565b6040513d6000823e3d90fd5b1561469457565b60405162461bcd60e51b8152602060048201526007602482015266050524943455f360cc1b6044820152606490fd5b156146ca57565b60405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b6044820152606490fd5b8115613e1957600160ff1b8114600019831416611634570590565b9190916000838201938412911290801582169115161761163457565b9060355460de5460008112600014614771575080612c8c61476694612c8661475a9460de54614011565b60de555b60eb54613ece565b60eb55613eb561449c565b600012614784575b50614766915061475e565b61479590612cd560ee548095614011565b918280056001148315171561163457614766926147b191614714565b60ee5538614779565b6000906035548260de5481811260001461482057505090816147e16147f19360de54614011565b91841561481757612c8c91613ece565b60de555b15614806576147669060eb54613ece565b6148129060eb54614034565b614766565b612c8c91614034565b1361482d575b50506147f5565b61483e90612cd560ee548094614011565b806000039080820560001914901517156116345761485b91614714565b60ee553880614826565b1561486c57565b60405162461bcd60e51b815260206004820152600b60248201526a1393d517d0531313d5d15160aa1b6044820152606490fd5b156148a657565b60405162461bcd60e51b81526020600482015260126024820152711393d7d050d512559157d11254d0d3d5539560721b6044820152606490fd5b156148e757565b60405162461bcd60e51b81526020600482015260176024820152762122a627abafa6a4a72fa627a1a5afa22aa920aa24a7a760491b6044820152606490fd5b1561492d57565b60405162461bcd60e51b815260206004820152601760248201527620a127ab22afa6a0ac2fa627a1a5afa22aa920aa24a7a760491b6044820152606490fd5b6001600160a01b039091168152602081019190915260400190565b90815281546001600160a01b03166020820152600182015460408201526002820154606082015260038201546080820152600482015460a082015260059091015460c082015260e00190565b939291909283851115614b0a57614a6d6149fc856149f260e854614298565b978860e855614034565b614a5660009488865260e9602052604086209760018060a01b039788871660018060a01b03198b5416178a558260018b01558160028b01558460038b01554260048b015560058a0155614a4f8183614730565b30336150b4565b614a628160f054613ece565b60f05560ef54613ece565b60ef558260ca541690813b156114995791858192614aa294836040518097819582946340c10f1960e01b84526004840161496c565b03925af1908115614afe5750614aef575b50815416907f5d26cdffbd8401ba2a961d2094f7f008ee7bd735ac02a949721ee0fd0f0d5afc60405180614ae933948783614987565b0390a390565b614af890613bd3565b38614ab3565b604051903d90823e3d90fd5b60405162461bcd60e51b815260206004820152600b60248201526a1393d7d11254d0d3d5539560aa1b6044820152606490fd5b9081602091031261000f57516001600160a01b038116810361000f5790565b9081602091031261000f5751801515810361000f5790565b15614b7b57565b60405162461bcd60e51b81526020600482015260116024820152704e4f545f454e4f5547485f41535345545360781b6044820152606490fd5b614bbc61449c565b7f547c25b7a5677a006ff044a0e4b5e699598339825e7b42d3dc645117ceee80506020614bfe614bea613ff8565b60dd54600080821315614c0b575090614034565b8060dc55604051908152a1565b905090614034565b8181039291600013801582851316918412161761163457565b15614c3357565b60405162461bcd60e51b815260206004820152600e60248201526d414d4f554e545f544f4f5f42494760901b6044820152606490fd5b61a4b146148015614cd4575b614c7d574390565b60405163a3b1b31d60e01b815260208160048160645afa90811561468157600091614ca6575090565b906020823d8211614ccc575b81614cbf60209383613c1c565b8101031261051c57505190565b3d9150614cb2565b5062066eed4614614c75565b15614ce757565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6001600160a01b03908116918215614e4b5716918215614dfa5760008281526033602052604081205491808310614da657604082826000805160206157ab83398151915295876020965260338652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215614f4f5716918215614eff5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260348252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b9060018060a01b0380831660005260346020526040600020908216600052602052604060002054926000198403614fd8575b50505050565b808410614ff357614fea930391614e9e565b38808080614fd2565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b90604051602081019063313ce56760e01b82526004815261505881613c01565b5160009384928392916001600160a01b03165afa6150746140d8565b90806150a8575b615085575b508190565b602081805181010312611499576020015160ff8111615080576001925060ff1690565b5060208151101561507b565b909260018060a01b0380946150d08583606554168630916154df565b16938415615148577fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79282615109604094603554613ece565b603555866000526033602052836000208181540190558660006000805160206157ab83398151915260208751858152a3835195865260208601521692a3565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b6001600160a01b0380841695818316949093919284908887036152e0575b50505085156152915785600052603360205260409283600020548181106152425790807ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9594939289600052603360205203846000205580603554036035556000886000805160206157ab83398151915260208751858152a3615233878385606554166154a5565b835196875260208701521693a4565b845162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b6152e992614fa0565b3883816151ab565b906152fc8183615315565b918115613e1957670de0b6b3a764000090096145ac5790565b90670de0b6b3a7640000906000198284099282810292838086109503948086039514615395578483111561000f578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b505090613cc29250613e0f565b906000198183098183029182808310920391808303921461540557670de0b6b3a7640000908282111561000f577faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac10669940990828211900360ee1b910360121c170290565b5050670de0b6b3a764000091500490565b6097546001600160a01b0316330361542a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b609780546001600160a01b039283166001600160a01b03198216811790925590911660008051602061576b833981519152600080a3565b6154da613eb593926154cc60405194859263a9059cbb60e01b60208501526024840161496c565b03601f198101845283613c1c565b615533565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b03841117611c0357613eb5926040525b604051615591916001600160a01b031661554c82613c01565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161558b6140d8565b9161560d565b8051908161559e57505050565b82806155ae938301019101614b5c565b156155b65750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9192901561566f5750815115615621575090565b3b1561562a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156156825750805190602001fd5b60405162461bcd60e51b8152602060048201529081906156a6906024830190613b06565b0390fdfef2192e1030363415d7b4fb0406540a0060e8e2fc8982f3f32289379e11fa65464a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8e89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcbe37405a4f414fe3119839681cc26ea3462fc575fd2f81734417e52144d3f34b92763c7adb1b7018e25499ef5553ec78e35bb46be6384b393861c35d501825dce7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024988be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0127735ae9d047cae55da37db2c8ee184c735aacd68cef068d4e70be6a41661d9ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae60f89fdb372abe626eac485ef96b2a09f1cfbd7f225dd1e2b491a2b4069c2376a164736f6c6343000811000a",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "See {IERC4626-asset}. "
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "convertToAssets(uint256)": {
        "details": "See {IERC4626-convertToAssets}. "
      },
      "convertToShares(uint256)": {
        "details": "See {IERC4626-convertToShares}. "
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,address)": {
        "details": "See {IERC4626-deposit}. "
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "maxMint(address)": {
        "details": "See {IERC4626-maxMint}. "
      },
      "maxRedeem(address)": {
        "details": "See {IERC4626-maxRedeem}. "
      },
      "maxWithdraw(address)": {
        "details": "See {IERC4626-maxWithdraw}. "
      },
      "mint(uint256,address)": {
        "details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "previewDeposit(uint256)": {
        "details": "See {IERC4626-previewDeposit}. "
      },
      "previewMint(uint256)": {
        "details": "See {IERC4626-previewMint}. "
      },
      "previewRedeem(uint256)": {
        "details": "See {IERC4626-previewRedeem}. "
      },
      "previewWithdraw(uint256)": {
        "details": "See {IERC4626-previewWithdraw}. "
      },
      "redeem(uint256,address,address)": {
        "details": "See {IERC4626-redeem}. "
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "details": "See {IERC4626-totalAssets}. "
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,address,address)": {
        "details": "See {IERC4626-withdraw}. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 37290,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 37293,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 38651,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 38695,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 38701,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 38703,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 38705,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 38707,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 39287,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 39308,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "_asset",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20Upgradeable)40722"
      },
      {
        "astId": 39310,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "_decimals",
        "offset": 20,
        "slot": "101",
        "type": "t_uint8"
      },
      {
        "astId": 39993,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 41766,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 41886,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 31047,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "gnsToken",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 31050,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "lockedDepositNft",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(INft)35738"
      },
      {
        "astId": 31053,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "manager",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 31056,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "admin",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 31058,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "pnlHandler",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 31061,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "openTradesPnlFeed",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IOpenTradesPnlFeed)35749"
      },
      {
        "astId": 31064,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "gnsPriceProvider",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(GnsPriceProvider)31069_storage"
      },
      {
        "astId": 31105,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "MIN_LOCK_DURATION",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 31111,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "WITHDRAW_EPOCHS_LOCKS",
        "offset": 0,
        "slot": "210",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 31113,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "maxAccOpenPnlDelta",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 31115,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "maxDailyAccPnlDelta",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 31119,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "withdrawLockThresholdsP",
        "offset": 0,
        "slot": "213",
        "type": "t_array(t_uint256)2_storage"
      },
      {
        "astId": 31121,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "maxSupplyIncreaseDailyP",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 31123,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "lossesBurnP",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 31125,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "maxGnsSupplyMintDailyP",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 31127,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "maxDiscountP",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 31129,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "maxDiscountThresholdP",
        "offset": 0,
        "slot": "219",
        "type": "t_uint256"
      },
      {
        "astId": 31131,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "shareToAssetsPrice",
        "offset": 0,
        "slot": "220",
        "type": "t_uint256"
      },
      {
        "astId": 31133,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "accPnlPerTokenUsed",
        "offset": 0,
        "slot": "221",
        "type": "t_int256"
      },
      {
        "astId": 31135,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "accPnlPerToken",
        "offset": 0,
        "slot": "222",
        "type": "t_int256"
      },
      {
        "astId": 31137,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "accRewardsPerToken",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      },
      {
        "astId": 31139,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "dailyAccPnlDelta",
        "offset": 0,
        "slot": "224",
        "type": "t_int256"
      },
      {
        "astId": 31141,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "lastDailyAccPnlDeltaReset",
        "offset": 0,
        "slot": "225",
        "type": "t_uint256"
      },
      {
        "astId": 31144,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "currentEpoch",
        "offset": 0,
        "slot": "226",
        "type": "t_uint256"
      },
      {
        "astId": 31147,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "currentEpochStart",
        "offset": 0,
        "slot": "227",
        "type": "t_uint256"
      },
      {
        "astId": 31150,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "currentEpochPositiveOpenPnl",
        "offset": 0,
        "slot": "228",
        "type": "t_uint256"
      },
      {
        "astId": 31152,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "currentMaxSupply",
        "offset": 0,
        "slot": "229",
        "type": "t_uint256"
      },
      {
        "astId": 31154,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "lastMaxSupplyUpdate",
        "offset": 0,
        "slot": "230",
        "type": "t_uint256"
      },
      {
        "astId": 31160,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "withdrawRequests",
        "offset": 0,
        "slot": "231",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 31162,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "lockedDepositsCount",
        "offset": 0,
        "slot": "232",
        "type": "t_uint256"
      },
      {
        "astId": 31167,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "lockedDeposits",
        "offset": 0,
        "slot": "233",
        "type": "t_mapping(t_uint256,t_struct(LockedDeposit)35631_storage)"
      },
      {
        "astId": 31169,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "assetsToDeplete",
        "offset": 0,
        "slot": "234",
        "type": "t_uint256"
      },
      {
        "astId": 31171,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "totalDeposited",
        "offset": 0,
        "slot": "235",
        "type": "t_uint256"
      },
      {
        "astId": 31173,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "totalClosedPnl",
        "offset": 0,
        "slot": "236",
        "type": "t_int256"
      },
      {
        "astId": 31175,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "totalRewards",
        "offset": 0,
        "slot": "237",
        "type": "t_uint256"
      },
      {
        "astId": 31177,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "totalLiability",
        "offset": 0,
        "slot": "238",
        "type": "t_int256"
      },
      {
        "astId": 31179,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "totalLockedDiscounts",
        "offset": 0,
        "slot": "239",
        "type": "t_uint256"
      },
      {
        "astId": 31181,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "totalDiscounts",
        "offset": 0,
        "slot": "240",
        "type": "t_uint256"
      },
      {
        "astId": 31183,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "totalDepleted",
        "offset": 0,
        "slot": "241",
        "type": "t_uint256"
      },
      {
        "astId": 31185,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "totalRefilled",
        "offset": 0,
        "slot": "242",
        "type": "t_uint256"
      },
      {
        "astId": 31187,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "accBlockWeightedMarketCap",
        "offset": 0,
        "slot": "243",
        "type": "t_uint256"
      },
      {
        "astId": 31189,
        "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
        "label": "accBlockWeightedMarketCapLastStored",
        "offset": 0,
        "slot": "244",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)40722": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(INft)35738": {
        "encoding": "inplace",
        "label": "contract INft",
        "numberOfBytes": "20"
      },
      "t_contract(IOpenTradesPnlFeed)35749": {
        "encoding": "inplace",
        "label": "contract IOpenTradesPnlFeed",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(LockedDeposit)35631_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IGToken.LockedDeposit)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedDeposit)35631_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GnsPriceProvider)31069_storage": {
        "encoding": "inplace",
        "label": "struct GTokenV6_3_2.GnsPriceProvider",
        "members": [
          {
            "astId": 31066,
            "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 31068,
            "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
            "label": "signature",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LockedDeposit)35631_storage": {
        "encoding": "inplace",
        "label": "struct IGToken.LockedDeposit",
        "members": [
          {
            "astId": 35620,
            "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 35622,
            "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 35624,
            "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
            "label": "assetsDeposited",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 35626,
            "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
            "label": "assetsDiscount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 35628,
            "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
            "label": "atTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 35630,
            "contract": "contracts/contracts/GTokenV6_3_2.sol:GTokenV6_3_2",
            "label": "lockDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}