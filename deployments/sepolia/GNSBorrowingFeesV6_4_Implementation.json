{
  "address": "0xD2b87AeaB1651B85A604814F62fc651261f29109",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        }
      ],
      "name": "GroupAccFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "increase",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "amount",
          "type": "uint112"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "oiLong",
          "type": "uint112"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "oiShort",
          "type": "uint112"
        }
      ],
      "name": "GroupOiUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint72",
          "name": "maxOi",
          "type": "uint72"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        }
      ],
      "name": "GroupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        }
      ],
      "name": "PairAccFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "prevGroupIndex",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newGroupIndex",
          "type": "uint16"
        }
      ],
      "name": "PairGroupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint72",
          "name": "maxOi",
          "type": "uint72"
        }
      ],
      "name": "PairParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        }
      ],
      "name": "TradeActionHandled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "initialPairAccFee",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "initialGroupAccFee",
          "type": "uint64"
        }
      ],
      "name": "TradeInitialAccFeesStored",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAllPairs",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "groupIndex",
                  "type": "uint16"
                },
                {
                  "internalType": "uint48",
                  "name": "block",
                  "type": "uint48"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_placeholder",
                  "type": "uint64"
                }
              ],
              "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
              "name": "groups",
              "type": "tuple[]"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Pair[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "long",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "short",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "max",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "_placeholder",
              "type": "uint40"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairOi[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        }
      ],
      "name": "getGroup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "oiLong",
              "type": "uint112"
            },
            {
              "internalType": "uint112",
              "name": "oiShort",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "maxOi",
              "type": "uint80"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Group",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "getGroupPendingAccFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFee",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getGroupPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "groupAccFeeDelta",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "indices",
          "type": "uint16[]"
        }
      ],
      "name": "getGroups",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "oiLong",
              "type": "uint112"
            },
            {
              "internalType": "uint112",
              "name": "oiShort",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "maxOi",
              "type": "uint80"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Group[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint48[]",
          "name": "",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "groupIndex",
                  "type": "uint16"
                },
                {
                  "internalType": "uint48",
                  "name": "block",
                  "type": "uint48"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_placeholder",
                  "type": "uint64"
                }
              ],
              "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
              "name": "groups",
              "type": "tuple[]"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Pair",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "long",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "short",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "max",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "_placeholder",
              "type": "uint40"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairOi",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint64",
              "name": "initialAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "initialAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "prevGroupAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "prevGroupAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "pairAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "pairAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "_placeholder",
              "type": "uint64"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
          "name": "pairGroups",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accPairFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accGroupFee",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "_placeholder",
              "type": "uint80"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees",
          "name": "initialFees",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getPairGroupAccFeesDeltas",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "deltaGroup",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "deltaPair",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "beforeTradeOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairGroupIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairMaxOi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairOpenInterestDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "getPairPendingAccFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFee",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getPairPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "pairAccFeeDelta",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "oiLong",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oiShort",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "currentBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accLastUpdatedBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PendingAccFeesInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "newAccFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "newAccFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "delta",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "long",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getTradeBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradeInitialAccFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accPairFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accGroupFee",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "_placeholder",
              "type": "uint80"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees",
          "name": "borrowingFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rollover",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "funding",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "openedAfterUpdate",
              "type": "bool"
            }
          ],
          "internalType": "struct GNSPairInfosInterfaceV6.TradeInitialAccFees",
          "name": "otherFees",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "long",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.LiqPriceInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getTradeLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groupFeeExponents",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "oiLong",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "oiShort",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "accLastUpdatedBlock",
          "type": "uint48"
        },
        {
          "internalType": "uint80",
          "name": "maxOi",
          "type": "uint80"
        },
        {
          "internalType": "uint256",
          "name": "lastAccBlockWeightedMarketCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "handleTradeAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accPairFee",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accGroupFee",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "block",
          "type": "uint48"
        },
        {
          "internalType": "uint80",
          "name": "_placeholder",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairOis",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "long",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "short",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "max",
          "type": "uint72"
        },
        {
          "internalType": "uint40",
          "name": "_placeholder",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "accLastUpdatedBlock",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "lastAccBlockWeightedMarketCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.GroupParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setGroupParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "indices",
          "type": "uint16[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.GroupParams[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "name": "setGroupParamsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPairParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairParams[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "name": "setPairParamsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        }
      ],
      "name": "withinMaxGroupOi",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x25158970335e69978c3ef5eaa29db21ab2370a88ea408e4023da01a7a6691ac2",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0xD2b87AeaB1651B85A604814F62fc651261f29109",
    "transactionIndex": 78,
    "gasUsed": "3491279",
    "logsBloom": "0x
    "blockHash": "0x5e6254da8e7fadf09c813917031b2ba9165cd97fb0f9fadac32c04604e2c1364",
    "transactionHash": "0x25158970335e69978c3ef5eaa29db21ab2370a88ea408e4023da01a7a6691ac2",
    "logs": [],
    "blockNumber": 6030632,
    "cumulativeGasUsed": "14675830",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "edab1d0feb7ffa5be1c95101a46d74db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"}],\"name\":\"GroupAccFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"}],\"name\":\"GroupOiUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"name\":\"GroupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"}],\"name\":\"PairAccFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"prevGroupIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newGroupIndex\",\"type\":\"uint16\"}],\"name\":\"PairGroupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"name\":\"PairParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"}],\"name\":\"TradeActionHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialPairAccFee\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialGroupAccFee\",\"type\":\"uint64\"}],\"name\":\"TradeInitialAccFeesStored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAllPairs\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Pair[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairOi[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"}],\"name\":\"getGroup\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Group\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"getGroupPendingAccFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFee\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getGroupPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"groupAccFeeDelta\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"indices\",\"type\":\"uint16[]\"}],\"name\":\"getGroups\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Group[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint48[]\",\"name\":\"\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Pair\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairOi\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]\",\"name\":\"pairGroups\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees\",\"name\":\"initialFees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getPairGroupAccFeesDeltas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"deltaGroup\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deltaPair\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"beforeTradeOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairGroupIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairMaxOi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairOpenInterestDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"getPairPendingAccFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFee\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getPairPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeDelta\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"oiLong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oiShort\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PendingAccFeesInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"newAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"delta\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getTradeBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeInitialAccFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees\",\"name\":\"borrowingFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rollover\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"funding\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"openedAfterUpdate\",\"type\":\"bool\"}],\"internalType\":\"struct GNSPairInfosInterfaceV6.TradeInitialAccFees\",\"name\":\"otherFees\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.LiqPriceInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getTradeLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupFeeExponents\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"handleTradeAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initialAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairOis\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.GroupParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setGroupParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"indices\",\"type\":\"uint16[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.GroupParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setGroupParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPairParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setPairParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"}],\"name\":\"withinMaxGroupOi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GNSBorrowingFeesV6_4.sol\":\"GNSBorrowingFeesV6_4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/GNSBorrowingFeesV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../libraries/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\\\";\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"../interfaces/GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\n\\ncontract GNSBorrowingFeesV6_4 is Initializable, GNSBorrowingFeesInterfaceV6_4 {\\n    // Constants\\n    uint constant P_1 = 1e10;\\n    uint constant P_2 = 1e40;\\n\\n    // Addresses\\n    StorageInterfaceV5 public storageT;\\n    GNSPairInfosInterfaceV6 public pairInfos;\\n\\n    // State\\n    mapping(uint16 => Group) public groups;\\n    mapping(uint => Pair) public pairs;\\n    mapping(address => mapping(uint => mapping(uint => InitialAccFees)))\\n        public initialAccFees;\\n    mapping(uint => PairOi) public pairOis;\\n    mapping(uint => uint48) public groupFeeExponents;\\n\\n    function initialize(\\n        StorageInterfaceV5 _storageT,\\n        GNSPairInfosInterfaceV6 _pairInfos\\n    ) external initializer {\\n        require(\\n            address(_storageT) != address(0) &&\\n                address(_pairInfos) != address(0),\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        storageT = _storageT;\\n        pairInfos = _pairInfos;\\n    }\\n\\n    // Modifiers\\n    modifier onlyManager() {\\n        require(msg.sender == pairInfos.manager(), \\\"MANAGER_ONLY\\\");\\n        _;\\n    }\\n\\n    modifier onlyCallbacks() {\\n        require(msg.sender == storageT.callbacks(), \\\"CALLBACKS_ONLY\\\");\\n        _;\\n    }\\n\\n    // Manage pair params\\n    function setPairParams(\\n        uint pairIndex,\\n        PairParams calldata value\\n    ) external onlyManager {\\n        _setPairParams(pairIndex, value);\\n    }\\n\\n    function setPairParamsArray(\\n        uint[] calldata indices,\\n        PairParams[] calldata values\\n    ) external onlyManager {\\n        uint len = indices.length;\\n        require(len == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i; i < len; ) {\\n            _setPairParams(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairParams(uint pairIndex, PairParams calldata value) private {\\n        require(\\n            value.feeExponent >= 1 && value.feeExponent <= 3,\\n            \\\"WRONG_EXPONENT\\\"\\n        );\\n\\n        Pair storage p = pairs[pairIndex];\\n\\n        uint16 prevGroupIndex = getPairGroupIndex(pairIndex);\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        _setPairPendingAccFees(pairIndex, currentBlock);\\n\\n        if (value.groupIndex != prevGroupIndex) {\\n            _setGroupPendingAccFees(prevGroupIndex, currentBlock);\\n            _setGroupPendingAccFees(value.groupIndex, currentBlock);\\n\\n            (uint oiLong, uint oiShort) = getPairOpenInterestDai(pairIndex);\\n\\n            // Only remove OI from old group if old group is not 0\\n            _setGroupOi(prevGroupIndex, true, false, oiLong);\\n            _setGroupOi(prevGroupIndex, false, false, oiShort);\\n\\n            // Add OI to new group if it's not group 0 (even if old group is 0)\\n            // So when we assign a pair to a group, it takes into account its OI\\n            // And group 0 OI will always be 0 but it doesn't matter since it's not used\\n            _setGroupOi(value.groupIndex, true, true, oiLong);\\n            _setGroupOi(value.groupIndex, false, true, oiShort);\\n\\n            Group memory newGroup = groups[value.groupIndex];\\n            Group memory prevGroup = groups[prevGroupIndex];\\n\\n            p.groups.push(\\n                PairGroup(\\n                    value.groupIndex,\\n                    ChainUtils.getUint48BlockNumber(currentBlock),\\n                    newGroup.accFeeLong,\\n                    newGroup.accFeeShort,\\n                    prevGroup.accFeeLong,\\n                    prevGroup.accFeeShort,\\n                    p.accFeeLong,\\n                    p.accFeeShort,\\n                    0 // placeholder\\n                )\\n            );\\n\\n            emit PairGroupUpdated(pairIndex, prevGroupIndex, value.groupIndex);\\n        }\\n\\n        p.feePerBlock = value.feePerBlock;\\n        p.feeExponent = value.feeExponent;\\n        pairOis[pairIndex].max = value.maxOi;\\n\\n        emit PairParamsUpdated(\\n            pairIndex,\\n            value.groupIndex,\\n            value.feePerBlock,\\n            value.feeExponent,\\n            value.maxOi\\n        );\\n    }\\n\\n    // Manage group params\\n    function setGroupParams(\\n        uint16 groupIndex,\\n        GroupParams calldata value\\n    ) external onlyManager {\\n        _setGroupParams(groupIndex, value);\\n    }\\n\\n    function setGroupParamsArray(\\n        uint16[] calldata indices,\\n        GroupParams[] calldata values\\n    ) external onlyManager {\\n        uint len = indices.length;\\n        require(len == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i; i < len; ) {\\n            _setGroupParams(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setGroupParams(\\n        uint16 groupIndex,\\n        GroupParams calldata value\\n    ) private {\\n        require(groupIndex > 0, \\\"GROUP_0\\\");\\n        require(\\n            value.feeExponent >= 1 && value.feeExponent <= 3,\\n            \\\"WRONG_EXPONENT\\\"\\n        );\\n\\n        _setGroupPendingAccFees(groupIndex, ChainUtils.getBlockNumber());\\n\\n        Group storage g = groups[groupIndex];\\n        g.feePerBlock = value.feePerBlock;\\n        g.maxOi = uint80(value.maxOi);\\n        groupFeeExponents[groupIndex] = value.feeExponent;\\n\\n        emit GroupUpdated(\\n            groupIndex,\\n            value.feePerBlock,\\n            value.maxOi,\\n            value.feeExponent\\n        );\\n    }\\n\\n    // Group OI setter\\n    function _setGroupOi(\\n        uint16 groupIndex,\\n        bool long,\\n        bool increase,\\n        uint amount // 1e18\\n    ) private {\\n        Group storage group = groups[groupIndex];\\n        uint112 amountFinal;\\n\\n        if (groupIndex > 0) {\\n            amount = (amount * P_1) / 1e18; // 1e10\\n            require(amount <= type(uint112).max, \\\"OVERFLOW\\\");\\n\\n            amountFinal = uint112(amount);\\n\\n            if (long) {\\n                group.oiLong = increase\\n                    ? group.oiLong + amountFinal\\n                    : group.oiLong -\\n                        (\\n                            group.oiLong > amountFinal\\n                                ? amountFinal\\n                                : group.oiLong\\n                        );\\n            } else {\\n                group.oiShort = increase\\n                    ? group.oiShort + amountFinal\\n                    : group.oiShort -\\n                        (\\n                            group.oiShort > amountFinal\\n                                ? amountFinal\\n                                : group.oiShort\\n                        );\\n            }\\n        }\\n\\n        emit GroupOiUpdated(\\n            groupIndex,\\n            long,\\n            increase,\\n            amountFinal,\\n            group.oiLong,\\n            group.oiShort\\n        );\\n    }\\n\\n    // Acc fees getters for pairs and groups\\n    function getPendingAccFees(\\n        PendingAccFeesInput memory input\\n    )\\n        public\\n        pure\\n        returns (uint64 newAccFeeLong, uint64 newAccFeeShort, uint64 delta)\\n    {\\n        require(input.currentBlock >= input.accLastUpdatedBlock, \\\"BLOCK_ORDER\\\");\\n\\n        bool moreShorts = input.oiLong < input.oiShort;\\n        uint netOi = moreShorts\\n            ? input.oiShort - input.oiLong\\n            : input.oiLong - input.oiShort;\\n\\n        uint _delta = input.maxOi > 0 && input.feeExponent > 0\\n            ? ((input.currentBlock - input.accLastUpdatedBlock) *\\n                input.feePerBlock *\\n                ((netOi * 1e10) / input.maxOi) ** input.feeExponent) /\\n                (1e18 ** input.feeExponent)\\n            : 0; // 1e10 (%)\\n\\n        require(_delta <= type(uint64).max, \\\"OVERFLOW\\\");\\n        delta = uint64(_delta);\\n\\n        newAccFeeLong = moreShorts\\n            ? input.accFeeLong\\n            : input.accFeeLong + delta;\\n        newAccFeeShort = moreShorts\\n            ? input.accFeeShort + delta\\n            : input.accFeeShort;\\n    }\\n\\n    function getPairGroupAccFeesDeltas(\\n        uint i,\\n        PairGroup[] memory pairGroups,\\n        InitialAccFees memory initialFees,\\n        uint pairIndex,\\n        bool long,\\n        uint currentBlock\\n    )\\n        public\\n        view\\n        returns (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen)\\n    {\\n        PairGroup memory group = pairGroups[i];\\n\\n        beforeTradeOpen = group.block < initialFees.block;\\n\\n        if (i == pairGroups.length - 1) {\\n            // Last active group\\n            deltaGroup = getGroupPendingAccFee(\\n                group.groupIndex,\\n                currentBlock,\\n                long\\n            );\\n            deltaPair = getPairPendingAccFee(pairIndex, currentBlock, long);\\n        } else {\\n            // Previous groups\\n            PairGroup memory nextGroup = pairGroups[i + 1];\\n\\n            // If it's not the first group to be before the trade was opened then fee is 0\\n            if (beforeTradeOpen && nextGroup.block <= initialFees.block) {\\n                return (0, 0, beforeTradeOpen);\\n            }\\n\\n            deltaGroup = long\\n                ? nextGroup.prevGroupAccFeeLong\\n                : nextGroup.prevGroupAccFeeShort;\\n            deltaPair = long\\n                ? nextGroup.pairAccFeeLong\\n                : nextGroup.pairAccFeeShort;\\n        }\\n\\n        if (beforeTradeOpen) {\\n            deltaGroup -= initialFees.accGroupFee;\\n            deltaPair -= initialFees.accPairFee;\\n        } else {\\n            deltaGroup -= (\\n                long ? group.initialAccFeeLong : group.initialAccFeeShort\\n            );\\n            deltaPair -= (long ? group.pairAccFeeLong : group.pairAccFeeShort);\\n        }\\n    }\\n\\n    // Pair acc fees helpers\\n    function getPairPendingAccFees(\\n        uint pairIndex,\\n        uint currentBlock\\n    )\\n        public\\n        view\\n        returns (uint64 accFeeLong, uint64 accFeeShort, uint64 pairAccFeeDelta)\\n    {\\n        Pair memory pair = pairs[pairIndex];\\n\\n        (uint pairOiLong, uint pairOiShort) = getPairOpenInterestDai(pairIndex);\\n\\n        (accFeeLong, accFeeShort, pairAccFeeDelta) = getPendingAccFees(\\n            PendingAccFeesInput(\\n                pair.accFeeLong,\\n                pair.accFeeShort,\\n                pairOiLong,\\n                pairOiShort,\\n                pair.feePerBlock,\\n                currentBlock,\\n                pair.accLastUpdatedBlock,\\n                pairOis[pairIndex].max,\\n                pair.feeExponent\\n            )\\n        );\\n    }\\n\\n    function getPairPendingAccFee(\\n        uint pairIndex,\\n        uint currentBlock,\\n        bool long\\n    ) public view returns (uint64 accFee) {\\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getPairPendingAccFees(\\n            pairIndex,\\n            currentBlock\\n        );\\n        return long ? accFeeLong : accFeeShort;\\n    }\\n\\n    function _setPairPendingAccFees(\\n        uint pairIndex,\\n        uint currentBlock\\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\\n        (accFeeLong, accFeeShort, ) = getPairPendingAccFees(\\n            pairIndex,\\n            currentBlock\\n        );\\n\\n        Pair storage pair = pairs[pairIndex];\\n\\n        (pair.accFeeLong, pair.accFeeShort) = (accFeeLong, accFeeShort);\\n        pair.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(\\n            currentBlock\\n        );\\n\\n        emit PairAccFeesUpdated(\\n            pairIndex,\\n            currentBlock,\\n            pair.accFeeLong,\\n            pair.accFeeShort\\n        );\\n    }\\n\\n    // Group acc fees helpers\\n    function getGroupPendingAccFees(\\n        uint16 groupIndex,\\n        uint currentBlock\\n    )\\n        public\\n        view\\n        returns (uint64 accFeeLong, uint64 accFeeShort, uint64 groupAccFeeDelta)\\n    {\\n        Group memory group = groups[groupIndex];\\n\\n        (accFeeLong, accFeeShort, groupAccFeeDelta) = getPendingAccFees(\\n            PendingAccFeesInput(\\n                group.accFeeLong,\\n                group.accFeeShort,\\n                (uint(group.oiLong) * 1e18) / P_1,\\n                (uint(group.oiShort) * 1e18) / P_1,\\n                group.feePerBlock,\\n                currentBlock,\\n                group.accLastUpdatedBlock,\\n                uint72(group.maxOi),\\n                groupFeeExponents[groupIndex]\\n            )\\n        );\\n    }\\n\\n    function getGroupPendingAccFee(\\n        uint16 groupIndex,\\n        uint currentBlock,\\n        bool long\\n    ) public view returns (uint64 accFee) {\\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getGroupPendingAccFees(\\n            groupIndex,\\n            currentBlock\\n        );\\n        return long ? accFeeLong : accFeeShort;\\n    }\\n\\n    function _setGroupPendingAccFees(\\n        uint16 groupIndex,\\n        uint currentBlock\\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\\n        (accFeeLong, accFeeShort, ) = getGroupPendingAccFees(\\n            groupIndex,\\n            currentBlock\\n        );\\n\\n        Group storage group = groups[groupIndex];\\n\\n        (group.accFeeLong, group.accFeeShort) = (accFeeLong, accFeeShort);\\n        group.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(\\n            currentBlock\\n        );\\n\\n        emit GroupAccFeesUpdated(\\n            groupIndex,\\n            currentBlock,\\n            group.accFeeLong,\\n            group.accFeeShort\\n        );\\n    }\\n\\n    // Interaction with callbacks\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external override {\\n        uint16 groupIndex = getPairGroupIndex(pairIndex);\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        (\\n            uint64 pairAccFeeLong,\\n            uint64 pairAccFeeShort\\n        ) = _setPairPendingAccFees(pairIndex, currentBlock);\\n        (\\n            uint64 groupAccFeeLong,\\n            uint64 groupAccFeeShort\\n        ) = _setGroupPendingAccFees(groupIndex, currentBlock);\\n\\n        _setGroupOi(groupIndex, long, open, positionSizeDai);\\n\\n        if (open) {\\n            InitialAccFees memory initialFees = InitialAccFees(\\n                long ? pairAccFeeLong : pairAccFeeShort,\\n                long ? groupAccFeeLong : groupAccFeeShort,\\n                ChainUtils.getUint48BlockNumber(currentBlock),\\n                0 // placeholder\\n            );\\n\\n            initialAccFees[trader][pairIndex][index] = initialFees;\\n\\n            emit TradeInitialAccFeesStored(\\n                trader,\\n                pairIndex,\\n                index,\\n                initialFees.accPairFee,\\n                initialFees.accGroupFee\\n            );\\n        }\\n\\n        emit TradeActionHandled(\\n            trader,\\n            pairIndex,\\n            index,\\n            open,\\n            long,\\n            positionSizeDai\\n        );\\n    }\\n\\n    // Important trade getters\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory input\\n    ) public view override returns (uint fee) {\\n        InitialAccFees memory initialFees = initialAccFees[input.trader][\\n            input.pairIndex\\n        ][input.index];\\n        PairGroup[] memory pairGroups = pairs[input.pairIndex].groups;\\n\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        PairGroup memory firstPairGroup;\\n        if (pairGroups.length > 0) {\\n            firstPairGroup = pairGroups[0];\\n        }\\n\\n        // If pair has had no group after trade was opened, initialize with pair borrowing fee\\n        if (\\n            pairGroups.length == 0 || firstPairGroup.block > initialFees.block\\n        ) {\\n            fee = ((\\n                pairGroups.length == 0\\n                    ? getPairPendingAccFee(\\n                        input.pairIndex,\\n                        currentBlock,\\n                        input.long\\n                    )\\n                    : (\\n                        input.long\\n                            ? firstPairGroup.pairAccFeeLong\\n                            : firstPairGroup.pairAccFeeShort\\n                    )\\n            ) - initialFees.accPairFee);\\n        }\\n\\n        // Sum of max(pair fee, group fee) for all groups the pair was in while trade was open\\n        for (uint i = pairGroups.length; i > 0; ) {\\n            (\\n                uint64 deltaGroup,\\n                uint64 deltaPair,\\n                bool beforeTradeOpen\\n            ) = getPairGroupAccFeesDeltas(\\n                    i - 1,\\n                    pairGroups,\\n                    initialFees,\\n                    input.pairIndex,\\n                    input.long,\\n                    currentBlock\\n                );\\n\\n            fee += (deltaGroup > deltaPair ? deltaGroup : deltaPair);\\n\\n            // Exit loop at first group before trade was open\\n            if (beforeTradeOpen) break;\\n            unchecked {\\n                --i;\\n            }\\n        }\\n\\n        fee = (input.collateral * input.leverage * fee) / P_1 / 100; // 1e18 (DAI)\\n    }\\n\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata input\\n    ) external view override returns (uint) {\\n        return\\n            pairInfos.getTradeLiquidationPricePure(\\n                input.openPrice,\\n                input.long,\\n                input.collateral,\\n                input.leverage,\\n                pairInfos.getTradeRolloverFee(\\n                    input.trader,\\n                    input.pairIndex,\\n                    input.index,\\n                    input.collateral\\n                ) +\\n                    getTradeBorrowingFee(\\n                        BorrowingFeeInput(\\n                            input.trader,\\n                            input.pairIndex,\\n                            input.index,\\n                            input.long,\\n                            input.collateral,\\n                            input.leverage\\n                        )\\n                    ),\\n                pairInfos.getTradeFundingFee(\\n                    input.trader,\\n                    input.pairIndex,\\n                    input.index,\\n                    input.long,\\n                    input.collateral,\\n                    input.leverage\\n                )\\n            );\\n    }\\n\\n    // Public getters\\n    function getPairOpenInterestDai(\\n        uint pairIndex\\n    ) public view returns (uint, uint) {\\n        return (\\n            storageT.openInterestDai(pairIndex, 0),\\n            storageT.openInterestDai(pairIndex, 1)\\n        );\\n    }\\n\\n    function getPairGroupIndex(\\n        uint pairIndex\\n    ) public view returns (uint16 groupIndex) {\\n        PairGroup[] memory pairGroups = pairs[pairIndex].groups;\\n        return\\n            pairGroups.length == 0\\n                ? 0\\n                : pairGroups[pairGroups.length - 1].groupIndex;\\n    }\\n\\n    // External getters\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    ) external view override returns (bool) {\\n        Group memory g = groups[getPairGroupIndex(pairIndex)];\\n        return\\n            (g.maxOi == 0) ||\\n            ((long ? g.oiLong : g.oiShort) + (positionSizeDai * P_1) / 1e18 <=\\n                g.maxOi);\\n    }\\n\\n    function getGroup(\\n        uint16 groupIndex\\n    ) external view returns (Group memory, uint48) {\\n        return (groups[groupIndex], groupFeeExponents[groupIndex]);\\n    }\\n\\n    function getPair(\\n        uint pairIndex\\n    ) external view returns (Pair memory, PairOi memory) {\\n        return (pairs[pairIndex], pairOis[pairIndex]);\\n    }\\n\\n    function getAllPairs()\\n        external\\n        view\\n        returns (Pair[] memory, PairOi[] memory)\\n    {\\n        uint len = storageT.priceAggregator().pairsStorage().pairsCount();\\n        Pair[] memory p = new Pair[](len);\\n        PairOi[] memory pairOi = new PairOi[](len);\\n\\n        for (uint i; i < len; ) {\\n            p[i] = pairs[i];\\n            pairOi[i] = pairOis[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (p, pairOi);\\n    }\\n\\n    function getGroups(\\n        uint16[] calldata indices\\n    ) external view returns (Group[] memory, uint48[] memory) {\\n        Group[] memory g = new Group[](indices.length);\\n        uint48[] memory e = new uint48[](indices.length);\\n        uint len = indices.length;\\n\\n        for (uint i; i < len; ) {\\n            g[i] = groups[indices[i]];\\n            e[i] = groupFeeExponents[indices[i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (g, e);\\n    }\\n\\n    function getTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    )\\n        external\\n        view\\n        returns (\\n            InitialAccFees memory borrowingFees,\\n            GNSPairInfosInterfaceV6.TradeInitialAccFees memory otherFees\\n        )\\n    {\\n        borrowingFees = initialAccFees[trader][pairIndex][index];\\n        otherFees = pairInfos.tradeInitialAccFees(trader, pairIndex, index);\\n    }\\n\\n    function getPairMaxOi(\\n        uint pairIndex\\n    ) external view override returns (uint) {\\n        return pairOis[pairIndex].max;\\n    }\\n}\\n\",\"keccak256\":\"0xde7b683118961818d11dd4453c5015ab757785c2580bf1fb7bd68e28812f1dc6\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ChainlinkFeedInterfaceV5 {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0xd13756cf435ea7e26ec8dbceed69f93553b142029e3c1753367769dde6d9cfd7\",\"license\":\"MIT\"},\"contracts/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSBorrowingFeesInterfaceV6_4 {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1e71c17d0c0428b673324ef58a8d8fb03ff3caeb6802558347f1aeb5ee49dd8a\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface GNSPairInfosInterfaceV6 {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x71feae30036c784a9685909bfc1c8132fca5384a5a80db79f35b5864470a90a6\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x1fd411df874a31e89b8a26375446f6bf9d14279a1e02ee1e6541f0f2a1bec9da\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x17570efd5c6708b7adc07cd3fdb11a5983bc5db9f7b3d0bf0f50b34f95ea6358\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosDai(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd274cbab16c2f7a08cd33c1c59921fae308aef6dea851621c5f1540e8c7733f6\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity ^0.8.7;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function openTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function openTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders()\\n        external\\n        view\\n        returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(\\n        TriggeredLimitId calldata,\\n        address,\\n        uint\\n    ) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(\\n        TriggeredLimitId calldata,\\n        uint,\\n        uint\\n    ) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(\\n        uint,\\n        address,\\n        uint,\\n        address,\\n        uint,\\n        uint\\n    ) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(\\n        address,\\n        uint,\\n        uint,\\n        TradeType\\n    ) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata,\\n        LastUpdated memory\\n    ) external;\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata,\\n        TradeData memory\\n    ) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x98174fe7932d5de018579977878f46b4c724df99d9ad38e0677218d9aef7b89a\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface TokenInterfaceV5 {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1ad2a4fa990051fb693928d91a6c3192cfd68604d12436e7459c4d9f96cccd5\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0x6c7fba5c30c9f2c493d0fa6bfa8fb4414e8d74aa253cddb145b1496269cb6c1a\",\"license\":\"MIT\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\",\"keccak256\":\"0xe3ded73d85620c3a752c8c82be5e24e22b868e47f021e2b6e1783fb2be56aa24\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\",\"keccak256\":\"0x3ef4c9add07628e009b35ee24c956fd626f4569d910b314fe09ed9deebe686c4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657613e25908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630f8df7e0146123925780631346b0ff1461236957806316fff0741461233c5780631ab5911a1461230c57806322005202146121415780632d28a817146120d55780633979324d1461203f578063485cc95514611e7a5780634c67cfa014611e50578063651501b5146118fb578063706faf3a146116e85780637b64112b1461169c5780637cbd3c98146115025780638ee1caa7146114e05780638f694238146114b657806390895ff114611443578063930842aa146112a057806393e0e533146111e8578063b0baf5d414610d86578063b2c9dd8b14610afe578063b91ac78814610a88578063b94ffa1c14610a51578063bb219c75146109fe578063bcb78871146109a9578063bdf391cc14610931578063ce67edfb146105ee578063d6274505146104f9578063e3e98a75146104c5578063f800ece9146101d35763ff933fc41461016657600080fd5b346101ce5760203660031901126101ce5761ffff61018261265a565b61018a613c48565b50166000526002602052610120604060002060066020526101b865ffffffffffff60406000205416916129c0565b906101c660405180936126be565b610100820152f35b600080fd5b346101ce5760003660031901126101ce57600054604051633078fff560e01b81526001600160a01b03916020919082908290600490829060101c87165afa908115610448578391839160009161048c575b506004604051809481936335b03c1760e01b8352165afa8015610448578291600091610454575b5060046040518095819363b81b2b7160e01b8352165afa91821561044857600092610419575b5061027b82612643565b6102886040519182612620565b828152601f19928361029982612643565b018360005b828110610403575050506102b181612643565b936102bf6040519586612620565b8185526102cb82612643565b018360005b8281106103ed5750505060005b81811061038e57505082604051916040830160408452815180915260608401908560608260051b8701019301916000905b82821061035f57505050508281038484015283808351928381520192019360005b82811061033c5784840385f35b909192826080826103506001948a51612886565b0196019101949291909461032f565b909192949693848061037d600193605f198b82030186528951612773565b96999701949391909101910161030e565b80600191600052600385526103a66040600020613499565b6103b082866131e0565b526103bb81856131e0565b5080600052600585526103d16040600020613ce4565b6103db82886131e0565b526103e681876131e0565b50016102dd565b6103f5613cbf565b8282890101520184906102d0565b61040b613c86565b82828701015201849061029e565b9080925081813d8311610441575b6104318183612620565b810103126101ce57519082610271565b503d610427565b6040513d6000823e3d90fd5b82819392503d8311610485575b61046b8183612620565b810103126101ce575182811681036101ce5781908461024b565b503d610461565b92505081813d83116104be575b6104a38183612620565b810103126101ce575182811681036101ce5781839185610224565b503d610499565b346101ce5760203660031901126101ce576004356000526006602052602065ffffffffffff60406000205416604051908152f35b346101ce5760603660031901126101ce5760243580151581036101ce576044359061ffff610528600435613c03565b16600052600260205261053e60406000206129c0565b60c0810180516001600160501b039081161593919290918415610569575b6020856040519015158152f35b9293509091156105db57516001600160701b0316925b6402540be400908181029181830414901517156105c5576020936105b791670de0b6b3a76400009004906001600160701b03166131f4565b91511610158280808061055c565b634e487b7160e01b600052601160045260246000fd5b602001516001600160701b03169261057f565b346101ce5760c03660031901126101ce57610607612733565b6084351515608435036101ce5760a435151560a435036101ce5761062c602435613c03565b610634613d21565b610640816024356135df565b909261064c83826137e8565b94909161ffff8116600052600260205260406000209060009161ffff8216610839575b54916040519260018060701b038092168452818116602085015260701c166040830152608435151591600080516020613db9833981519152606061ffff60a4351515941692a4608435610715575b8560405160443581526084351515602082015260a4351515604082015260643560608201527f66baa1848f5d4d14567e9bc527e5608778c86e512490d413cfafc9250327308f60806024359360018060a01b031692a3005b7faa00ca5c6f282cb9f35953ecb0eaf8e39c95b7c8df114efac12162a85c085e609260a435156108315750935b60a435156108295750915b65ffffffffffff9261076184831115612b20565b610809604051610770816125ce565b60018060401b03809716815286602082019316835285604082019416845260608101600081526107f960018060a01b038a169788600052600460205260406000206024356000526020526040600020996044359a8b600052602052806040600020955116968760018060401b03198754161786555116966107f18886612a30565b5116836137c1565b516001600160501b031690612aca565b61081c60405192839260243597846135bf565b0390a381808080806106bd565b90509161074d565b905093610742565b91506064356402540be40081818102048114821517156105c5576001600160701b0393918491670de0b6b3a764000091020461087782821115612b20565b169260a435156108cf57608435156108ac576108968482845416612b70565b82546001600160701b031916911617815561066f565b6108c4818354168581116000146108c9578590612b57565b610896565b80612b57565b8360843515610910576108e791835460701c16612b70565b8154600160701b600160e01b03191660709190911b600160701b600160e01b031617815561066f565b5061092c90825460701c168481116000146108c9578490612b57565b6108e7565b346101ce5760203660031901126101ce5761094a613c86565b50610953613cbf565b50600435600052600360205261099a6040600020600560205261098361097d604060002092613499565b91613ce4565b6109a560405193849360a0855260a0850190612773565b916020840190612886565b0390f35b346101ce5760403660031901126101ce576109a56109d16109c861265a565b602435906136ad565b604093919351938493846001600160401b0391821681529181166020830152909116604082015260600190565b346101ce5760203660031901126101ce57600435600052600560205260806040600020546040519060018060481b038082168352808260481c1660208401528160901c16604083015260d81c6060820152f35b346101ce5760203660031901126101ce576004356000526005602052602060018060481b0360406000205460901c16604051908152f35b346101ce5760203660031901126101ce57600435600052600360205260c06040600020600260018201549101546040519163ffffffff8116835260018060401b03808260201c1660208501528160601c16604084015265ffffffffffff8160a01c16606084015260d01c608083015260a0820152f35b346101ce5760403660031901126101ce576001600160401b036004358181116101ce57610b2f90369060040161268e565b6024928335938185116101ce57366023860112156101ce5784600401359182116101ce576060903681838502880101116101ce576001805460405163481c6a7560e01b815291966020959290916001600160a01b039087908390600490829085165afa801561044857610bad92600091610d59575b501633146128db565b610bb8828714612916565b60005b868110610bc457005b610bd7610bd2828985612951565b6129b1565b83821015610d445761ffff8116908115610d165790600080516020613df9833981519152878785948b8f8f98610cd7610cd18b9388610cdd9402016064810195610c4d65ffffffffffff98878a610c2d8b612961565b16101580610cfc575b610c3f90612974565b610c47613d21565b906137e8565b50508b60005260028152610ca9604460406000209a840193610c6e85612aa5565b8c546001600160e01b031660e09190911b6001600160e01b031916178c5501996001600160481b039788610ca18d612ab6565b169101612aca565b6006610cb488612961565b9152876040600020911665ffffffffffff19825416179055612aa5565b95612ab6565b92612961565b9163ffffffff60405195168552168d840152166040820152a201610bbb565b50610c3f60038b610d0c8c612961565b1611159050610c36565b60405162461bcd60e51b81526004810189905260078188015266047524f55505f360cc1b6044820152606490fd5b84634e487b7160e01b60005260326004526000fd5b610d799150883d8a11610d7f575b610d718183612620565b8101906128bc565b8b610ba4565b503d610d67565b346101ce5760a03660031901126101ce5760803660231901126101ce5760015460405163481c6a7560e01b8152906001600160a01b03906020908390600490829085165afa801561044857610de5926000916111c957501633146128db565b60643565ffffffffffff81161415806101ce57600165ffffffffffff606435161015806111b0575b610e1690612974565b6004356000526003602052604060002090610e32600435613c03565b90610e3b613d21565b91610e48836004356135df565b505060243561ffff8116141592836101ce5761ffff821661ffff6024351603610f3a575b50506044359263ffffffff84168094036101ce57600101908154906101ce57600160201b600160d01b0316831760643560d01b6001600160d01b0319161790556001600160481b0360843590811691908281036101ce5760043560009081526005602052604090208054600160901b600160d81b03191660909290921b600160901b600160d81b03169190911790556101ce5760405191825265ffffffffffff606435166020830152604082015261ffff6024351690600080516020613dd9833981519152606060043592a3005b909250610f4781846137e8565b5050610f55816024356137e8565b5050610f8e610f86610f68600435613b03565b9190610f748188612b89565b610f7e8388612c78565b602435612d86565b602435612e6e565b61ffff602435166000526002602052610faa60406000206129c0565b61ffff84166000526002602052610fc460406000206129c0565b610fd665ffffffffffff841115612b20565b60608281015160809384015191830151929093015160018801546040519590946001600160401b0392831694831693831692169065ffffffffffff9061101b8861257c565b61ffff60243516885216602087015260408601526060850152608084015260a083015260018060401b038160201c1660c083015260018060401b039060601c1660e08201526000610100820152835490600160401b82101561119a57600182018086558210156111845761115a918560005260206000209060011b0190600161ffff8251169280549367ffffffffffff0000602085015160101b1690838060401b0319809616171781556110da828060401b0360408501511682612a30565b6110ef828060401b0360608501511682612a59565b611104828060401b0360808501511682612a82565b60a0830151910180549093166001600160401b0391821617835560c082015161112e911683612a30565b60e0810151611146906001600160401b031683612a59565b61010001516001600160401b031690612a82565b60009161ffff80602435169116600435600080516020613d99833981519152600080a48380610e6c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b5060009050600360643565ffffffffffff161115610e0d565b6111e2915060203d602011610d7f57610d718183612620565b83610ba4565b346101ce576101203660031901126101ce576040516112068161257c565b6001600160401b0360043581811681036101ce57825260243590811681036101ce5760208201526044356040820152606435606082015260843563ffffffff811681036101ce57608082015260a43560a082015260c43560c082015260e4356001600160481b03811681036101ce5760e08201526101043565ffffffffffff811681036101ce57816109d1916101006109a5940152613034565b346101ce5760803660031901126101ce576112b961265a565b60603660231901126101ce5760015460405163481c6a7560e01b8152602092916001600160a01b039084908390600490829085165afa8015610448576113099260009161142657501633146128db565b61ffff81169182156113f8576064359165ffffffffffff83168093141590816101ce576001841015806113e9575b90610c3f61134492612974565b505083600052600282526040600020926024359163ffffffff8316928381036101ce5785546001600160e01b031660e09190911b6001600160e01b0319161785556001600160481b0360443590811695908690036101ce578560016113a99201612aca565b6101ce57600080516020613df9833981519152938360066060955260406000208365ffffffffffff198254161790556040519384528301526040820152a2005b50600091506003841115611337565b6064906040519062461bcd60e51b825260048201526007602482015266047524f55505f360cc1b6044820152fd5b61143d9150853d8711610d7f57610d718183612620565b85610ba4565b346101ce5761145136612749565b9160018060a01b0316600052600460205260406000209060005260205260406000209060005260205260806040600020546040519060018060401b0380821683528160401c16602083015265ffffffffffff81841c16604083015260b01c6060820152f35b346101ce5760203660031901126101ce5760206114d4600435613c03565b61ffff60405191168152f35b346101ce5760403660031901126101ce576109a56109d1602435600435613504565b346101ce5761151036612749565b91611519613cbf565b5060405190611527826125b3565b60008252600060406020938285820152015260018060a01b038091169081600052600483526040600020846000528352604060002085600052835260406000209360405194611575866125ce565b549160018060401b038084168752858701818560401c168152604088019265ffffffffffff94858760801c16855260646060988993848d019960b01c8a52600154166040519d8e948593632f6ac02760e11b85526004850152602484015260448301525afa98891561044857600099611632575b509181604097959360e09a97959389519a51168a5251168589015251168587015260018060501b03905116908501528151608085015281015160a08401520151151560c0820152f35b98509492909593918389813d8311611695575b61164f8183612620565b810103126101ce5760408051996116658b6125b3565b80518b5286810151878c015201519687151588036101ce57896040988960e09c01529950919395909294966115e9565b503d611645565b346101ce5760603660031901126101ce5760206116b761267f565b6116c5602435600435613504565b509091156116e157505b6040516001600160401b039091168152f35b90506116cf565b346101ce5760e03660031901126101ce576001546001600160a01b0390811661170f613ade565b9160c4359160a43561171f613aed565b946024359260443594806040519863163de5af60e21b8a521660048901528460248901528560448901528360648901526020978881608481865afa8015610448576000906118cc575b6117ba91506117b4611778613aed565b611780613ade565b856040519261178e84612598565b168252898d8301528a6040830152151560608201528760808201528a60a082015261388d565b906131f4565b956117c3613aed565b956117cc613ade565b9260405197637b62877f60e11b895216600488015260248701526044860152151560648501528260848501528560a4850152868460c481845afa8015610448578794600091611898575b5060c4939495604051978896879563035e5f4360e51b875260643560048801521515602487015260448601526064850152608484015260a48301525afa9081156104485760009161186b575b50604051908152f35b90508181813d8311611891575b6118828183612620565b810103126101ce575182611862565b503d611878565b8581959692503d83116118c5575b6118b08183612620565b810103126101ce5791518693929060c4611816565b503d6118a6565b508881813d83116118f4575b6118e28183612620565b810103126101ce576117ba9051611768565b503d6118d8565b346101ce5760403660031901126101ce576004356001600160401b0381116101ce5761192b90369060040161268e565b6001600160401b03602435116101ce573660236024350112156101ce576001600160401b0360046024350135116101ce5736602480356004013560071b81350101116101ce5760015460405163481c6a7560e01b8152906001600160a01b03906020908390600490829085165afa8015610448576119b392600091611e3757501633146128db565b6119c4602435600401358214612916565b60005b8181106119d057005b6119db818385612951565b35906024356004013581101561118457600165ffffffffffff611a0760648460071b6024350101612961565b16101580611e0d575b611a1990612974565b8160005260036020526040600020611a3083613c03565b92611a39613d21565b93611a4485836135df565b5050611a5860248560071b813501016129b1565b61ffff808316911603611b74575b5060019350600080516020613dd9833981519152606061ffff60448660071b602435010187611a9482612aa5565b96018054898060d01b0319611ab260648b60071b6024350101612961565b60d01b169063ffffffff809916908b60201b8c60d01b03161717905560848760071b602435010195611ae387612ab6565b8660005260056020526040600020908154908b60901b8c60d81b039060901b16908b60901b8c60d81b03191617905565ffffffffffff611b34611b2e60248b60071b813501016129b1565b93612aa5565b97611b51611b4b60648c60071b6024350101612961565b91612ab6565b9260405199168952166020880152888060481b031660408701521693a3016119c7565b84611b8261ffff96836137e8565b5050611b9f81611b9a60248860071b813501016129b1565b6137e8565b5050611bf4611bdd611bb085613b03565b9190611bbc8187612b89565b611bc68387612c78565b611bd860248a60071b813501016129b1565b612d86565b611bef60248860071b813501016129b1565b612e6e565b85611c0760248760071b813501016129b1565b1660005260029081602052611c1f60406000206129c0565b91878416600052602052611c3660406000206129c0565b90611c4960248860071b813501016129b1565b90611c5c65ffffffffffff821115612b20565b606084810151608095860151858301519587015160018b01546040519d949790966001600160401b039283169691831695938316949092169265ffffffffffff928f9190611ca98361257c565b1690521660208d015260408c0152848b0152848a015260a089015260018060401b038160201c1660c089015260018060401b0390821c1660e08801526000610100880152845496600160401b88101561119a5760018801808755881015611184576001611dda93611d88829a89600052602060002090841b0191611d7761ffff8651169684549767ffffffffffff0000602089015160101b1690878060401b0319809a1617178555611d66868060401b0360408901511686612a30565b858060401b03908701511684612a59565b838060401b03908501511682612a82565b0191888060401b0360a08301511690835416178255611db2888060401b0360c08301511683612a30565b611dc7888060401b0360e08301511683612a59565b610100888060401b039101511690612a82565b61ffff80611df060248760071b813501016129b1565b16911682600080516020613d99833981519152600080a486611a66565b50611a19600365ffffffffffff611e2d60648560071b6024350101612961565b1611159050611a10565b61143d915060203d602011610d7f57610d718183612620565b346101ce5760203660031901126101ce576040611e6e600435613b03565b82519182526020820152f35b346101ce5760403660031901126101ce576001600160a01b036004358181168082036101ce576024359283168093036101ce576000549060ff8260081c161591828093612032575b801561201b575b15611fbf5760ff19811660011760005582611fad575b50151580611fa4575b15611f70576000805462010000600160b01b0319811660109490941b62010000600160b01b0316938417909155600180546001600160a01b031916909417909355909190611f3257005b610100600160b01b03191617600055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b60405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b6044820152606490fd5b50821515611ee8565b61ffff19166101011760005584611edf565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015611ec95750600160ff821614611ec9565b50600160ff821610611ec2565b346101ce5760203660031901126101ce5761ffff61205b61265a565b166000526002602052610100604060002080549060026001820154910154906040519260018060701b0380821685528160701c16602085015260e01c604084015260018060401b0380821660608501528160401c16608084015265ffffffffffff8160801c1660a084015260b01c60c083015260e0820152f35b346101ce5760c03660031901126101ce576040516120f281612598565b6120fa612733565b81526024356020820152604435604082015260643580151581036101ce57816121399160606020940152608435608082015260a43560a082015261388d565b604051908152f35b346101ce576020806003193601126101ce576004356001600160401b0381116101ce5761217290369060040161268e565b9061217c82612643565b9261218a6040519485612620565b828452601f19918261219b85612643565b0160005b8181106122ee5750506121b184612643565b936121bf6040519586612620565b8085526121cb81612643565b858401940136853760005b8181106122715750505060405193849360408501604086528251809152836060870193019060005b818110612249575050508482038584015251808252908201929160005b82811061222a57505050500390f35b835165ffffffffffff168552869550938101939281019260010161221b565b91959650919284610100826122616001948a516126be565b01960191019187969593926121fe565b60019061ffff979596978061228a610bd2848789612951565b166000526002865261229f60406000206129c0565b6122a983896131e0565b526122b482886131e0565b506122c3610bd2838688612951565b166000526006855265ffffffffffff604060002054166122e3828a6131e0565b5201959493956121d6565b83906122fc97959697613c48565b828288010152019594939561219f565b346101ce5760603660031901126101ce57602061232761265a565b6116c561233261267f565b91602435906136ad565b346101ce5760003660031901126101ce5760005460405160109190911c6001600160a01b03168152602090f35b346101ce5760003660031901126101ce576001546040516001600160a01b039091168152602090f35b346101ce57610120806003193601126101ce57602435906001600160401b03908183116101ce57366023840112156101ce578260040135906123d382612643565b936123e16040519586612620565b8285526020926024838588019202830101913683116101ce57602401905b8282106124b8575050505060806043193601126101ce5760405192608084018481108482111761119a5760405260443583811681036101ce57845260643583811681036101ce578285015260843565ffffffffffff811681036101ce57604085015260a4356001600160501b03811681036101ce57606085015260e4359384151585036101ce5760609461249e92610104359260c4359160043561321a565b929193908160405195168552169083015215156040820152f35b83823603126101ce57604051906124ce8261257c565b823561ffff811681036101ce578252858301359065ffffffffffff821682036101ce5782879283889501526125056040860161266b565b6040820152606061251781870161266b565b90820152608061252881870161266b565b9082015260a061253981870161266b565b9082015260c061254a81870161266b565b9082015261255a60e0860161266b565b60e082015261010061256d81870161266b565b908201528152019101906123ff565b61012081019081106001600160401b0382111761119a57604052565b60c081019081106001600160401b0382111761119a57604052565b606081019081106001600160401b0382111761119a57604052565b608081019081106001600160401b0382111761119a57604052565b61010081019081106001600160401b0382111761119a57604052565b60e081019081106001600160401b0382111761119a57604052565b601f909101601f19168101906001600160401b0382119082101761119a57604052565b6001600160401b03811161119a5760051b60200190565b6004359061ffff821682036101ce57565b35906001600160401b03821682036101ce57565b6044359081151582036101ce57565b9181601f840112156101ce578235916001600160401b0383116101ce576020808501948460051b0101116101ce57565b60e0809160018060701b03808251168552602082015116602085015263ffffffff604082015116604085015260018060401b03806060830151166060860152608082015116608085015265ffffffffffff60a08201511660a085015260018060501b0360c08201511660c08501520151910152565b600435906001600160a01b03821682036101ce57565b60609060031901126101ce576004356001600160a01b03811681036101ce57906024359060443590565b9060e091828201815190848452815180915261010090818501956020809401926000915b8383106127fb575050505050818163ffffffff60c0949385940151169085015260018060401b03806040830151166040860152606082015116606085015265ffffffffffff80608083015116608086015260a08201511660a0850152015191015290565b8451805161ffff168a528087015165ffffffffffff16878b01526040808201516001600160401b03908116918c01919091526060808301518216908c01526080808301518216908c015260a0808301518216908c015260c0808301518216908c01528183015181168b8401529083015116898301526101209098019793850193600190920191612797565b64ffffffffff6060809260018060481b038082511686528060208301511660208701526040820151166040860152015116910152565b908160209103126101ce57516001600160a01b03811681036101ce5790565b156128e257565b60405162461bcd60e51b815260206004820152600c60248201526b4d414e414745525f4f4e4c5960a01b6044820152606490fd5b1561291d57565b60405162461bcd60e51b815260206004820152600c60248201526b0aea49e9c8ebe988a9c8ea8960a31b6044820152606490fd5b91908110156111845760051b0190565b3565ffffffffffff811681036101ce5790565b1561297b57565b60405162461bcd60e51b815260206004820152600e60248201526d15d493d391d7d1561413d391539560921b6044820152606490fd5b3561ffff811681036101ce5790565b906040516129cd816125e9565b60e060028294805460018060701b0380821686528160701c166020860152831c6040850152600181015460018060401b0380821660608701528160401c16608086015265ffffffffffff8160801c1660a086015260b01c60c08501520154910152565b8054600160401b600160801b03191660409290921b600160401b600160801b0316919091179055565b8054600160801b600160c01b03191660809290921b600160801b600160c01b0316919091179055565b80546001600160c01b031660c09290921b6001600160c01b031916919091179055565b3563ffffffff811681036101ce5790565b356001600160481b03811681036101ce5790565b80546001600160b01b031660b09290921b6001600160b01b031916919091179055565b818102929181159184041417156105c557565b8115612b0a570490565b634e487b7160e01b600052601260045260246000fd5b15612b2757565b60405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b6044820152606490fd5b6001600160701b0391821690821603919082116105c557565b6001600160701b0391821690821601919082116105c557565b61ffff16600091818352600260205260408320839183612be0575b50606060019392600080516020613db983398151915292549060405191868060701b038092168352818116602084015260701c166040820152a4565b9091506402540be40090818102918183041490151715612c645760019291600080516020613db9833981519152916060916001600160701b03918290670de0b6b3a76400009004612c3382821115612b20565b8254911692612c4d828216858111156108c9578590612b57565b1690878060701b0319161781559250929350612ba4565b634e487b7160e01b84526011600452602484fd5b61ffff6000911680825260026020526040822092829082612ccf575b506060600080516020613db983398151915291849554906040519160018060701b038092168352818116602084015260701c166040820152a4565b6402540be40080820292508115918304141715612d72576001600160701b0392600080516020613db983398151915291606091908590670de0b6b3a76400009004612d1c82821115612b20565b16909586958154908160701c16838111600014612d6957612d49845b600160701b600160e01b0392612b57565b60701b16600160701b600160e01b03199190911617815595509150612c94565b612d4981612d38565b634e487b7160e01b83526011600452602483fd5b61ffff1690816000526002602052604060002060009183612de0575b5091600080516020613db98339815191526060600194938594549060405191868060701b038092168352818116602084015260701c166040820152a4565b90916402540be40091828102928184041490151715612e5a575091600080516020613db9833981519152606060019493670de0b6b3a764000086950490858060701b0382612e318280951115612b20565b1691815490612e4284828416612b70565b1690878060701b031916178155939550935050612da2565b634e487b7160e01b81526011600452602490fd5b91909161ffff60009116808252600260205260408220829482612ec8575b50606060019495600080516020613db983398151915292549060405191878060701b038092168352818116602084015260701c166040820152a4565b909294506402540be40090818102918183041490151715612f5357606060019495670de0b6b3a7640000600080516020613db9833981519152930494868060701b0386612f188280991115612b20565b169195815490612f36848a60701b8b60e01b03928460701c16612b70565b60701b16908860701b8960e01b0319161781559250959450612e8c565b634e487b7160e01b85526011600452602485fd5b919082039182116105c557565b90801561301457811561300d57818060011461300557600214612ff45760208110610133831016604e8210600b84101617612fef57600190815b808211612fc6575050816000190481116105c5570290565b9092806000190481116105c557818416612fe6575b800292811c90612fae565b80920291612fdb565b900a90565b905060ff81116105c5576001901b90565b505050600190565b5050600090565b5050600190565b6001600160401b0391821690821601919082116105c557565b9060a082019182519260c08201938451116131ad5760408201805160608401805180831097939190881561319c5750613071925051905190612f67565b60e0840180516001600160481b0394919391908516151580613186575b6000901561317b57506130b9916130a89151905190612f67565b63ffffffff60808701511690612aed565b926402540be400918281029281840414901517156105c5576130dd92511690612b00565b6131016101008401926130fb65ffffffffffff938486511690612f74565b90612aed565b91511690600482116105c55761312191670de0b6b3a76400000a90612b00565b6001600160401b0390819061313882821115612b20565b1680928560001461316957828151165b951561315f576020015161315c921661301b565b91565b6020915001511691565b613176828483511661301b565b613148565b945050505050613121565b5065ffffffffffff61010087015116151561308e565b9150506131a891612f67565b613071565b60405162461bcd60e51b815260206004820152600b60248201526a212627a1a5afa7a92222a960a91b6044820152606490fd5b80518210156111845760209160051b010190565b919082018092116105c557565b6001600160401b0391821690821603919082116105c557565b9291959493909361322b84866131e0565b519365ffffffffffff908160208701511660408a0190838251161197805160001981019081116105c55783036133325750505050806132726132819261ffff8751166136ad565b50841561332b57505b93613504565b50821561332457505b925b84156132bd575050602085015161315c92916001600160401b03916132b49190831690613201565b95511690613201565b9095506132e461315c9392876000146133105760408301516001600160401b031690613201565b95156132fd5760c001516001600160401b031690613201565b60e001516001600160401b031690613201565b60608301516001600160401b031690613201565b905061328a565b905061327b565b91600191939650809450018093116105c557869261334f916131e0565b5193826133be575b50506133b257801561339f5760808201516001600160401b03165b91811561338d5760c001516001600160401b03165b9261328c565b60e001516001600160401b0316613387565b60a08201516001600160401b0316613372565b50600094508493915050565b8091925060208501511691511610153880613357565b9081546133e081612643565b926040936133f085519182612620565b828152809460208092019260005281600020906000935b85851061341657505050505050565b60028460019284516134278161257c565b865461ffff8116825265ffffffffffff8160101c1684830152858060401b03908181891c16888401526080918082841c16606085015260c091821c83850152878a0154809382821660a087015282828c1c16848701521c1660e08401521c610100820152815201930194019391613407565b906040516134a681612605565b60c0600282946134b5816133d4565b8452600181015463ffffffff8116602086015260018060401b03808260201c1660408701528160601c16606086015265ffffffffffff8160a01c16608086015260d01c60a08501520154910152565b906135ba9180600052600360205261351f6040600020613499565b61352882613b03565b92909360018060401b039485604085015116956060850151169463ffffffff6020860151169165ffffffffffff8060808801511695600052600560205260a060018060481b0360406000205460901c1697015116966040519861358a8a61257c565b8952602089015260408801526060870152608086015260a085015260c084015260e0830152610100820152613034565b909192565b9081526001600160401b0391821660208201529116604082015260600190565b917ffc346088168e874385f54275cfc143d52a459a0fdc016c1bb6c237097ef27bf49261360c8382613504565b50949085948196846000526003602052600160406000200192835461363965ffffffffffff851115612b20565b602091821b600160201b600160601b0316600160201b600160d01b0319909116606093841b600160601b600160a01b0316171760a084901b65ffffffffffff60a01b1617938490556040519384936136a89382901c6001600160401b03908116939290921c90911690846135bf565b0390a2565b61ffff909291921660009281845260026020526136cc604085206129c0565b606081015160808201518251670de0b6b3a7640000976001600160401b03938416969290931694919392906001600160701b03908116898102919080159083048b141715612d725760208501511689810299818b0414901517156137ad576135ba979863ffffffff60408601511692604065ffffffffffff918260a0890151169760c060018060481b0391015116988152600660205220541696604051986137738a61257c565b895260208901526402540be4008092046040890152046060870152608086015260a085015260c084015260e0830152610100820152613034565b634e487b7160e01b82526011600452602482fd5b805465ffffffffffff60801b191660809290921b65ffffffffffff60801b16919091179055565b917fd246da22fc6064e2fae4f4affdb9425eac12bebcf4f08fb3892f08480513752e61381483856136ad565b5091909382946136a861ffff8298169485600052600260205261383f60016040600020019182612a30565b80546001600160401b0319166001600160401b0393841617815561387765ffffffffffff61386f81871115612b20565b8516826137c1565b54604051938385948360401c16921690846135bf565b906000809260018060a01b03815116845260049360208581526040808320918085019283518552815281842082860151855281528184208251906138d0826125ce565b549060018060401b039485831682528583861c168483015284820165ffffffffffff94858560801c16825260609460b01c858501528251895260038152613918878a206133d4565b95613921613d21565b978a81519161392f8361257c565b81835281858401528201528a878201528a60808201528a60a08201528a60c08201528a60e08201528a610100820152928751158015613ab8575b508751159182938315613aa4575b505050613a3c575b50508396959651805b6139c2575b505050505050505060649293506402540be400916139b88260a060806139bd95015191015190612aed565b612aed565b040490565b90919293949596986000198201918211613a295790613a0f83926139f7898c898f9c9b9a999851910151151590888b8861321a565b9d91908083168284161115613a2257505b16906131f4565b99613a1d5795969580613988565b61398d565b9050613a08565b634e487b7160e01b885260118c52602488fd5b87929a50600014613a815750613a718951613a5d87868c0151151592613504565b50909115613a7a57505b8284511690613201565b1697388061397f565b9050613a67565b88840151613a7191839115613a9a5760c0015116613a67565b60e0015116613a67565b819293508501511691511610388080613977565b909350613aca57818701519238613969565b50634e487b7160e01b895260328d52602489fd5b60843580151581036101ce5790565b6004356001600160a01b03811681036101ce5790565b90600060018060a01b03815460101c16604051916328daca2160e01b948584528060048501528160248501526020958685604481875afa948515613bf857908792918496613bc0575b50604490604051958693849283526004830152600160248301525afa948515613bb3578195613b7d575b5050509190565b909180939550813d8311613bac575b613b968183612620565b81010312613ba957505191388080613b76565b80fd5b503d613b8c565b50604051903d90823e3d90fd5b838193949297503d8311613bf1575b613bd98183612620565b81010312613bed5751938691906044613b4c565b8280fd5b503d613bcf565b6040513d85823e3d90fd5b60009081526003602052613c19604082206133d4565b80519081613c2657505090565b60001982019290918311612e5a575061ffff91613c42916131e0565b51511690565b60405190613c55826125e9565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b60405190613c9382612605565b816060815260c06000918260208201528260408201528260608201528260808201528260a08201520152565b60405190613ccc826125ce565b60006060838281528260208201528260408201520152565b90604051613cf1816125ce565b91546001600160481b038082168452604882901c81166020850152609082901c16604084015260d81c6060830152565b61a4b146148015613d8c575b613d35574390565b60405163a3b1b31d60e01b815260208160048160645afa90811561044857600091613d5e575090565b906020823d8211613d84575b81613d7760209383612620565b81010312613ba957505190565b3d9150613d6a565b5062066eed4614613d2d56fe5beb7d73e1c3cd532d47c9e896931df26d9be450a833bd5fe1ace6bf5690d468946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2331caa8de744ea74fb9e0c2f32b7fed3b30ea426105a6b73926010be6372458ef4fe3f382c07994321b091a508fb27d2cec41f6dfa9f52b97a01af5b992fdc1681a164736f6c6343000811000a",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630f8df7e0146123925780631346b0ff1461236957806316fff0741461233c5780631ab5911a1461230c57806322005202146121415780632d28a817146120d55780633979324d1461203f578063485cc95514611e7a5780634c67cfa014611e50578063651501b5146118fb578063706faf3a146116e85780637b64112b1461169c5780637cbd3c98146115025780638ee1caa7146114e05780638f694238146114b657806390895ff114611443578063930842aa146112a057806393e0e533146111e8578063b0baf5d414610d86578063b2c9dd8b14610afe578063b91ac78814610a88578063b94ffa1c14610a51578063bb219c75146109fe578063bcb78871146109a9578063bdf391cc14610931578063ce67edfb146105ee578063d6274505146104f9578063e3e98a75146104c5578063f800ece9146101d35763ff933fc41461016657600080fd5b346101ce5760203660031901126101ce5761ffff61018261265a565b61018a613c48565b50166000526002602052610120604060002060066020526101b865ffffffffffff60406000205416916129c0565b906101c660405180936126be565b610100820152f35b600080fd5b346101ce5760003660031901126101ce57600054604051633078fff560e01b81526001600160a01b03916020919082908290600490829060101c87165afa908115610448578391839160009161048c575b506004604051809481936335b03c1760e01b8352165afa8015610448578291600091610454575b5060046040518095819363b81b2b7160e01b8352165afa91821561044857600092610419575b5061027b82612643565b6102886040519182612620565b828152601f19928361029982612643565b018360005b828110610403575050506102b181612643565b936102bf6040519586612620565b8185526102cb82612643565b018360005b8281106103ed5750505060005b81811061038e57505082604051916040830160408452815180915260608401908560608260051b8701019301916000905b82821061035f57505050508281038484015283808351928381520192019360005b82811061033c5784840385f35b909192826080826103506001948a51612886565b0196019101949291909461032f565b909192949693848061037d600193605f198b82030186528951612773565b96999701949391909101910161030e565b80600191600052600385526103a66040600020613499565b6103b082866131e0565b526103bb81856131e0565b5080600052600585526103d16040600020613ce4565b6103db82886131e0565b526103e681876131e0565b50016102dd565b6103f5613cbf565b8282890101520184906102d0565b61040b613c86565b82828701015201849061029e565b9080925081813d8311610441575b6104318183612620565b810103126101ce57519082610271565b503d610427565b6040513d6000823e3d90fd5b82819392503d8311610485575b61046b8183612620565b810103126101ce575182811681036101ce5781908461024b565b503d610461565b92505081813d83116104be575b6104a38183612620565b810103126101ce575182811681036101ce5781839185610224565b503d610499565b346101ce5760203660031901126101ce576004356000526006602052602065ffffffffffff60406000205416604051908152f35b346101ce5760603660031901126101ce5760243580151581036101ce576044359061ffff610528600435613c03565b16600052600260205261053e60406000206129c0565b60c0810180516001600160501b039081161593919290918415610569575b6020856040519015158152f35b9293509091156105db57516001600160701b0316925b6402540be400908181029181830414901517156105c5576020936105b791670de0b6b3a76400009004906001600160701b03166131f4565b91511610158280808061055c565b634e487b7160e01b600052601160045260246000fd5b602001516001600160701b03169261057f565b346101ce5760c03660031901126101ce57610607612733565b6084351515608435036101ce5760a435151560a435036101ce5761062c602435613c03565b610634613d21565b610640816024356135df565b909261064c83826137e8565b94909161ffff8116600052600260205260406000209060009161ffff8216610839575b54916040519260018060701b038092168452818116602085015260701c166040830152608435151591600080516020613db9833981519152606061ffff60a4351515941692a4608435610715575b8560405160443581526084351515602082015260a4351515604082015260643560608201527f66baa1848f5d4d14567e9bc527e5608778c86e512490d413cfafc9250327308f60806024359360018060a01b031692a3005b7faa00ca5c6f282cb9f35953ecb0eaf8e39c95b7c8df114efac12162a85c085e609260a435156108315750935b60a435156108295750915b65ffffffffffff9261076184831115612b20565b610809604051610770816125ce565b60018060401b03809716815286602082019316835285604082019416845260608101600081526107f960018060a01b038a169788600052600460205260406000206024356000526020526040600020996044359a8b600052602052806040600020955116968760018060401b03198754161786555116966107f18886612a30565b5116836137c1565b516001600160501b031690612aca565b61081c60405192839260243597846135bf565b0390a381808080806106bd565b90509161074d565b905093610742565b91506064356402540be40081818102048114821517156105c5576001600160701b0393918491670de0b6b3a764000091020461087782821115612b20565b169260a435156108cf57608435156108ac576108968482845416612b70565b82546001600160701b031916911617815561066f565b6108c4818354168581116000146108c9578590612b57565b610896565b80612b57565b8360843515610910576108e791835460701c16612b70565b8154600160701b600160e01b03191660709190911b600160701b600160e01b031617815561066f565b5061092c90825460701c168481116000146108c9578490612b57565b6108e7565b346101ce5760203660031901126101ce5761094a613c86565b50610953613cbf565b50600435600052600360205261099a6040600020600560205261098361097d604060002092613499565b91613ce4565b6109a560405193849360a0855260a0850190612773565b916020840190612886565b0390f35b346101ce5760403660031901126101ce576109a56109d16109c861265a565b602435906136ad565b604093919351938493846001600160401b0391821681529181166020830152909116604082015260600190565b346101ce5760203660031901126101ce57600435600052600560205260806040600020546040519060018060481b038082168352808260481c1660208401528160901c16604083015260d81c6060820152f35b346101ce5760203660031901126101ce576004356000526005602052602060018060481b0360406000205460901c16604051908152f35b346101ce5760203660031901126101ce57600435600052600360205260c06040600020600260018201549101546040519163ffffffff8116835260018060401b03808260201c1660208501528160601c16604084015265ffffffffffff8160a01c16606084015260d01c608083015260a0820152f35b346101ce5760403660031901126101ce576001600160401b036004358181116101ce57610b2f90369060040161268e565b6024928335938185116101ce57366023860112156101ce5784600401359182116101ce576060903681838502880101116101ce576001805460405163481c6a7560e01b815291966020959290916001600160a01b039087908390600490829085165afa801561044857610bad92600091610d59575b501633146128db565b610bb8828714612916565b60005b868110610bc457005b610bd7610bd2828985612951565b6129b1565b83821015610d445761ffff8116908115610d165790600080516020613df9833981519152878785948b8f8f98610cd7610cd18b9388610cdd9402016064810195610c4d65ffffffffffff98878a610c2d8b612961565b16101580610cfc575b610c3f90612974565b610c47613d21565b906137e8565b50508b60005260028152610ca9604460406000209a840193610c6e85612aa5565b8c546001600160e01b031660e09190911b6001600160e01b031916178c5501996001600160481b039788610ca18d612ab6565b169101612aca565b6006610cb488612961565b9152876040600020911665ffffffffffff19825416179055612aa5565b95612ab6565b92612961565b9163ffffffff60405195168552168d840152166040820152a201610bbb565b50610c3f60038b610d0c8c612961565b1611159050610c36565b60405162461bcd60e51b81526004810189905260078188015266047524f55505f360cc1b6044820152606490fd5b84634e487b7160e01b60005260326004526000fd5b610d799150883d8a11610d7f575b610d718183612620565b8101906128bc565b8b610ba4565b503d610d67565b346101ce5760a03660031901126101ce5760803660231901126101ce5760015460405163481c6a7560e01b8152906001600160a01b03906020908390600490829085165afa801561044857610de5926000916111c957501633146128db565b60643565ffffffffffff81161415806101ce57600165ffffffffffff606435161015806111b0575b610e1690612974565b6004356000526003602052604060002090610e32600435613c03565b90610e3b613d21565b91610e48836004356135df565b505060243561ffff8116141592836101ce5761ffff821661ffff6024351603610f3a575b50506044359263ffffffff84168094036101ce57600101908154906101ce57600160201b600160d01b0316831760643560d01b6001600160d01b0319161790556001600160481b0360843590811691908281036101ce5760043560009081526005602052604090208054600160901b600160d81b03191660909290921b600160901b600160d81b03169190911790556101ce5760405191825265ffffffffffff606435166020830152604082015261ffff6024351690600080516020613dd9833981519152606060043592a3005b909250610f4781846137e8565b5050610f55816024356137e8565b5050610f8e610f86610f68600435613b03565b9190610f748188612b89565b610f7e8388612c78565b602435612d86565b602435612e6e565b61ffff602435166000526002602052610faa60406000206129c0565b61ffff84166000526002602052610fc460406000206129c0565b610fd665ffffffffffff841115612b20565b60608281015160809384015191830151929093015160018801546040519590946001600160401b0392831694831693831692169065ffffffffffff9061101b8861257c565b61ffff60243516885216602087015260408601526060850152608084015260a083015260018060401b038160201c1660c083015260018060401b039060601c1660e08201526000610100820152835490600160401b82101561119a57600182018086558210156111845761115a918560005260206000209060011b0190600161ffff8251169280549367ffffffffffff0000602085015160101b1690838060401b0319809616171781556110da828060401b0360408501511682612a30565b6110ef828060401b0360608501511682612a59565b611104828060401b0360808501511682612a82565b60a0830151910180549093166001600160401b0391821617835560c082015161112e911683612a30565b60e0810151611146906001600160401b031683612a59565b61010001516001600160401b031690612a82565b60009161ffff80602435169116600435600080516020613d99833981519152600080a48380610e6c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b5060009050600360643565ffffffffffff161115610e0d565b6111e2915060203d602011610d7f57610d718183612620565b83610ba4565b346101ce576101203660031901126101ce576040516112068161257c565b6001600160401b0360043581811681036101ce57825260243590811681036101ce5760208201526044356040820152606435606082015260843563ffffffff811681036101ce57608082015260a43560a082015260c43560c082015260e4356001600160481b03811681036101ce5760e08201526101043565ffffffffffff811681036101ce57816109d1916101006109a5940152613034565b346101ce5760803660031901126101ce576112b961265a565b60603660231901126101ce5760015460405163481c6a7560e01b8152602092916001600160a01b039084908390600490829085165afa8015610448576113099260009161142657501633146128db565b61ffff81169182156113f8576064359165ffffffffffff83168093141590816101ce576001841015806113e9575b90610c3f61134492612974565b505083600052600282526040600020926024359163ffffffff8316928381036101ce5785546001600160e01b031660e09190911b6001600160e01b0319161785556001600160481b0360443590811695908690036101ce578560016113a99201612aca565b6101ce57600080516020613df9833981519152938360066060955260406000208365ffffffffffff198254161790556040519384528301526040820152a2005b50600091506003841115611337565b6064906040519062461bcd60e51b825260048201526007602482015266047524f55505f360cc1b6044820152fd5b61143d9150853d8711610d7f57610d718183612620565b85610ba4565b346101ce5761145136612749565b9160018060a01b0316600052600460205260406000209060005260205260406000209060005260205260806040600020546040519060018060401b0380821683528160401c16602083015265ffffffffffff81841c16604083015260b01c6060820152f35b346101ce5760203660031901126101ce5760206114d4600435613c03565b61ffff60405191168152f35b346101ce5760403660031901126101ce576109a56109d1602435600435613504565b346101ce5761151036612749565b91611519613cbf565b5060405190611527826125b3565b60008252600060406020938285820152015260018060a01b038091169081600052600483526040600020846000528352604060002085600052835260406000209360405194611575866125ce565b549160018060401b038084168752858701818560401c168152604088019265ffffffffffff94858760801c16855260646060988993848d019960b01c8a52600154166040519d8e948593632f6ac02760e11b85526004850152602484015260448301525afa98891561044857600099611632575b509181604097959360e09a97959389519a51168a5251168589015251168587015260018060501b03905116908501528151608085015281015160a08401520151151560c0820152f35b98509492909593918389813d8311611695575b61164f8183612620565b810103126101ce5760408051996116658b6125b3565b80518b5286810151878c015201519687151588036101ce57896040988960e09c01529950919395909294966115e9565b503d611645565b346101ce5760603660031901126101ce5760206116b761267f565b6116c5602435600435613504565b509091156116e157505b6040516001600160401b039091168152f35b90506116cf565b346101ce5760e03660031901126101ce576001546001600160a01b0390811661170f613ade565b9160c4359160a43561171f613aed565b946024359260443594806040519863163de5af60e21b8a521660048901528460248901528560448901528360648901526020978881608481865afa8015610448576000906118cc575b6117ba91506117b4611778613aed565b611780613ade565b856040519261178e84612598565b168252898d8301528a6040830152151560608201528760808201528a60a082015261388d565b906131f4565b956117c3613aed565b956117cc613ade565b9260405197637b62877f60e11b895216600488015260248701526044860152151560648501528260848501528560a4850152868460c481845afa8015610448578794600091611898575b5060c4939495604051978896879563035e5f4360e51b875260643560048801521515602487015260448601526064850152608484015260a48301525afa9081156104485760009161186b575b50604051908152f35b90508181813d8311611891575b6118828183612620565b810103126101ce575182611862565b503d611878565b8581959692503d83116118c5575b6118b08183612620565b810103126101ce5791518693929060c4611816565b503d6118a6565b508881813d83116118f4575b6118e28183612620565b810103126101ce576117ba9051611768565b503d6118d8565b346101ce5760403660031901126101ce576004356001600160401b0381116101ce5761192b90369060040161268e565b6001600160401b03602435116101ce573660236024350112156101ce576001600160401b0360046024350135116101ce5736602480356004013560071b81350101116101ce5760015460405163481c6a7560e01b8152906001600160a01b03906020908390600490829085165afa8015610448576119b392600091611e3757501633146128db565b6119c4602435600401358214612916565b60005b8181106119d057005b6119db818385612951565b35906024356004013581101561118457600165ffffffffffff611a0760648460071b6024350101612961565b16101580611e0d575b611a1990612974565b8160005260036020526040600020611a3083613c03565b92611a39613d21565b93611a4485836135df565b5050611a5860248560071b813501016129b1565b61ffff808316911603611b74575b5060019350600080516020613dd9833981519152606061ffff60448660071b602435010187611a9482612aa5565b96018054898060d01b0319611ab260648b60071b6024350101612961565b60d01b169063ffffffff809916908b60201b8c60d01b03161717905560848760071b602435010195611ae387612ab6565b8660005260056020526040600020908154908b60901b8c60d81b039060901b16908b60901b8c60d81b03191617905565ffffffffffff611b34611b2e60248b60071b813501016129b1565b93612aa5565b97611b51611b4b60648c60071b6024350101612961565b91612ab6565b9260405199168952166020880152888060481b031660408701521693a3016119c7565b84611b8261ffff96836137e8565b5050611b9f81611b9a60248860071b813501016129b1565b6137e8565b5050611bf4611bdd611bb085613b03565b9190611bbc8187612b89565b611bc68387612c78565b611bd860248a60071b813501016129b1565b612d86565b611bef60248860071b813501016129b1565b612e6e565b85611c0760248760071b813501016129b1565b1660005260029081602052611c1f60406000206129c0565b91878416600052602052611c3660406000206129c0565b90611c4960248860071b813501016129b1565b90611c5c65ffffffffffff821115612b20565b606084810151608095860151858301519587015160018b01546040519d949790966001600160401b039283169691831695938316949092169265ffffffffffff928f9190611ca98361257c565b1690521660208d015260408c0152848b0152848a015260a089015260018060401b038160201c1660c089015260018060401b0390821c1660e08801526000610100880152845496600160401b88101561119a5760018801808755881015611184576001611dda93611d88829a89600052602060002090841b0191611d7761ffff8651169684549767ffffffffffff0000602089015160101b1690878060401b0319809a1617178555611d66868060401b0360408901511686612a30565b858060401b03908701511684612a59565b838060401b03908501511682612a82565b0191888060401b0360a08301511690835416178255611db2888060401b0360c08301511683612a30565b611dc7888060401b0360e08301511683612a59565b610100888060401b039101511690612a82565b61ffff80611df060248760071b813501016129b1565b16911682600080516020613d99833981519152600080a486611a66565b50611a19600365ffffffffffff611e2d60648560071b6024350101612961565b1611159050611a10565b61143d915060203d602011610d7f57610d718183612620565b346101ce5760203660031901126101ce576040611e6e600435613b03565b82519182526020820152f35b346101ce5760403660031901126101ce576001600160a01b036004358181168082036101ce576024359283168093036101ce576000549060ff8260081c161591828093612032575b801561201b575b15611fbf5760ff19811660011760005582611fad575b50151580611fa4575b15611f70576000805462010000600160b01b0319811660109490941b62010000600160b01b0316938417909155600180546001600160a01b031916909417909355909190611f3257005b610100600160b01b03191617600055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b60405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b6044820152606490fd5b50821515611ee8565b61ffff19166101011760005584611edf565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015611ec95750600160ff821614611ec9565b50600160ff821610611ec2565b346101ce5760203660031901126101ce5761ffff61205b61265a565b166000526002602052610100604060002080549060026001820154910154906040519260018060701b0380821685528160701c16602085015260e01c604084015260018060401b0380821660608501528160401c16608084015265ffffffffffff8160801c1660a084015260b01c60c083015260e0820152f35b346101ce5760c03660031901126101ce576040516120f281612598565b6120fa612733565b81526024356020820152604435604082015260643580151581036101ce57816121399160606020940152608435608082015260a43560a082015261388d565b604051908152f35b346101ce576020806003193601126101ce576004356001600160401b0381116101ce5761217290369060040161268e565b9061217c82612643565b9261218a6040519485612620565b828452601f19918261219b85612643565b0160005b8181106122ee5750506121b184612643565b936121bf6040519586612620565b8085526121cb81612643565b858401940136853760005b8181106122715750505060405193849360408501604086528251809152836060870193019060005b818110612249575050508482038584015251808252908201929160005b82811061222a57505050500390f35b835165ffffffffffff168552869550938101939281019260010161221b565b91959650919284610100826122616001948a516126be565b01960191019187969593926121fe565b60019061ffff979596978061228a610bd2848789612951565b166000526002865261229f60406000206129c0565b6122a983896131e0565b526122b482886131e0565b506122c3610bd2838688612951565b166000526006855265ffffffffffff604060002054166122e3828a6131e0565b5201959493956121d6565b83906122fc97959697613c48565b828288010152019594939561219f565b346101ce5760603660031901126101ce57602061232761265a565b6116c561233261267f565b91602435906136ad565b346101ce5760003660031901126101ce5760005460405160109190911c6001600160a01b03168152602090f35b346101ce5760003660031901126101ce576001546040516001600160a01b039091168152602090f35b346101ce57610120806003193601126101ce57602435906001600160401b03908183116101ce57366023840112156101ce578260040135906123d382612643565b936123e16040519586612620565b8285526020926024838588019202830101913683116101ce57602401905b8282106124b8575050505060806043193601126101ce5760405192608084018481108482111761119a5760405260443583811681036101ce57845260643583811681036101ce578285015260843565ffffffffffff811681036101ce57604085015260a4356001600160501b03811681036101ce57606085015260e4359384151585036101ce5760609461249e92610104359260c4359160043561321a565b929193908160405195168552169083015215156040820152f35b83823603126101ce57604051906124ce8261257c565b823561ffff811681036101ce578252858301359065ffffffffffff821682036101ce5782879283889501526125056040860161266b565b6040820152606061251781870161266b565b90820152608061252881870161266b565b9082015260a061253981870161266b565b9082015260c061254a81870161266b565b9082015261255a60e0860161266b565b60e082015261010061256d81870161266b565b908201528152019101906123ff565b61012081019081106001600160401b0382111761119a57604052565b60c081019081106001600160401b0382111761119a57604052565b606081019081106001600160401b0382111761119a57604052565b608081019081106001600160401b0382111761119a57604052565b61010081019081106001600160401b0382111761119a57604052565b60e081019081106001600160401b0382111761119a57604052565b601f909101601f19168101906001600160401b0382119082101761119a57604052565b6001600160401b03811161119a5760051b60200190565b6004359061ffff821682036101ce57565b35906001600160401b03821682036101ce57565b6044359081151582036101ce57565b9181601f840112156101ce578235916001600160401b0383116101ce576020808501948460051b0101116101ce57565b60e0809160018060701b03808251168552602082015116602085015263ffffffff604082015116604085015260018060401b03806060830151166060860152608082015116608085015265ffffffffffff60a08201511660a085015260018060501b0360c08201511660c08501520151910152565b600435906001600160a01b03821682036101ce57565b60609060031901126101ce576004356001600160a01b03811681036101ce57906024359060443590565b9060e091828201815190848452815180915261010090818501956020809401926000915b8383106127fb575050505050818163ffffffff60c0949385940151169085015260018060401b03806040830151166040860152606082015116606085015265ffffffffffff80608083015116608086015260a08201511660a0850152015191015290565b8451805161ffff168a528087015165ffffffffffff16878b01526040808201516001600160401b03908116918c01919091526060808301518216908c01526080808301518216908c015260a0808301518216908c015260c0808301518216908c01528183015181168b8401529083015116898301526101209098019793850193600190920191612797565b64ffffffffff6060809260018060481b038082511686528060208301511660208701526040820151166040860152015116910152565b908160209103126101ce57516001600160a01b03811681036101ce5790565b156128e257565b60405162461bcd60e51b815260206004820152600c60248201526b4d414e414745525f4f4e4c5960a01b6044820152606490fd5b1561291d57565b60405162461bcd60e51b815260206004820152600c60248201526b0aea49e9c8ebe988a9c8ea8960a31b6044820152606490fd5b91908110156111845760051b0190565b3565ffffffffffff811681036101ce5790565b1561297b57565b60405162461bcd60e51b815260206004820152600e60248201526d15d493d391d7d1561413d391539560921b6044820152606490fd5b3561ffff811681036101ce5790565b906040516129cd816125e9565b60e060028294805460018060701b0380821686528160701c166020860152831c6040850152600181015460018060401b0380821660608701528160401c16608086015265ffffffffffff8160801c1660a086015260b01c60c08501520154910152565b8054600160401b600160801b03191660409290921b600160401b600160801b0316919091179055565b8054600160801b600160c01b03191660809290921b600160801b600160c01b0316919091179055565b80546001600160c01b031660c09290921b6001600160c01b031916919091179055565b3563ffffffff811681036101ce5790565b356001600160481b03811681036101ce5790565b80546001600160b01b031660b09290921b6001600160b01b031916919091179055565b818102929181159184041417156105c557565b8115612b0a570490565b634e487b7160e01b600052601260045260246000fd5b15612b2757565b60405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b6044820152606490fd5b6001600160701b0391821690821603919082116105c557565b6001600160701b0391821690821601919082116105c557565b61ffff16600091818352600260205260408320839183612be0575b50606060019392600080516020613db983398151915292549060405191868060701b038092168352818116602084015260701c166040820152a4565b9091506402540be40090818102918183041490151715612c645760019291600080516020613db9833981519152916060916001600160701b03918290670de0b6b3a76400009004612c3382821115612b20565b8254911692612c4d828216858111156108c9578590612b57565b1690878060701b0319161781559250929350612ba4565b634e487b7160e01b84526011600452602484fd5b61ffff6000911680825260026020526040822092829082612ccf575b506060600080516020613db983398151915291849554906040519160018060701b038092168352818116602084015260701c166040820152a4565b6402540be40080820292508115918304141715612d72576001600160701b0392600080516020613db983398151915291606091908590670de0b6b3a76400009004612d1c82821115612b20565b16909586958154908160701c16838111600014612d6957612d49845b600160701b600160e01b0392612b57565b60701b16600160701b600160e01b03199190911617815595509150612c94565b612d4981612d38565b634e487b7160e01b83526011600452602483fd5b61ffff1690816000526002602052604060002060009183612de0575b5091600080516020613db98339815191526060600194938594549060405191868060701b038092168352818116602084015260701c166040820152a4565b90916402540be40091828102928184041490151715612e5a575091600080516020613db9833981519152606060019493670de0b6b3a764000086950490858060701b0382612e318280951115612b20565b1691815490612e4284828416612b70565b1690878060701b031916178155939550935050612da2565b634e487b7160e01b81526011600452602490fd5b91909161ffff60009116808252600260205260408220829482612ec8575b50606060019495600080516020613db983398151915292549060405191878060701b038092168352818116602084015260701c166040820152a4565b909294506402540be40090818102918183041490151715612f5357606060019495670de0b6b3a7640000600080516020613db9833981519152930494868060701b0386612f188280991115612b20565b169195815490612f36848a60701b8b60e01b03928460701c16612b70565b60701b16908860701b8960e01b0319161781559250959450612e8c565b634e487b7160e01b85526011600452602485fd5b919082039182116105c557565b90801561301457811561300d57818060011461300557600214612ff45760208110610133831016604e8210600b84101617612fef57600190815b808211612fc6575050816000190481116105c5570290565b9092806000190481116105c557818416612fe6575b800292811c90612fae565b80920291612fdb565b900a90565b905060ff81116105c5576001901b90565b505050600190565b5050600090565b5050600190565b6001600160401b0391821690821601919082116105c557565b9060a082019182519260c08201938451116131ad5760408201805160608401805180831097939190881561319c5750613071925051905190612f67565b60e0840180516001600160481b0394919391908516151580613186575b6000901561317b57506130b9916130a89151905190612f67565b63ffffffff60808701511690612aed565b926402540be400918281029281840414901517156105c5576130dd92511690612b00565b6131016101008401926130fb65ffffffffffff938486511690612f74565b90612aed565b91511690600482116105c55761312191670de0b6b3a76400000a90612b00565b6001600160401b0390819061313882821115612b20565b1680928560001461316957828151165b951561315f576020015161315c921661301b565b91565b6020915001511691565b613176828483511661301b565b613148565b945050505050613121565b5065ffffffffffff61010087015116151561308e565b9150506131a891612f67565b613071565b60405162461bcd60e51b815260206004820152600b60248201526a212627a1a5afa7a92222a960a91b6044820152606490fd5b80518210156111845760209160051b010190565b919082018092116105c557565b6001600160401b0391821690821603919082116105c557565b9291959493909361322b84866131e0565b519365ffffffffffff908160208701511660408a0190838251161197805160001981019081116105c55783036133325750505050806132726132819261ffff8751166136ad565b50841561332b57505b93613504565b50821561332457505b925b84156132bd575050602085015161315c92916001600160401b03916132b49190831690613201565b95511690613201565b9095506132e461315c9392876000146133105760408301516001600160401b031690613201565b95156132fd5760c001516001600160401b031690613201565b60e001516001600160401b031690613201565b60608301516001600160401b031690613201565b905061328a565b905061327b565b91600191939650809450018093116105c557869261334f916131e0565b5193826133be575b50506133b257801561339f5760808201516001600160401b03165b91811561338d5760c001516001600160401b03165b9261328c565b60e001516001600160401b0316613387565b60a08201516001600160401b0316613372565b50600094508493915050565b8091925060208501511691511610153880613357565b9081546133e081612643565b926040936133f085519182612620565b828152809460208092019260005281600020906000935b85851061341657505050505050565b60028460019284516134278161257c565b865461ffff8116825265ffffffffffff8160101c1684830152858060401b03908181891c16888401526080918082841c16606085015260c091821c83850152878a0154809382821660a087015282828c1c16848701521c1660e08401521c610100820152815201930194019391613407565b906040516134a681612605565b60c0600282946134b5816133d4565b8452600181015463ffffffff8116602086015260018060401b03808260201c1660408701528160601c16606086015265ffffffffffff8160a01c16608086015260d01c60a08501520154910152565b906135ba9180600052600360205261351f6040600020613499565b61352882613b03565b92909360018060401b039485604085015116956060850151169463ffffffff6020860151169165ffffffffffff8060808801511695600052600560205260a060018060481b0360406000205460901c1697015116966040519861358a8a61257c565b8952602089015260408801526060870152608086015260a085015260c084015260e0830152610100820152613034565b909192565b9081526001600160401b0391821660208201529116604082015260600190565b917ffc346088168e874385f54275cfc143d52a459a0fdc016c1bb6c237097ef27bf49261360c8382613504565b50949085948196846000526003602052600160406000200192835461363965ffffffffffff851115612b20565b602091821b600160201b600160601b0316600160201b600160d01b0319909116606093841b600160601b600160a01b0316171760a084901b65ffffffffffff60a01b1617938490556040519384936136a89382901c6001600160401b03908116939290921c90911690846135bf565b0390a2565b61ffff909291921660009281845260026020526136cc604085206129c0565b606081015160808201518251670de0b6b3a7640000976001600160401b03938416969290931694919392906001600160701b03908116898102919080159083048b141715612d725760208501511689810299818b0414901517156137ad576135ba979863ffffffff60408601511692604065ffffffffffff918260a0890151169760c060018060481b0391015116988152600660205220541696604051986137738a61257c565b895260208901526402540be4008092046040890152046060870152608086015260a085015260c084015260e0830152610100820152613034565b634e487b7160e01b82526011600452602482fd5b805465ffffffffffff60801b191660809290921b65ffffffffffff60801b16919091179055565b917fd246da22fc6064e2fae4f4affdb9425eac12bebcf4f08fb3892f08480513752e61381483856136ad565b5091909382946136a861ffff8298169485600052600260205261383f60016040600020019182612a30565b80546001600160401b0319166001600160401b0393841617815561387765ffffffffffff61386f81871115612b20565b8516826137c1565b54604051938385948360401c16921690846135bf565b906000809260018060a01b03815116845260049360208581526040808320918085019283518552815281842082860151855281528184208251906138d0826125ce565b549060018060401b039485831682528583861c168483015284820165ffffffffffff94858560801c16825260609460b01c858501528251895260038152613918878a206133d4565b95613921613d21565b978a81519161392f8361257c565b81835281858401528201528a878201528a60808201528a60a08201528a60c08201528a60e08201528a610100820152928751158015613ab8575b508751159182938315613aa4575b505050613a3c575b50508396959651805b6139c2575b505050505050505060649293506402540be400916139b88260a060806139bd95015191015190612aed565b612aed565b040490565b90919293949596986000198201918211613a295790613a0f83926139f7898c898f9c9b9a999851910151151590888b8861321a565b9d91908083168284161115613a2257505b16906131f4565b99613a1d5795969580613988565b61398d565b9050613a08565b634e487b7160e01b885260118c52602488fd5b87929a50600014613a815750613a718951613a5d87868c0151151592613504565b50909115613a7a57505b8284511690613201565b1697388061397f565b9050613a67565b88840151613a7191839115613a9a5760c0015116613a67565b60e0015116613a67565b819293508501511691511610388080613977565b909350613aca57818701519238613969565b50634e487b7160e01b895260328d52602489fd5b60843580151581036101ce5790565b6004356001600160a01b03811681036101ce5790565b90600060018060a01b03815460101c16604051916328daca2160e01b948584528060048501528160248501526020958685604481875afa948515613bf857908792918496613bc0575b50604490604051958693849283526004830152600160248301525afa948515613bb3578195613b7d575b5050509190565b909180939550813d8311613bac575b613b968183612620565b81010312613ba957505191388080613b76565b80fd5b503d613b8c565b50604051903d90823e3d90fd5b838193949297503d8311613bf1575b613bd98183612620565b81010312613bed5751938691906044613b4c565b8280fd5b503d613bcf565b6040513d85823e3d90fd5b60009081526003602052613c19604082206133d4565b80519081613c2657505090565b60001982019290918311612e5a575061ffff91613c42916131e0565b51511690565b60405190613c55826125e9565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b60405190613c9382612605565b816060815260c06000918260208201528260408201528260608201528260808201528260a08201520152565b60405190613ccc826125ce565b60006060838281528260208201528260408201520152565b90604051613cf1816125ce565b91546001600160481b038082168452604882901c81166020850152609082901c16604084015260d81c6060830152565b61a4b146148015613d8c575b613d35574390565b60405163a3b1b31d60e01b815260208160048160645afa90811561044857600091613d5e575090565b906020823d8211613d84575b81613d7760209383612620565b81010312613ba957505190565b3d9150613d6a565b5062066eed4614613d2d56fe5beb7d73e1c3cd532d47c9e896931df26d9be450a833bd5fe1ace6bf5690d468946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2331caa8de744ea74fb9e0c2f32b7fed3b30ea426105a6b73926010be6372458ef4fe3f382c07994321b091a508fb27d2cec41f6dfa9f52b97a01af5b992fdc1681a164736f6c6343000811000a",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 37290,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 37293,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14750,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterfaceV5)36489"
      },
      {
        "astId": 14753,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "pairInfos",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GNSPairInfosInterfaceV6)35052"
      },
      {
        "astId": 14758,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "groups",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_struct(Group)34695_storage)"
      },
      {
        "astId": 14763,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "pairs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Pair)34669_storage)"
      },
      {
        "astId": 14772,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "initialAccFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)34704_storage)))"
      },
      {
        "astId": 14777,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "pairOis",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(PairOi)34678_storage)"
      },
      {
        "astId": 14781,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "groupFeeExponents",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint48)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PairGroup)34652_storage)dyn_storage": {
        "base": "t_struct(PairGroup)34652_storage",
        "encoding": "dynamic_array",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GNSPairInfosInterfaceV6)35052": {
        "encoding": "inplace",
        "label": "contract GNSPairInfosInterfaceV6",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterfaceV5)36489": {
        "encoding": "inplace",
        "label": "contract StorageInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)34704_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)34704_storage))"
      },
      "t_mapping(t_uint16,t_struct(Group)34695_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct GNSBorrowingFeesInterfaceV6_4.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)34695_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)34704_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InitialAccFees)34704_storage)"
      },
      "t_mapping(t_uint256,t_struct(InitialAccFees)34704_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees)",
        "numberOfBytes": "32",
        "value": "t_struct(InitialAccFees)34704_storage"
      },
      "t_mapping(t_uint256,t_struct(Pair)34669_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.Pair)",
        "numberOfBytes": "32",
        "value": "t_struct(Pair)34669_storage"
      },
      "t_mapping(t_uint256,t_struct(PairOi)34678_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.PairOi)",
        "numberOfBytes": "32",
        "value": "t_struct(PairOi)34678_storage"
      },
      "t_mapping(t_uint256,t_uint48)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint48)",
        "numberOfBytes": "32",
        "value": "t_uint48"
      },
      "t_struct(Group)34695_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.Group",
        "members": [
          {
            "astId": 34680,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "oiLong",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 34682,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "oiShort",
            "offset": 14,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 34684,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "feePerBlock",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 34686,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeLong",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 34688,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeShort",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 34690,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accLastUpdatedBlock",
            "offset": 16,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 34692,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "maxOi",
            "offset": 22,
            "slot": "1",
            "type": "t_uint80"
          },
          {
            "astId": 34694,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "lastAccBlockWeightedMarketCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(InitialAccFees)34704_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees",
        "members": [
          {
            "astId": 34697,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accPairFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 34699,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accGroupFee",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 34701,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "block",
            "offset": 16,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 34703,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "_placeholder",
            "offset": 22,
            "slot": "0",
            "type": "t_uint80"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Pair)34669_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.Pair",
        "members": [
          {
            "astId": 34656,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "groups",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(PairGroup)34652_storage)dyn_storage"
          },
          {
            "astId": 34658,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "feePerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 34660,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeLong",
            "offset": 4,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 34662,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeShort",
            "offset": 12,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 34664,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accLastUpdatedBlock",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 34666,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "feeExponent",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 34668,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "lastAccBlockWeightedMarketCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PairGroup)34652_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup",
        "members": [
          {
            "astId": 34635,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "groupIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 34637,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "block",
            "offset": 2,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 34639,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "initialAccFeeLong",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 34641,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "initialAccFeeShort",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 34643,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "prevGroupAccFeeLong",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 34645,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "prevGroupAccFeeShort",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 34647,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "pairAccFeeLong",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 34649,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "pairAccFeeShort",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 34651,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "_placeholder",
            "offset": 24,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PairOi)34678_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.PairOi",
        "members": [
          {
            "astId": 34671,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "long",
            "offset": 0,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 34673,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "short",
            "offset": 9,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 34675,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "max",
            "offset": 18,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 34677,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "_placeholder",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint72": {
        "encoding": "inplace",
        "label": "uint72",
        "numberOfBytes": "9"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}