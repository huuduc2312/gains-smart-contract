{
  "address": "0xEefb58aa0251B871De613048F3049753820907dF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "senders",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "changedBy",
          "type": "address"
        }
      ],
      "name": "AuthorizedSendersChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "CancelOracleRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "specId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "callbackAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "callbackFunctionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cancelExpiration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "OracleRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "OracleResponse",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "acceptedContract",
          "type": "address"
        }
      ],
      "name": "OwnableContractAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "senders",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "changedBy",
          "type": "address"
        }
      ],
      "name": "TargetsUpdatedAuthorizedSenders",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "senders",
          "type": "address[]"
        }
      ],
      "name": "acceptAuthorizedReceivers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "ownable",
          "type": "address[]"
        }
      ],
      "name": "acceptOwnableContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunc",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "cancelOracleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunc",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "cancelOracleRequestByRequester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "distributeFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "callbackAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "fulfillOracleRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "callbackAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fulfillOracleRequest2",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthorizedSenders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpiryTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "isAuthorizedSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "specId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dataVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "operatorRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "specId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callbackAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dataVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "oracleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ownerForward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ownerTransferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "senders",
          "type": "address[]"
        }
      ],
      "name": "setAuthorizedSenders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "senders",
          "type": "address[]"
        }
      ],
      "name": "setAuthorizedSendersOn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "ownable",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnableContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7777480013738bf28ae5fac980962a1bf160fb41ce7b52e38c5c842bb43753a",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0xEefb58aa0251B871De613048F3049753820907dF",
    "transactionIndex": 72,
    "gasUsed": "2681763",
    "logsBloom": "0x
    "blockHash": "0x5a25749dfaaac2b434205635dff328ae810338eca37b489c43606bfd57cd8098",
    "transactionHash": "0xd7777480013738bf28ae5fac980962a1bf160fb41ce7b52e38c5c842bb43753a",
    "logs": [],
    "blockNumber": 6030580,
    "cumulativeGasUsed": "13260477",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x779877A7B0D9E8603169DdbD7836e478b4624789",
    "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA"
  ],
  "numDeployments": 1,
  "solcInputHash": "1b39a71b36ed46a99ab49567696652b7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"AuthorizedSendersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"CancelOracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"specId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelExpiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"OracleResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acceptedContract\",\"type\":\"address\"}],\"name\":\"OwnableContractAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"changedBy\",\"type\":\"address\"}],\"name\":\"TargetsUpdatedAuthorizedSenders\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"}],\"name\":\"acceptAuthorizedReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ownable\",\"type\":\"address[]\"}],\"name\":\"acceptOwnableContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOracleRequestByRequester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"fulfillOracleRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fulfillOracleRequest2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizedSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorizedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"specId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"operatorRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"specId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dataVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"oracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ownerForward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ownerTransferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"}],\"name\":\"setAuthorizedSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"senders\",\"type\":\"address[]\"}],\"name\":\"setAuthorizedSendersOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ownable\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnableContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptAuthorizedReceivers(address[],address[])\":{\"params\":{\"senders\":\"The addresses that are allowed to send updates\",\"targets\":\"The addresses to set permissions on\"}},\"acceptOwnableContracts(address[])\":{\"details\":\"Must be the pending owner on the contract\",\"params\":{\"ownable\":\"list of addresses of Ownable contracts to accept\"}},\"cancelOracleRequest(bytes32,uint256,bytes4,uint256)\":{\"details\":\"Given params must hash to a commitment stored on the contract in order for the request to be valid. Emits CancelOracleRequest event.\",\"params\":{\"callbackFunc\":\"The requester's specified callback function selector\",\"expiration\":\"The time of the expiration for the request\",\"payment\":\"The amount of payment given (specified in wei)\",\"requestId\":\"The request ID\"}},\"cancelOracleRequestByRequester(uint256,uint256,bytes4,uint256)\":{\"details\":\"Given params must hash to a commitment stored on the contract in order for the request to be valid. Emits CancelOracleRequest event.\",\"params\":{\"callbackFunc\":\"The requester's specified callback function selector\",\"expiration\":\"The time of the expiration for the request\",\"nonce\":\"The nonce used to generate the request ID\",\"payment\":\"The amount of payment given (specified in wei)\"}},\"constructor\":{\"details\":\"Sets the LinkToken address for the imported LinkTokenInterface\",\"params\":{\"link\":\"The address of the LINK token\",\"owner\":\"The address of the owner\"}},\"distributeFunds(address[],uint256[])\":{\"details\":\"Array length must be equal, ETH sent must equal the sum of amounts. A malicious receiver could cause the distribution to revert, in which case it is expected that the address is removed from the list.\",\"params\":{\"amounts\":\"list of amounts\",\"receivers\":\"list of addresses\"}},\"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)\":{\"details\":\"Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.\",\"params\":{\"callbackAddress\":\"The callback address to call for fulfillment\",\"callbackFunctionId\":\"The callback function ID to use for fulfillment\",\"data\":\"The data to return to the consuming contract\",\"expiration\":\"The expiration that the node should respond by before the requester can cancel\",\"payment\":\"The payment amount that will be released for the oracle (specified in wei)\",\"requestId\":\"The fulfillment request ID that must match the requester's\"},\"returns\":{\"_0\":\"Status if the external call was successful\"}},\"fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)\":{\"details\":\"Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.\",\"params\":{\"callbackAddress\":\"The callback address to call for fulfillment\",\"callbackFunctionId\":\"The callback function ID to use for fulfillment\",\"data\":\"The data to return to the consuming contract\",\"expiration\":\"The expiration that the node should respond by before the requester can cancel\",\"payment\":\"The payment amount that will be released for the oracle (specified in wei)\",\"requestId\":\"The fulfillment request ID that must match the requester's\"},\"returns\":{\"_0\":\"Status if the external call was successful\"}},\"getAuthorizedSenders()\":{\"returns\":{\"_0\":\"array of addresses\"}},\"getChainlinkToken()\":{\"details\":\"This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract\"},\"isAuthorizedSender(address)\":{\"params\":{\"sender\":\"The address of the Chainlink node\"},\"returns\":{\"_0\":\"The authorization status of the node\"}},\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"The data payload's first 2 words will be overwritten by the `sender` and `amount` values to ensure correctness. Calls oracleRequest.\",\"params\":{\"amount\":\"Amount of LINK sent (specified in wei)\",\"data\":\"Payload of the transaction\",\"sender\":\"Address of the sender\"}},\"operatorRequest(address,uint256,bytes32,bytes4,uint256,uint256,bytes)\":{\"details\":\"Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.\",\"params\":{\"callbackFunctionId\":\"The callback function ID for the response\",\"data\":\"The extra request parameters\",\"dataVersion\":\"The specified data version\",\"nonce\":\"The nonce sent by the requester\",\"payment\":\"The amount of payment given (specified in wei)\",\"sender\":\"The sender of the request\",\"specId\":\"The Job Specification ID\"}},\"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)\":{\"params\":{\"callbackAddress\":\"The address the oracle data will be sent to\",\"callbackFunctionId\":\"The callback function ID for the response\",\"data\":\"The extra request parameters\",\"dataVersion\":\"The specified data version\",\"nonce\":\"The nonce sent by the requester\",\"payment\":\"The amount of payment given (specified in wei)\",\"specId\":\"The Job Specification ID\"}},\"ownerForward(address,bytes)\":{\"details\":\"Only callable by the owner\",\"params\":{\"data\":\"to forward\",\"to\":\"address\"}},\"ownerTransferAndCall(address,uint256,bytes)\":{\"params\":{\"data\":\"The extra data to be passed to the receiving contract.\",\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"},\"returns\":{\"success\":\"bool\"}},\"setAuthorizedSenders(address[])\":{\"params\":{\"senders\":\"The addresses of the authorized Chainlink node\"}},\"setAuthorizedSendersOn(address[],address[])\":{\"params\":{\"senders\":\"The addresses that are allowed to send updates\",\"targets\":\"The addresses to set permissions on\"}},\"transferOwnableContracts(address[],address)\":{\"params\":{\"newOwner\":\"address to transfer ownership to\",\"ownable\":\"list of addresses to transfer\"}},\"typeAndVersion()\":{\"returns\":{\"_0\":\"Type and version string\"}},\"withdraw(address,uint256)\":{\"details\":\"The owner of the contract can be another wallet and does not have to be a Chainlink node\",\"params\":{\"amount\":\"The amount to send (specified in wei)\",\"recipient\":\"The address to send the LINK token to\"}},\"withdrawable()\":{\"details\":\"We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\",\"returns\":{\"_0\":\"The amount of withdrawable LINK on the contract\"}}},\"title\":\"The Chainlink Operator contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptAuthorizedReceivers(address[],address[])\":{\"notice\":\"Accepts ownership of ownable contracts and then immediately sets the authorized sender list on each of the newly owned contracts. This is primarily intended for Authorized Forwarders but could possibly be extended to work with future contracts.\"},\"acceptOwnableContracts(address[])\":{\"notice\":\"Accept the ownership of an ownable contract. This is primarily intended for Authorized Forwarders but could possibly be extended to work with future contracts.\"},\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"cancelOracleRequest(bytes32,uint256,bytes4,uint256)\":{\"notice\":\"Allows recipient to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the recipient address.\"},\"cancelOracleRequestByRequester(uint256,uint256,bytes4,uint256)\":{\"notice\":\"Allows requester to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the recipient address.\"},\"constructor\":{\"notice\":\"Deploy with the address of the LINK token\"},\"distributeFunds(address[],uint256[])\":{\"notice\":\"Distribute funds to multiple addresses using ETH send to this payable function.\"},\"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)\":{\"notice\":\"Called by the Chainlink node to fulfill requests\"},\"fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)\":{\"notice\":\"Called by the Chainlink node to fulfill requests with multi-word support\"},\"getAuthorizedSenders()\":{\"notice\":\"Retrieve a list of authorized senders\"},\"getChainlinkToken()\":{\"notice\":\"Returns the address of the LINK token\"},\"isAuthorizedSender(address)\":{\"notice\":\"Use this to check if a node is authorized for fulfilling requests\"},\"onTokenTransfer(address,uint256,bytes)\":{\"notice\":\"Called when LINK is sent to the contract via `transferAndCall`\"},\"operatorRequest(address,uint256,bytes32,bytes4,uint256,uint256,bytes)\":{\"notice\":\"Creates the Chainlink request\"},\"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)\":{\"notice\":\"Creates the Chainlink request. This is a backwards compatible API with the Oracle.sol contract, but the behavior changes because callbackAddress is assumed to be the same as the request sender.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"ownerForward(address,bytes)\":{\"notice\":\"Forward a call to another contract\"},\"ownerTransferAndCall(address,uint256,bytes)\":{\"notice\":\"Interact with other LinkTokenReceiver contracts by calling transferAndCall\"},\"setAuthorizedSenders(address[])\":{\"notice\":\"Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\"},\"setAuthorizedSendersOn(address[],address[])\":{\"notice\":\"Sets the fulfillment permission for\"},\"transferOwnableContracts(address[],address)\":{\"notice\":\"Transfer the ownership of ownable contracts. This is primarily intended for Authorized Forwarders but could possibly be extended to work with future contracts.\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"typeAndVersion()\":{\"notice\":\"The type and version of this contract\"},\"withdraw(address,uint256)\":{\"notice\":\"Allows the node operator to withdraw earned LINK to a given address\"},\"withdrawable()\":{\"notice\":\"Displays the amount of LINK that is available for the node operator to withdraw\"}},\"notice\":\"Node operators can deploy this contract to fulfill requests sent to them\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.7/Operator.sol\":\"Operator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/AuthorizedReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./interfaces/AuthorizedReceiverInterface.sol\\\";\\n\\nabstract contract AuthorizedReceiver is AuthorizedReceiverInterface {\\n  mapping(address => bool) private s_authorizedSenders;\\n  address[] private s_authorizedSenderList;\\n\\n  event AuthorizedSendersChanged(address[] senders, address changedBy);\\n\\n  /**\\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\\n   * @param senders The addresses of the authorized Chainlink node\\n   */\\n  function setAuthorizedSenders(address[] calldata senders) external override validateAuthorizedSenderSetter {\\n    require(senders.length > 0, \\\"Must have at least 1 sender\\\");\\n    // Set previous authorized senders to false\\n    uint256 authorizedSendersLength = s_authorizedSenderList.length;\\n    for (uint256 i = 0; i < authorizedSendersLength; i++) {\\n      s_authorizedSenders[s_authorizedSenderList[i]] = false;\\n    }\\n    // Set new to true\\n    for (uint256 i = 0; i < senders.length; i++) {\\n      require(s_authorizedSenders[senders[i]] == false, \\\"Must not have duplicate senders\\\");\\n      s_authorizedSenders[senders[i]] = true;\\n    }\\n    // Replace list\\n    s_authorizedSenderList = senders;\\n    emit AuthorizedSendersChanged(senders, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Retrieve a list of authorized senders\\n   * @return array of addresses\\n   */\\n  function getAuthorizedSenders() external view override returns (address[] memory) {\\n    return s_authorizedSenderList;\\n  }\\n\\n  /**\\n   * @notice Use this to check if a node is authorized for fulfilling requests\\n   * @param sender The address of the Chainlink node\\n   * @return The authorization status of the node\\n   */\\n  function isAuthorizedSender(address sender) public view override returns (bool) {\\n    return s_authorizedSenders[sender];\\n  }\\n\\n  /**\\n   * @notice customizable guard of who can update the authorized sender list\\n   * @return bool whether sender can update authorized sender list\\n   */\\n  function _canSetAuthorizedSenders() internal virtual returns (bool);\\n\\n  /**\\n   * @notice validates the sender is an authorized sender\\n   */\\n  function _validateIsAuthorizedSender() internal view {\\n    require(isAuthorizedSender(msg.sender), \\\"Not authorized sender\\\");\\n  }\\n\\n  /**\\n   * @notice prevents non-authorized addresses from calling this method\\n   */\\n  modifier validateAuthorizedSender() {\\n    _validateIsAuthorizedSender();\\n    _;\\n  }\\n\\n  /**\\n   * @notice prevents non-authorized addresses from calling this method\\n   */\\n  modifier validateAuthorizedSenderSetter() {\\n    require(_canSetAuthorizedSenders(), \\\"Cannot set authorized senders\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x3961993ba838c7e36467f03ccf172c0c7afb17cd7cafd727aa69514bd999bb9f\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xba5a8452dcb14e3fecb9f39e415db6cd8b45cbe0a03899febe4f5e715396a9cc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd9c444260e0ed47bfcf49f269fa52af499e6707b741ae49c7d79e49168c9e4b2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/LinkTokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract LinkTokenReceiver {\\n  /**\\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\\n   * @dev The data payload's first 2 words will be overwritten by the `sender` and `amount`\\n   * values to ensure correctness. Calls oracleRequest.\\n   * @param sender Address of the sender\\n   * @param amount Amount of LINK sent (specified in wei)\\n   * @param data Payload of the transaction\\n   */\\n  function onTokenTransfer(\\n    address sender,\\n    uint256 amount,\\n    bytes memory data\\n  ) public validateFromLINK permittedFunctionsForLINK(data) {\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(data, 36), sender) // ensure correct sender is passed\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(data, 68), amount) // ensure correct amount is passed\\n    }\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = address(this).delegatecall(data); // calls oracleRequest\\n    require(success, \\\"Unable to create request\\\");\\n  }\\n\\n  function getChainlinkToken() public view virtual returns (address);\\n\\n  /**\\n   * @notice Validate the function called on token transfer\\n   */\\n  function _validateTokenTransferAction(bytes4 funcSelector, bytes memory data) internal virtual;\\n\\n  /**\\n   * @dev Reverts if not sent from the LINK token\\n   */\\n  modifier validateFromLINK() {\\n    require(msg.sender == getChainlinkToken(), \\\"Must use LINK token\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\\n   * @param data The data payload of the request\\n   */\\n  modifier permittedFunctionsForLINK(bytes memory data) {\\n    bytes4 funcSelector;\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      funcSelector := mload(add(data, 32))\\n    }\\n    _validateTokenTransferAction(funcSelector, data);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x762830492b4403d32f77cdb54978a45ae972614fe0b4b93f7e1cc3892b145fa6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AuthorizedReceiver.sol\\\";\\nimport \\\"./LinkTokenReceiver.sol\\\";\\nimport \\\"./ConfirmedOwner.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\nimport \\\"./interfaces/WithdrawalInterface.sol\\\";\\nimport \\\"./vendor/Address.sol\\\";\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title The Chainlink Operator contract\\n * @notice Node operators can deploy this contract to fulfill requests sent to them\\n */\\ncontract Operator is AuthorizedReceiver, ConfirmedOwner, LinkTokenReceiver, OperatorInterface, WithdrawalInterface {\\n  using Address for address;\\n  using SafeMathChainlink for uint256;\\n\\n  struct Commitment {\\n    bytes31 paramsHash;\\n    uint8 dataVersion;\\n  }\\n\\n  uint256 public constant getExpiryTime = 5 minutes;\\n  uint256 private constant MAXIMUM_DATA_VERSION = 256;\\n  uint256 private constant MINIMUM_CONSUMER_GAS_LIMIT = 400000;\\n  uint256 private constant SELECTOR_LENGTH = 4;\\n  uint256 private constant EXPECTED_REQUEST_WORDS = 2;\\n  uint256 private constant MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\\n  // We initialize fields to 1 instead of 0 so that the first invocation\\n  // does not cost more gas.\\n  uint256 private constant ONE_FOR_CONSISTENT_GAS_COST = 1;\\n  // oracleRequest is intended for version 1, enabling single word responses\\n  bytes4 private constant ORACLE_REQUEST_SELECTOR = this.oracleRequest.selector;\\n  // operatorRequest is intended for version 2, enabling multi-word responses\\n  bytes4 private constant OPERATOR_REQUEST_SELECTOR = this.operatorRequest.selector;\\n\\n  LinkTokenInterface internal immutable linkToken;\\n  mapping(bytes32 => Commitment) private s_commitments;\\n  mapping(address => bool) private s_owned;\\n  // Tokens sent for requests that have not been fulfilled yet\\n  uint256 private s_tokensInEscrow = ONE_FOR_CONSISTENT_GAS_COST;\\n\\n  event OracleRequest(\\n    bytes32 indexed specId,\\n    address requester,\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddr,\\n    bytes4 callbackFunctionId,\\n    uint256 cancelExpiration,\\n    uint256 dataVersion,\\n    bytes data\\n  );\\n\\n  event CancelOracleRequest(bytes32 indexed requestId);\\n\\n  event OracleResponse(bytes32 indexed requestId);\\n\\n  event OwnableContractAccepted(address indexed acceptedContract);\\n\\n  event TargetsUpdatedAuthorizedSenders(address[] targets, address[] senders, address changedBy);\\n\\n  /**\\n   * @notice Deploy with the address of the LINK token\\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\\n   * @param link The address of the LINK token\\n   * @param owner The address of the owner\\n   */\\n  constructor(address link, address owner) ConfirmedOwner(owner) {\\n    linkToken = LinkTokenInterface(link); // external but already deployed and unalterable\\n  }\\n\\n  /**\\n   * @notice The type and version of this contract\\n   * @return Type and version string\\n   */\\n  function typeAndVersion() external pure virtual returns (string memory) {\\n    return \\\"Operator 1.0.0\\\";\\n  }\\n\\n  /**\\n   * @notice Creates the Chainlink request. This is a backwards compatible API\\n   * with the Oracle.sol contract, but the behavior changes because\\n   * callbackAddress is assumed to be the same as the request sender.\\n   * @param callbackAddress The consumer of the request\\n   * @param payment The amount of payment given (specified in wei)\\n   * @param specId The Job Specification ID\\n   * @param callbackAddress The address the oracle data will be sent to\\n   * @param callbackFunctionId The callback function ID for the response\\n   * @param nonce The nonce sent by the requester\\n   * @param dataVersion The specified data version\\n   * @param data The extra request parameters\\n   */\\n  function oracleRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external override validateFromLINK {\\n    (bytes32 requestId, uint256 expiration) = _verifyAndProcessOracleRequest(\\n      sender,\\n      payment,\\n      callbackAddress,\\n      callbackFunctionId,\\n      nonce,\\n      dataVersion\\n    );\\n    emit OracleRequest(specId, sender, requestId, payment, sender, callbackFunctionId, expiration, dataVersion, data);\\n  }\\n\\n  /**\\n   * @notice Creates the Chainlink request\\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\\n   * Emits OracleRequest event for the Chainlink node to detect.\\n   * @param sender The sender of the request\\n   * @param payment The amount of payment given (specified in wei)\\n   * @param specId The Job Specification ID\\n   * @param callbackFunctionId The callback function ID for the response\\n   * @param nonce The nonce sent by the requester\\n   * @param dataVersion The specified data version\\n   * @param data The extra request parameters\\n   */\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external override validateFromLINK {\\n    (bytes32 requestId, uint256 expiration) = _verifyAndProcessOracleRequest(\\n      sender,\\n      payment,\\n      sender,\\n      callbackFunctionId,\\n      nonce,\\n      dataVersion\\n    );\\n    emit OracleRequest(specId, sender, requestId, payment, sender, callbackFunctionId, expiration, dataVersion, data);\\n  }\\n\\n  /**\\n   * @notice Called by the Chainlink node to fulfill requests\\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\\n   * Will call the callback address' callback function without bubbling up error\\n   * checking in a `require` so that the node can get paid.\\n   * @param requestId The fulfillment request ID that must match the requester's\\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\\n   * @param callbackAddress The callback address to call for fulfillment\\n   * @param callbackFunctionId The callback function ID to use for fulfillment\\n   * @param expiration The expiration that the node should respond by before the requester can cancel\\n   * @param data The data to return to the consuming contract\\n   * @return Status if the external call was successful\\n   */\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  )\\n    external\\n    override\\n    validateAuthorizedSender\\n    validateRequestId(requestId)\\n    validateCallbackAddress(callbackAddress)\\n    returns (bool)\\n  {\\n    _verifyOracleRequestAndProcessPayment(requestId, payment, callbackAddress, callbackFunctionId, expiration, 1);\\n    emit OracleResponse(requestId);\\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \\\"Must provide consumer enough gas\\\");\\n    // All updates to the oracle's fulfillment should come before calling the\\n    // callback(addr+functionId) as it is untrusted.\\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\\n    (bool success, ) = callbackAddress.call(abi.encodeWithSelector(callbackFunctionId, requestId, data)); // solhint-disable-line avoid-low-level-calls\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Called by the Chainlink node to fulfill requests with multi-word support\\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\\n   * Will call the callback address' callback function without bubbling up error\\n   * checking in a `require` so that the node can get paid.\\n   * @param requestId The fulfillment request ID that must match the requester's\\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\\n   * @param callbackAddress The callback address to call for fulfillment\\n   * @param callbackFunctionId The callback function ID to use for fulfillment\\n   * @param expiration The expiration that the node should respond by before the requester can cancel\\n   * @param data The data to return to the consuming contract\\n   * @return Status if the external call was successful\\n   */\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  )\\n    external\\n    override\\n    validateAuthorizedSender\\n    validateRequestId(requestId)\\n    validateCallbackAddress(callbackAddress)\\n    validateMultiWordResponseId(requestId, data)\\n    returns (bool)\\n  {\\n    _verifyOracleRequestAndProcessPayment(requestId, payment, callbackAddress, callbackFunctionId, expiration, 2);\\n    emit OracleResponse(requestId);\\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \\\"Must provide consumer enough gas\\\");\\n    // All updates to the oracle's fulfillment should come before calling the\\n    // callback(addr+functionId) as it is untrusted.\\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\\n    (bool success, ) = callbackAddress.call(abi.encodePacked(callbackFunctionId, data)); // solhint-disable-line avoid-low-level-calls\\n    return success;\\n  }\\n\\n  /**\\n   * @notice Transfer the ownership of ownable contracts. This is primarily\\n   * intended for Authorized Forwarders but could possibly be extended to work\\n   * with future contracts.\\n   * @param ownable list of addresses to transfer\\n   * @param newOwner address to transfer ownership to\\n   */\\n  function transferOwnableContracts(address[] calldata ownable, address newOwner) external onlyOwner {\\n    for (uint256 i = 0; i < ownable.length; i++) {\\n      s_owned[ownable[i]] = false;\\n      OwnableInterface(ownable[i]).transferOwnership(newOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Accept the ownership of an ownable contract. This is primarily\\n   * intended for Authorized Forwarders but could possibly be extended to work\\n   * with future contracts.\\n   * @dev Must be the pending owner on the contract\\n   * @param ownable list of addresses of Ownable contracts to accept\\n   */\\n  function acceptOwnableContracts(address[] calldata ownable) public validateAuthorizedSenderSetter {\\n    for (uint256 i = 0; i < ownable.length; i++) {\\n      s_owned[ownable[i]] = true;\\n      emit OwnableContractAccepted(ownable[i]);\\n      OwnableInterface(ownable[i]).acceptOwnership();\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets the fulfillment permission for\\n   * @param targets The addresses to set permissions on\\n   * @param senders The addresses that are allowed to send updates\\n   */\\n  function setAuthorizedSendersOn(address[] calldata targets, address[] calldata senders)\\n    public\\n    validateAuthorizedSenderSetter\\n  {\\n    TargetsUpdatedAuthorizedSenders(targets, senders, msg.sender);\\n\\n    for (uint256 i = 0; i < targets.length; i++) {\\n      AuthorizedReceiverInterface(targets[i]).setAuthorizedSenders(senders);\\n    }\\n  }\\n\\n  /**\\n   * @notice Accepts ownership of ownable contracts and then immediately sets\\n   * the authorized sender list on each of the newly owned contracts. This is\\n   * primarily intended for Authorized Forwarders but could possibly be\\n   * extended to work with future contracts.\\n   * @param targets The addresses to set permissions on\\n   * @param senders The addresses that are allowed to send updates\\n   */\\n  function acceptAuthorizedReceivers(address[] calldata targets, address[] calldata senders)\\n    external\\n    validateAuthorizedSenderSetter\\n  {\\n    acceptOwnableContracts(targets);\\n    setAuthorizedSendersOn(targets, senders);\\n  }\\n\\n  /**\\n   * @notice Allows the node operator to withdraw earned LINK to a given address\\n   * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node\\n   * @param recipient The address to send the LINK token to\\n   * @param amount The amount to send (specified in wei)\\n   */\\n  function withdraw(address recipient, uint256 amount)\\n    external\\n    override(OracleInterface, WithdrawalInterface)\\n    onlyOwner\\n    validateAvailableFunds(amount)\\n  {\\n    assert(linkToken.transfer(recipient, amount));\\n  }\\n\\n  /**\\n   * @notice Displays the amount of LINK that is available for the node operator to withdraw\\n   * @dev We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\\n   * @return The amount of withdrawable LINK on the contract\\n   */\\n  function withdrawable() external view override(OracleInterface, WithdrawalInterface) returns (uint256) {\\n    return _fundsAvailable();\\n  }\\n\\n  /**\\n   * @notice Forward a call to another contract\\n   * @dev Only callable by the owner\\n   * @param to address\\n   * @param data to forward\\n   */\\n  function ownerForward(address to, bytes calldata data) external onlyOwner validateNotToLINK(to) {\\n    require(to.isContract(), \\\"Must forward to a contract\\\");\\n    (bool status, ) = to.call(data);\\n    require(status, \\\"Forwarded call failed\\\");\\n  }\\n\\n  /**\\n   * @notice Interact with other LinkTokenReceiver contracts by calling transferAndCall\\n   * @param to The address to transfer to.\\n   * @param value The amount to be transferred.\\n   * @param data The extra data to be passed to the receiving contract.\\n   * @return success bool\\n   */\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external override onlyOwner validateAvailableFunds(value) returns (bool success) {\\n    return linkToken.transferAndCall(to, value, data);\\n  }\\n\\n  /**\\n   * @notice Distribute funds to multiple addresses using ETH send\\n   * to this payable function.\\n   * @dev Array length must be equal, ETH sent must equal the sum of amounts.\\n   * A malicious receiver could cause the distribution to revert, in which case\\n   * it is expected that the address is removed from the list.\\n   * @param receivers list of addresses\\n   * @param amounts list of amounts\\n   */\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable {\\n    require(receivers.length > 0 && receivers.length == amounts.length, \\\"Invalid array length(s)\\\");\\n    uint256 valueRemaining = msg.value;\\n    for (uint256 i = 0; i < receivers.length; i++) {\\n      uint256 sendAmount = amounts[i];\\n      valueRemaining = valueRemaining.sub(sendAmount);\\n      receivers[i].transfer(sendAmount);\\n    }\\n    require(valueRemaining == 0, \\\"Too much ETH sent\\\");\\n  }\\n\\n  /**\\n   * @notice Allows recipient to cancel requests sent to this oracle contract.\\n   * Will transfer the LINK sent for the request back to the recipient address.\\n   * @dev Given params must hash to a commitment stored on the contract in order\\n   * for the request to be valid. Emits CancelOracleRequest event.\\n   * @param requestId The request ID\\n   * @param payment The amount of payment given (specified in wei)\\n   * @param callbackFunc The requester's specified callback function selector\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) external override {\\n    bytes31 paramsHash = _buildParamsHash(payment, msg.sender, callbackFunc, expiration);\\n    require(s_commitments[requestId].paramsHash == paramsHash, \\\"Params do not match request ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    require(expiration <= block.timestamp, \\\"Request is not expired\\\");\\n\\n    delete s_commitments[requestId];\\n    emit CancelOracleRequest(requestId);\\n\\n    linkToken.transfer(msg.sender, payment);\\n  }\\n\\n  /**\\n   * @notice Allows requester to cancel requests sent to this oracle contract.\\n   * Will transfer the LINK sent for the request back to the recipient address.\\n   * @dev Given params must hash to a commitment stored on the contract in order\\n   * for the request to be valid. Emits CancelOracleRequest event.\\n   * @param nonce The nonce used to generate the request ID\\n   * @param payment The amount of payment given (specified in wei)\\n   * @param callbackFunc The requester's specified callback function selector\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelOracleRequestByRequester(\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) external {\\n    bytes32 requestId = keccak256(abi.encodePacked(msg.sender, nonce));\\n    bytes31 paramsHash = _buildParamsHash(payment, msg.sender, callbackFunc, expiration);\\n    require(s_commitments[requestId].paramsHash == paramsHash, \\\"Params do not match request ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    require(expiration <= block.timestamp, \\\"Request is not expired\\\");\\n\\n    delete s_commitments[requestId];\\n    emit CancelOracleRequest(requestId);\\n\\n    linkToken.transfer(msg.sender, payment);\\n  }\\n\\n  /**\\n   * @notice Returns the address of the LINK token\\n   * @dev This is the public implementation for chainlinkTokenAddress, which is\\n   * an internal method of the ChainlinkClient contract\\n   */\\n  function getChainlinkToken() public view override returns (address) {\\n    return address(linkToken);\\n  }\\n\\n  /**\\n   * @notice Require that the token transfer action is valid\\n   * @dev OPERATOR_REQUEST_SELECTOR = multiword, ORACLE_REQUEST_SELECTOR = singleword\\n   */\\n  function _validateTokenTransferAction(bytes4 funcSelector, bytes memory data) internal pure override {\\n    require(data.length >= MINIMUM_REQUEST_LENGTH, \\\"Invalid request length\\\");\\n    require(\\n      funcSelector == OPERATOR_REQUEST_SELECTOR || funcSelector == ORACLE_REQUEST_SELECTOR,\\n      \\\"Must use whitelisted functions\\\"\\n    );\\n  }\\n\\n  /**\\n   * @notice Verify the Oracle Request and record necessary information\\n   * @param sender The sender of the request\\n   * @param payment The amount of payment given (specified in wei)\\n   * @param callbackAddress The callback address for the response\\n   * @param callbackFunctionId The callback function ID for the response\\n   * @param nonce The nonce sent by the requester\\n   */\\n  function _verifyAndProcessOracleRequest(\\n    address sender,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion\\n  ) private validateNotToLINK(callbackAddress) returns (bytes32 requestId, uint256 expiration) {\\n    requestId = keccak256(abi.encodePacked(sender, nonce));\\n    require(s_commitments[requestId].paramsHash == 0, \\\"Must use a unique ID\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    expiration = block.timestamp.add(getExpiryTime);\\n    bytes31 paramsHash = _buildParamsHash(payment, callbackAddress, callbackFunctionId, expiration);\\n    s_commitments[requestId] = Commitment(paramsHash, _safeCastToUint8(dataVersion));\\n    s_tokensInEscrow = s_tokensInEscrow.add(payment);\\n    return (requestId, expiration);\\n  }\\n\\n  /**\\n   * @notice Verify the Oracle request and unlock escrowed payment\\n   * @param requestId The fulfillment request ID that must match the requester's\\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\\n   * @param callbackAddress The callback address to call for fulfillment\\n   * @param callbackFunctionId The callback function ID to use for fulfillment\\n   * @param expiration The expiration that the node should respond by before the requester can cancel\\n   */\\n  function _verifyOracleRequestAndProcessPayment(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    uint256 dataVersion\\n  ) internal {\\n    bytes31 paramsHash = _buildParamsHash(payment, callbackAddress, callbackFunctionId, expiration);\\n    require(s_commitments[requestId].paramsHash == paramsHash, \\\"Params do not match request ID\\\");\\n    require(s_commitments[requestId].dataVersion <= _safeCastToUint8(dataVersion), \\\"Data versions must match\\\");\\n    s_tokensInEscrow = s_tokensInEscrow.sub(payment);\\n    delete s_commitments[requestId];\\n  }\\n\\n  /**\\n   * @notice Build the bytes31 hash from the payment, callback and expiration.\\n   * @param payment The payment amount that will be released for the oracle (specified in wei)\\n   * @param callbackAddress The callback address to call for fulfillment\\n   * @param callbackFunctionId The callback function ID to use for fulfillment\\n   * @param expiration The expiration that the node should respond by before the requester can cancel\\n   * @return hash bytes31\\n   */\\n  function _buildParamsHash(\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) internal pure returns (bytes31) {\\n    return bytes31(keccak256(abi.encodePacked(payment, callbackAddress, callbackFunctionId, expiration)));\\n  }\\n\\n  /**\\n   * @notice Safely cast uint256 to uint8\\n   * @param number uint256\\n   * @return uint8 number\\n   */\\n  function _safeCastToUint8(uint256 number) internal pure returns (uint8) {\\n    require(number < MAXIMUM_DATA_VERSION, \\\"number too big to cast\\\");\\n    return uint8(number);\\n  }\\n\\n  /**\\n   * @notice Returns the LINK available in this contract, not locked in escrow\\n   * @return uint256 LINK tokens available\\n   */\\n  function _fundsAvailable() private view returns (uint256) {\\n    uint256 inEscrow = s_tokensInEscrow.sub(ONE_FOR_CONSISTENT_GAS_COST);\\n    return linkToken.balanceOf(address(this)).sub(inEscrow);\\n  }\\n\\n  /**\\n   * @notice concrete implementation of AuthorizedReceiver\\n   * @return bool of whether sender is authorized\\n   */\\n  function _canSetAuthorizedSenders() internal view override returns (bool) {\\n    return isAuthorizedSender(msg.sender) || owner() == msg.sender;\\n  }\\n\\n  // MODIFIERS\\n\\n  /**\\n   * @dev Reverts if the first 32 bytes of the bytes array is not equal to requestId\\n   * @param requestId bytes32\\n   * @param data bytes\\n   */\\n  modifier validateMultiWordResponseId(bytes32 requestId, bytes calldata data) {\\n    require(data.length >= 32, \\\"Response must be > 32 bytes\\\");\\n    bytes32 firstDataWord;\\n    assembly {\\n      firstDataWord := calldataload(data.offset)\\n    }\\n    require(requestId == firstDataWord, \\\"First word must be requestId\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if amount requested is greater than withdrawable balance\\n   * @param amount The given amount to compare to `s_withdrawableTokens`\\n   */\\n  modifier validateAvailableFunds(uint256 amount) {\\n    require(_fundsAvailable() >= amount, \\\"Amount requested is greater than withdrawable balance\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if request ID does not exist\\n   * @param requestId The given request ID to check in stored `commitments`\\n   */\\n  modifier validateRequestId(bytes32 requestId) {\\n    require(s_commitments[requestId].paramsHash != 0, \\\"Must have a valid requestId\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the callback address is the LINK token\\n   * @param to The callback address\\n   */\\n  modifier validateNotToLINK(address to) {\\n    require(to != address(linkToken), \\\"Cannot call to LINK\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the target address is owned by the operator\\n   */\\n  modifier validateCallbackAddress(address callbackAddress) {\\n    require(!s_owned[callbackAddress], \\\"Cannot call owned contract\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xddb168ef7571217be8079a4bc9e9354e0f63cd2288cf2fa1347c66a63b70ac49\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/AuthorizedReceiverInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AuthorizedReceiverInterface {\\n  function isAuthorizedSender(address sender) external view returns (bool);\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n}\\n\",\"keccak256\":\"0x4276ccbc637409ab07d9baab0b72806aac938d5f180fe8bc186f64d5d376ba4e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5461aa441a5578fdb7181169e0060b8cb3e7eb96441140e8353424deae730073\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x61bb541e43d816b7a6955cb659fcaf6d522fa5f376a4b18b8198268f1fb0b593\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\nimport \\\"./OracleInterface.sol\\\";\\n\\ninterface OperatorInterface is ChainlinkRequestInterface, OracleInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xdaf32685096f5656e06d42a0b4b21b40d6cae01785bd6c422d3cd5205490ebf5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7ad27eb013cd09554025f0db7a7db9eb1eb020f948fe891d9ed8c0215680f498\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x5b0ba0302a06c80ff88368c02dab44a0d9b735a599ba6ff905284044f02f2932\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/WithdrawalInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface WithdrawalInterface {\\n  /**\\n   * @notice transfer LINK held by the contract belonging to msg.sender to\\n   * another address\\n   * @param recipient is the address to send the LINK to\\n   * @param amount is the amount of LINK to send\\n   */\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  /**\\n   * @notice query the available amount of LINK to withdraw by msg.sender\\n   */\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe730b947ff2acdcc00dd57dcf37fb239ef1aef353e0cf8b128623ebfa43ce350\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/vendor/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts v3.4.0(fa64a1ced0b70ab89073d5d0b6e01b0778f7e7d6)\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain`call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return _verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  function _verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) private pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe596fbc1f57dd1ab73a9ba7f7c7660b3989f436b91c0a47773c67a0f357c20a7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/vendor/SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x4af4b72feea9a64da1ae91c5ed7e2dfe8ddc39924a6ca97c098dd90c5e4c8cf5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101265760003560e01c806301994b991461012b578063033f49f7146101a8578063165d35e114610233578063181f5a77146102645780632408afaa146102ee57806325cb5bc0146103535780633c6d41b91461037a5780633ec5bc141461042c57806340429946146104b05780634ab0d1901461056c57806350188301146105db5780635ffa6288146105f05780636ae0bc76146106bb5780636bd59ec0146107685780636ee4d5531461082657806379ba50971461086c5780638da5cb5b14610881578063902fc37014610896578063a4c0ed3614610926578063eb007d99146109ec578063ee56997b14610a32578063f2fde38b14610aad578063f3fef3a314610ae0578063fa00763a14610b19578063fc4a03ed14610b4c575b600080fd5b34801561013757600080fd5b506101a66004803603602081101561014e57600080fd5b810190602081018135600160201b81111561016857600080fd5b82018360208201111561017a57600080fd5b803590602001918460208302840111600160201b8311171561019b57600080fd5b509092509050610c17565b005b3480156101b457600080fd5b506101a6600480360360408110156101cb57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156101f557600080fd5b82018360208201111561020757600080fd5b803590602001918460018302840111600160201b8311171561022857600080fd5b509092509050610d92565b34801561023f57600080fd5b50610248610f30565b604080516001600160a01b039092168252519081900360200190f35b34801561027057600080fd5b50610279610f54565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102b357818101518382015260200161029b565b50505050905090810190601f1680156102e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102fa57600080fd5b50610303610f7c565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033f578181015183820152602001610327565b505050509050019250505060405180910390f35b34801561035f57600080fd5b50610368610fde565b60408051918252519081900360200190f35b34801561038657600080fd5b506101a6600480360360e081101561039d57600080fd5b6001600160a01b03823516916020810135916040820135916001600160e01b03196060820135169160808201359160a08101359181019060e0810160c0820135600160201b8111156103ee57600080fd5b82018360208201111561040057600080fd5b803590602001918460018302840111600160201b8311171561042157600080fd5b509092509050610fe4565b34801561043857600080fd5b506101a66004803603604081101561044f57600080fd5b810190602081018135600160201b81111561046957600080fd5b82018360208201111561047b57600080fd5b803590602001918460208302840111600160201b8311171561049c57600080fd5b9193509150356001600160a01b031661110b565b3480156104bc57600080fd5b506101a660048036036101008110156104d457600080fd5b6001600160a01b038235811692602081013592604082013592606083013516916001600160e01b03196080820135169160a08201359160c081013591810190610100810160e0820135600160201b81111561052e57600080fd5b82018360208201111561054057600080fd5b803590602001918460018302840111600160201b8311171561056157600080fd5b50909250905061120b565b34801561057857600080fd5b506105c7600480360360c081101561058f57600080fd5b508035906020810135906001600160a01b03604082013516906001600160e01b03196060820135169060808101359060a00135611333565b604080519115158252519081900360200190f35b3480156105e757600080fd5b50610368611572565b3480156105fc57600080fd5b506101a66004803603604081101561061357600080fd5b810190602081018135600160201b81111561062d57600080fd5b82018360208201111561063f57600080fd5b803590602001918460208302840111600160201b8311171561066057600080fd5b919390929091602081019035600160201b81111561067d57600080fd5b82018360208201111561068f57600080fd5b803590602001918460208302840111600160201b831117156106b057600080fd5b509092509050611581565b3480156106c757600080fd5b506105c7600480360360c08110156106de57600080fd5b8135916020810135916001600160a01b03604083013516916001600160e01b0319606082013516916080820135919081019060c0810160a0820135600160201b81111561072a57600080fd5b82018360208201111561073c57600080fd5b803590602001918460018302840111600160201b8311171561075d57600080fd5b5090925090506115de565b6101a66004803603604081101561077e57600080fd5b810190602081018135600160201b81111561079857600080fd5b8201836020820111156107aa57600080fd5b803590602001918460208302840111600160201b831117156107cb57600080fd5b919390929091602081019035600160201b8111156107e857600080fd5b8201836020820111156107fa57600080fd5b803590602001918460208302840111600160201b8311171561081b57600080fd5b5090925090506118ca565b34801561083257600080fd5b506101a66004803603608081101561084957600080fd5b508035906020810135906001600160e01b03196040820135169060600135611a01565b34801561087857600080fd5b506101a6611b83565b34801561088d57600080fd5b50610248611c36565b3480156108a257600080fd5b506105c7600480360360608110156108b957600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156108e857600080fd5b8201836020820111156108fa57600080fd5b803590602001918460018302840111600160201b8311171561091b57600080fd5b509092509050611c45565b34801561093257600080fd5b506101a66004803603606081101561094957600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b81111561097857600080fd5b82018360208201111561098a57600080fd5b803590602001918460018302840111600160201b831117156109ab57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611d77945050505050565b3480156109f857600080fd5b506101a660048036036080811015610a0f57600080fd5b508035906020810135906001600160e01b03196040820135169060600135611ef1565b348015610a3e57600080fd5b506101a660048036036020811015610a5557600080fd5b810190602081018135600160201b811115610a6f57600080fd5b820183602082011115610a8157600080fd5b803590602001918460208302840111600160201b83111715610aa257600080fd5b5090925090506120b3565b348015610ab957600080fd5b506101a660048036036020811015610ad057600080fd5b50356001600160a01b031661230a565b348015610aec57600080fd5b506101a660048036036040811015610b0357600080fd5b506001600160a01b03813516906020013561231e565b348015610b2557600080fd5b506105c760048036036020811015610b3c57600080fd5b50356001600160a01b0316612416565b348015610b5857600080fd5b506101a660048036036040811015610b6f57600080fd5b810190602081018135600160201b811115610b8957600080fd5b820183602082011115610b9b57600080fd5b803590602001918460208302840111600160201b83111715610bbc57600080fd5b919390929091602081019035600160201b811115610bd957600080fd5b820183602082011115610beb57600080fd5b803590602001918460208302840111600160201b83111715610c0c57600080fd5b509092509050612434565b610c1f6125de565b610c5e576040805162461bcd60e51b815260206004820152601d6024820152600080516020612da3833981519152604482015290519081900360640190fd5b60005b81811015610d8d57600160056000858585818110610c7b57fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550828282818110610cce57fe5b905060200201356001600160a01b03166001600160a01b03167f615a0c1cb00a60d4acd77ec67acf2f17f223ef0932d591052fabc33643fe7e8260405160405180910390a2828282818110610d1f57fe5b905060200201356001600160a01b03166001600160a01b03166379ba50976040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d6957600080fd5b505af1158015610d7d573d6000803e3d6000fd5b505060019092019150610c619050565b505050565b610d9a612607565b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161415610e18576040805162461bcd60e51b815260206004820152601360248201527243616e6e6f742063616c6c20746f204c494e4b60681b604482015290519081900360640190fd5b610e2a846001600160a01b0316612661565b610e78576040805162461bcd60e51b815260206004820152601a602482015279135d5cdd08199bdc9dd85c99081d1bc8184818dbdb9d1c9858dd60321b604482015290519081900360640190fd5b6000846001600160a01b03168484604051808383808284376040519201945060009350909150508083038183865af19150503d8060008114610ed6576040519150601f19603f3d011682016040523d82523d6000602084013e610edb565b606091505b5050905080610f29576040805162461bcd60e51b8152602060048201526015602482015274119bdc9dd85c9919590818d85b1b0819985a5b1959605a1b604482015290519081900360640190fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60408051808201909152600e81526d04f70657261746f7220312e302e360941b602082015290565b60606001805480602002602001604051908101604052809291908181526020018280548015610fd457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fb6575b5050505050905090565b61012c81565b610fec610f30565b6001600160a01b0316336001600160a01b031614611047576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b6000806110588a8a8c8a8a8a612667565b9150915087600080516020612e188339815191528b848c8e8c878c8c8c604051808a6001600160a01b03168152602001898152602001888152602001876001600160a01b03168152602001866001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a250505050505050505050565b611113612607565b60005b828110156112055760006005600086868581811061113057fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555083838281811061118357fe5b905060200201356001600160a01b03166001600160a01b031663f2fde38b836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156111e157600080fd5b505af11580156111f5573d6000803e3d6000fd5b5050600190920191506111169050565b50505050565b611213610f30565b6001600160a01b0316336001600160a01b03161461126e576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60008061127f8b8b8a8a8a8a612667565b9150915088600080516020612e188339815191528c848d8f8c878c8c8c604051808a6001600160a01b03168152602001898152602001888152602001876001600160a01b03168152602001866001600160e01b0319168152602001858152602001848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039c50909a5050505050505050505050a25050505050505050505050565b600061133d612830565b600087815260046020526040902054879060081b60ff19166113a4576040805162461bcd60e51b815260206004820152601b60248201527a135d5cdd081a185d994818481d985b1a59081c995c5d595cdd1259602a1b604482015290519081900360640190fd5b6001600160a01b038616600090815260056020526040902054869060ff1615611411576040805162461bcd60e51b815260206004820152601a60248201527910d85b9b9bdd0818d85b1b081bdddb99590818dbdb9d1c9858dd60321b604482015290519081900360640190fd5b61142089898989896001612882565b6040518990600080516020612dc383398151915290600090a262061a805a101561147f576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b60408051602481018b9052604480820187905282518083039091018152606490910182526020810180516001600160e01b03166001600160e01b03198a16178152915181516000936001600160a01b038c169392918291908083835b602083106114fa5780518252601f1990920191602091820191016114db565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461155c576040519150601f19603f3d011682016040523d82523d6000602084013e611561565b606091505b50909b9a5050505050505050505050565b600061157c61298b565b905090565b6115896125de565b6115c8576040805162461bcd60e51b815260206004820152601d6024820152600080516020612da3833981519152604482015290519081900360640190fd5b6115d28484610c17565b61120584848484612434565b60006115e8612830565b600088815260046020526040902054889060081b60ff191661164f576040805162461bcd60e51b815260206004820152601b60248201527a135d5cdd081a185d994818481d985b1a59081c995c5d595cdd1259602a1b604482015290519081900360640190fd5b6001600160a01b038716600090815260056020526040902054879060ff16156116bc576040805162461bcd60e51b815260206004820152601a60248201527910d85b9b9bdd0818d85b1b081bdddb99590818dbdb9d1c9858dd60321b604482015290519081900360640190fd5b8985856020811015611713576040805162461bcd60e51b815260206004820152601b60248201527a526573706f6e7365206d757374206265203e20333220627974657360281b604482015290519081900360640190fd5b8135838114611768576040805162461bcd60e51b815260206004820152601c60248201527b119a5c9cdd081ddbdc99081b5d5cdd081899481c995c5d595cdd125960221b604482015290519081900360640190fd5b6117778e8e8e8e8e6002612882565b6040518e90600080516020612dc383398151915290600090a262061a805a10156117d6576040805162461bcd60e51b81526020600482018190526024820152600080516020612e78833981519152604482015290519081900360640190fd5b60008c6001600160a01b03168c8b8b60405160200180846001600160e01b03191681526004018383808284378083019250505093505050506040516020818303038152906040526040518082805190602001908083835b6020831061184c5780518252601f19909201916020918201910161182d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146118ae576040519150601f19603f3d011682016040523d82523d6000602084013e6118b3565b606091505b509098505050505050505050979650505050505050565b82158015906118d857508281145b611923576040805162461bcd60e51b8152602060048201526017602482015276496e76616c6964206172726179206c656e67746828732960481b604482015290519081900360640190fd5b3460005b848110156119b957600084848381811061193d57fe5b9050602002013590506119598184612a4f90919063ffffffff16565b925086868381811061196757fe5b905060200201356001600160a01b03166001600160a01b03166108fc829081150290604051600060405180830381858888f193505050501580156119af573d6000803e3d6000fd5b5050600101611927565b508015610f29576040805162461bcd60e51b8152602060048201526011602482015270151bdbc81b5d58da08115512081cd95b9d607a1b604482015290519081900360640190fd5b6000611a0f84338585612aac565b60008681526004602052604090205490915060081b60ff1990811690821614611a6d576040805162461bcd60e51b815260206004820152601e6024820152600080516020612e58833981519152604482015290519081900360640190fd5b42821115611abb576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b600085815260046020526040808220829055518691600080516020612e3883398151915291a26040805163a9059cbb60e01b81523360048201526024810186905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b158015611b5057600080fd5b505af1158015611b64573d6000803e3d6000fd5b505050506040513d6020811015611b7a57600080fd5b50505050505050565b6003546001600160a01b03163314611bdb576040805162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b604482015290519081900360640190fd5b600280546001600160a01b0319808216339081179093556003805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6002546001600160a01b031690565b6000611c4f612607565b8380611c5961298b565b1015611c965760405162461bcd60e51b8152600401808060200182810382526035815260200180612de36035913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea0878787876040518563ffffffff1660e01b815260040180856001600160a01b03168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050602060405180830381600087803b158015611d4157600080fd5b505af1158015611d55573d6000803e3d6000fd5b505050506040513d6020811015611d6b57600080fd5b50519695505050505050565b611d7f610f30565b6001600160a01b0316336001600160a01b031614611dda576040805162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b604482015290519081900360640190fd5b60208101518190611deb8183612b01565b8460248401528360448401526000306001600160a01b0316846040518082805190602001908083835b60208310611e335780518252601f199092019160209182019101611e14565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114611e93576040519150601f19603f3d011682016040523d82523d6000602084013e611e98565b606091505b5050905080611ee9576040805162461bcd60e51b8152602060048201526018602482015277155b98589b19481d1bc818dc99585d19481c995c5d595cdd60421b604482015290519081900360640190fd5b505050505050565b6000338560405160200180836001600160a01b031660601b8152601401828152602001925050506040516020818303038152906040528051906020012090506000611f3e85338686612aac565b60008381526004602052604090205490915060081b60ff1990811690821614611f9c576040805162461bcd60e51b815260206004820152601e6024820152600080516020612e58833981519152604482015290519081900360640190fd5b42831115611fea576040805162461bcd60e51b815260206004820152601660248201527514995c5d595cdd081a5cc81b9bdd08195e1c1a5c995960521b604482015290519081900360640190fd5b600082815260046020526040808220829055518391600080516020612e3883398151915291a26040805163a9059cbb60e01b81523360048201526024810187905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b15801561207f57600080fd5b505af1158015612093573d6000803e3d6000fd5b505050506040513d60208110156120a957600080fd5b5050505050505050565b6120bb6125de565b6120fa576040805162461bcd60e51b815260206004820152601d6024820152600080516020612da3833981519152604482015290519081900360640190fd5b8061214a576040805162461bcd60e51b815260206004820152601b60248201527a26bab9ba103430bb329030ba103632b0b9ba10189039b2b73232b960291b604482015290519081900360640190fd5b60015460005b818110156121a65760008060006001848154811061216a57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101612150565b5060005b82811015612283576000808585848181106121c157fe5b602090810292909201356001600160a01b03168352508101919091526040016000205460ff1615612239576040805162461bcd60e51b815260206004820152601f60248201527f4d757374206e6f742068617665206475706c69636174652073656e6465727300604482015290519081900360640190fd5b600160008086868581811061224a57fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff19169115159190911790556001016121aa565b5061229060018484612d33565b507ff263cfb3e4298332e776194610cf9fdc09ccb3ada8b9aa39764d882e11fbf0a08383336040518080602001836001600160a01b031681526020018281038252858582818152602001925060200280828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b612312612607565b61231b81612bd5565b50565b612326612607565b808061233061298b565b101561236d5760405162461bcd60e51b8152600401808060200182810382526035815260200180612de36035913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156123e457600080fd5b505af11580156123f8573d6000803e3d6000fd5b505050506040513d602081101561240e57600080fd5b5051610d8d57fe5b6001600160a01b031660009081526020819052604090205460ff1690565b61243c6125de565b61247b576040805162461bcd60e51b815260206004820152601d6024820152600080516020612da3833981519152604482015290519081900360640190fd5b7f1bb185903e2cb2f1b303523128b60e314dea81df4f8d9b7351cadd344f6e77278484848433604051808060200180602001846001600160a01b031681526020018381038352888882818152602001925060200280828437600083820152601f01601f19169091018481038352868152602090810191508790870280828437600083820152604051601f909101601f1916909201829003995090975050505050505050a160005b83811015610f295784848281811061253657fe5b905060200201356001600160a01b03166001600160a01b031663ee56997b84846040518363ffffffff1660e01b815260040180806020018281038252848482818152602001925060200280828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b1580156125ba57600080fd5b505af11580156125ce573d6000803e3d6000fd5b5050600190920191506125229050565b60006125e933612416565b8061157c5750336125f8611c36565b6001600160a01b031614905090565b6002546001600160a01b0316331461265f576040805162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b604482015290519081900360640190fd5b565b3b151590565b600080857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614156126e8576040805162461bcd60e51b815260206004820152601360248201527243616e6e6f742063616c6c20746f204c494e4b60681b604482015290519081900360640190fd5b6040805160608b901b6001600160601b03191660208083019190915260348083018990528351808403909101815260549092018352815191810191909120600081815260049092529190205490935060081b60ff191615612787576040805162461bcd60e51b8152602060048201526014602482015273135d5cdd081d5cd94818481d5b9a5c5d5948125160621b604482015290519081900360640190fd5b6127934261012c612c7f565b915060006127a389898986612aac565b905060405180604001604052808260ff191681526020016127c387612cde565b60ff9081169091526000868152600460209081526040909120835181549490920151909216600160f81b0260089190911c6001600160f81b0319909316929092176001600160f81b0316919091179055600654612820908a612c7f565b6006555050965096945050505050565b61283933612416565b61265f576040805162461bcd60e51b81526020600482015260156024820152742737ba1030baba3437b934bd32b21039b2b73232b960591b604482015290519081900360640190fd5b600061289086868686612aac565b60008881526004602052604090205490915060081b60ff19908116908216146128ee576040805162461bcd60e51b815260206004820152601e6024820152600080516020612e58833981519152604482015290519081900360640190fd5b6128f782612cde565b60008881526004602052604090205460ff918216600160f81b9091049091161115612964576040805162461bcd60e51b8152602060048201526018602482015277088c2e8c240eccae4e6d2dedce640daeae6e840dac2e8c6d60431b604482015290519081900360640190fd5b6006546129719087612a4f565b600655505050600093845250506004602052506040812055565b6000806129a46001600654612a4f90919063ffffffff16565b9050612a49817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a1757600080fd5b505afa158015612a2b573d6000803e3d6000fd5b505050506040513d6020811015612a4157600080fd5b505190612a4f565b91505090565b600082821115612aa6576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6040805160208082019690965260609490941b6001600160601b031916848201526001600160e01b03199290921660548401526058808401919091528151808403909101815260789092019052805191012090565b805160441115612b51576040805162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e4cae2eacae6e840d8cadccee8d60531b604482015290519081900360640190fd5b6001600160e01b03198216633c6d41b960e01b1480612b8057506001600160e01b031982166320214ca360e11b145b612bd1576040805162461bcd60e51b815260206004820152601e60248201527f4d757374207573652077686974656c69737465642066756e6374696f6e730000604482015290519081900360640190fd5b5050565b6001600160a01b038116331415612c2d576040805162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b03838116918217909255600254604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b600082820183811015612cd7576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b9392505050565b60006101008210612d2f576040805162461bcd60e51b81526020600482015260166024820152751b9d5b58995c881d1bdbc8189a59c81d1bc818d85cdd60521b604482015290519081900360640190fd5b5090565b828054828255906000526020600020908101928215612d86579160200282015b82811115612d865781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612d53565b50612d2f9291505b80821115612d2f5760008155600101612d8e56fe43616e6e6f742073657420617574686f72697a65642073656e646572730000009e9bc7616d42c2835d05ae617e508454e63b30b934be8aa932ebc125e0e58a64416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e6365d8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65a7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e93506172616d7320646f206e6f74206d61746368207265717565737420494400004d7573742070726f7669646520636f6e73756d657220656e6f75676820676173a164736f6c6343000706000a",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptAuthorizedReceivers(address[],address[])": {
        "params": {
          "senders": "The addresses that are allowed to send updates",
          "targets": "The addresses to set permissions on"
        }
      },
      "acceptOwnableContracts(address[])": {
        "details": "Must be the pending owner on the contract",
        "params": {
          "ownable": "list of addresses of Ownable contracts to accept"
        }
      },
      "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
        "details": "Given params must hash to a commitment stored on the contract in order for the request to be valid. Emits CancelOracleRequest event.",
        "params": {
          "callbackFunc": "The requester's specified callback function selector",
          "expiration": "The time of the expiration for the request",
          "payment": "The amount of payment given (specified in wei)",
          "requestId": "The request ID"
        }
      },
      "cancelOracleRequestByRequester(uint256,uint256,bytes4,uint256)": {
        "details": "Given params must hash to a commitment stored on the contract in order for the request to be valid. Emits CancelOracleRequest event.",
        "params": {
          "callbackFunc": "The requester's specified callback function selector",
          "expiration": "The time of the expiration for the request",
          "nonce": "The nonce used to generate the request ID",
          "payment": "The amount of payment given (specified in wei)"
        }
      },
      "constructor": {
        "details": "Sets the LinkToken address for the imported LinkTokenInterface",
        "params": {
          "link": "The address of the LINK token",
          "owner": "The address of the owner"
        }
      },
      "distributeFunds(address[],uint256[])": {
        "details": "Array length must be equal, ETH sent must equal the sum of amounts. A malicious receiver could cause the distribution to revert, in which case it is expected that the address is removed from the list.",
        "params": {
          "amounts": "list of amounts",
          "receivers": "list of addresses"
        }
      },
      "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": {
        "details": "Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
        "params": {
          "callbackAddress": "The callback address to call for fulfillment",
          "callbackFunctionId": "The callback function ID to use for fulfillment",
          "data": "The data to return to the consuming contract",
          "expiration": "The expiration that the node should respond by before the requester can cancel",
          "payment": "The payment amount that will be released for the oracle (specified in wei)",
          "requestId": "The fulfillment request ID that must match the requester's"
        },
        "returns": {
          "_0": "Status if the external call was successful"
        }
      },
      "fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)": {
        "details": "Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
        "params": {
          "callbackAddress": "The callback address to call for fulfillment",
          "callbackFunctionId": "The callback function ID to use for fulfillment",
          "data": "The data to return to the consuming contract",
          "expiration": "The expiration that the node should respond by before the requester can cancel",
          "payment": "The payment amount that will be released for the oracle (specified in wei)",
          "requestId": "The fulfillment request ID that must match the requester's"
        },
        "returns": {
          "_0": "Status if the external call was successful"
        }
      },
      "getAuthorizedSenders()": {
        "returns": {
          "_0": "array of addresses"
        }
      },
      "getChainlinkToken()": {
        "details": "This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract"
      },
      "isAuthorizedSender(address)": {
        "params": {
          "sender": "The address of the Chainlink node"
        },
        "returns": {
          "_0": "The authorization status of the node"
        }
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "details": "The data payload's first 2 words will be overwritten by the `sender` and `amount` values to ensure correctness. Calls oracleRequest.",
        "params": {
          "amount": "Amount of LINK sent (specified in wei)",
          "data": "Payload of the transaction",
          "sender": "Address of the sender"
        }
      },
      "operatorRequest(address,uint256,bytes32,bytes4,uint256,uint256,bytes)": {
        "details": "Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.",
        "params": {
          "callbackFunctionId": "The callback function ID for the response",
          "data": "The extra request parameters",
          "dataVersion": "The specified data version",
          "nonce": "The nonce sent by the requester",
          "payment": "The amount of payment given (specified in wei)",
          "sender": "The sender of the request",
          "specId": "The Job Specification ID"
        }
      },
      "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
        "params": {
          "callbackAddress": "The address the oracle data will be sent to",
          "callbackFunctionId": "The callback function ID for the response",
          "data": "The extra request parameters",
          "dataVersion": "The specified data version",
          "nonce": "The nonce sent by the requester",
          "payment": "The amount of payment given (specified in wei)",
          "specId": "The Job Specification ID"
        }
      },
      "ownerForward(address,bytes)": {
        "details": "Only callable by the owner",
        "params": {
          "data": "to forward",
          "to": "address"
        }
      },
      "ownerTransferAndCall(address,uint256,bytes)": {
        "params": {
          "data": "The extra data to be passed to the receiving contract.",
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        },
        "returns": {
          "success": "bool"
        }
      },
      "setAuthorizedSenders(address[])": {
        "params": {
          "senders": "The addresses of the authorized Chainlink node"
        }
      },
      "setAuthorizedSendersOn(address[],address[])": {
        "params": {
          "senders": "The addresses that are allowed to send updates",
          "targets": "The addresses to set permissions on"
        }
      },
      "transferOwnableContracts(address[],address)": {
        "params": {
          "newOwner": "address to transfer ownership to",
          "ownable": "list of addresses to transfer"
        }
      },
      "typeAndVersion()": {
        "returns": {
          "_0": "Type and version string"
        }
      },
      "withdraw(address,uint256)": {
        "details": "The owner of the contract can be another wallet and does not have to be a Chainlink node",
        "params": {
          "amount": "The amount to send (specified in wei)",
          "recipient": "The address to send the LINK token to"
        }
      },
      "withdrawable()": {
        "details": "We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage",
        "returns": {
          "_0": "The amount of withdrawable LINK on the contract"
        }
      }
    },
    "title": "The Chainlink Operator contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptAuthorizedReceivers(address[],address[])": {
        "notice": "Accepts ownership of ownable contracts and then immediately sets the authorized sender list on each of the newly owned contracts. This is primarily intended for Authorized Forwarders but could possibly be extended to work with future contracts."
      },
      "acceptOwnableContracts(address[])": {
        "notice": "Accept the ownership of an ownable contract. This is primarily intended for Authorized Forwarders but could possibly be extended to work with future contracts."
      },
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
        "notice": "Allows recipient to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the recipient address."
      },
      "cancelOracleRequestByRequester(uint256,uint256,bytes4,uint256)": {
        "notice": "Allows requester to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the recipient address."
      },
      "constructor": {
        "notice": "Deploy with the address of the LINK token"
      },
      "distributeFunds(address[],uint256[])": {
        "notice": "Distribute funds to multiple addresses using ETH send to this payable function."
      },
      "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": {
        "notice": "Called by the Chainlink node to fulfill requests"
      },
      "fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)": {
        "notice": "Called by the Chainlink node to fulfill requests with multi-word support"
      },
      "getAuthorizedSenders()": {
        "notice": "Retrieve a list of authorized senders"
      },
      "getChainlinkToken()": {
        "notice": "Returns the address of the LINK token"
      },
      "isAuthorizedSender(address)": {
        "notice": "Use this to check if a node is authorized for fulfilling requests"
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "notice": "Called when LINK is sent to the contract via `transferAndCall`"
      },
      "operatorRequest(address,uint256,bytes32,bytes4,uint256,uint256,bytes)": {
        "notice": "Creates the Chainlink request"
      },
      "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
        "notice": "Creates the Chainlink request. This is a backwards compatible API with the Oracle.sol contract, but the behavior changes because callbackAddress is assumed to be the same as the request sender."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "ownerForward(address,bytes)": {
        "notice": "Forward a call to another contract"
      },
      "ownerTransferAndCall(address,uint256,bytes)": {
        "notice": "Interact with other LinkTokenReceiver contracts by calling transferAndCall"
      },
      "setAuthorizedSenders(address[])": {
        "notice": "Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow."
      },
      "setAuthorizedSendersOn(address[],address[])": {
        "notice": "Sets the fulfillment permission for"
      },
      "transferOwnableContracts(address[],address)": {
        "notice": "Transfer the ownership of ownable contracts. This is primarily intended for Authorized Forwarders but could possibly be extended to work with future contracts."
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "typeAndVersion()": {
        "notice": "The type and version of this contract"
      },
      "withdraw(address,uint256)": {
        "notice": "Allows the node operator to withdraw earned LINK to a given address"
      },
      "withdrawable()": {
        "notice": "Displays the amount of LINK that is available for the node operator to withdraw"
      }
    },
    "notice": "Node operators can deploy this contract to fulfill requests sent to them",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "@chainlink/contracts/src/v0.7/Operator.sol:Operator",
        "label": "s_authorizedSenders",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11,
        "contract": "@chainlink/contracts/src/v0.7/Operator.sol:Operator",
        "label": "s_authorizedSenderList",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 196,
        "contract": "@chainlink/contracts/src/v0.7/Operator.sol:Operator",
        "label": "s_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 198,
        "contract": "@chainlink/contracts/src/v0.7/Operator.sol:Operator",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 503,
        "contract": "@chainlink/contracts/src/v0.7/Operator.sol:Operator",
        "label": "s_commitments",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(Commitment)461_storage)"
      },
      {
        "astId": 507,
        "contract": "@chainlink/contracts/src/v0.7/Operator.sol:Operator",
        "label": "s_owned",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 510,
        "contract": "@chainlink/contracts/src/v0.7/Operator.sol:Operator",
        "label": "s_tokensInEscrow",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes31": {
        "encoding": "inplace",
        "label": "bytes31",
        "numberOfBytes": "31"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Commitment)461_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Operator.Commitment)",
        "numberOfBytes": "32",
        "value": "t_struct(Commitment)461_storage"
      },
      "t_struct(Commitment)461_storage": {
        "encoding": "inplace",
        "label": "struct Operator.Commitment",
        "members": [
          {
            "astId": 458,
            "contract": "@chainlink/contracts/src/v0.7/Operator.sol:Operator",
            "label": "paramsHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes31"
          },
          {
            "astId": 460,
            "contract": "@chainlink/contracts/src/v0.7/Operator.sol:Operator",
            "label": "dataVersion",
            "offset": 31,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}