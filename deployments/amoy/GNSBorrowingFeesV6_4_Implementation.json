{
  "address": "0xD079D75d76D9b6C798A4a1a6CEFFe5d7DAe537b0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        }
      ],
      "name": "GroupAccFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "increase",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "amount",
          "type": "uint112"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "oiLong",
          "type": "uint112"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "oiShort",
          "type": "uint112"
        }
      ],
      "name": "GroupOiUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint72",
          "name": "maxOi",
          "type": "uint72"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        }
      ],
      "name": "GroupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        }
      ],
      "name": "PairAccFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "prevGroupIndex",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newGroupIndex",
          "type": "uint16"
        }
      ],
      "name": "PairGroupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint72",
          "name": "maxOi",
          "type": "uint72"
        }
      ],
      "name": "PairParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        }
      ],
      "name": "TradeActionHandled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "initialPairAccFee",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "initialGroupAccFee",
          "type": "uint64"
        }
      ],
      "name": "TradeInitialAccFeesStored",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAllPairs",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "groupIndex",
                  "type": "uint16"
                },
                {
                  "internalType": "uint48",
                  "name": "block",
                  "type": "uint48"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_placeholder",
                  "type": "uint64"
                }
              ],
              "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
              "name": "groups",
              "type": "tuple[]"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Pair[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "long",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "short",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "max",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "_placeholder",
              "type": "uint40"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairOi[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        }
      ],
      "name": "getGroup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "oiLong",
              "type": "uint112"
            },
            {
              "internalType": "uint112",
              "name": "oiShort",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "maxOi",
              "type": "uint80"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Group",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "getGroupPendingAccFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFee",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getGroupPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "groupAccFeeDelta",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "indices",
          "type": "uint16[]"
        }
      ],
      "name": "getGroups",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "oiLong",
              "type": "uint112"
            },
            {
              "internalType": "uint112",
              "name": "oiShort",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "maxOi",
              "type": "uint80"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Group[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint48[]",
          "name": "",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "groupIndex",
                  "type": "uint16"
                },
                {
                  "internalType": "uint48",
                  "name": "block",
                  "type": "uint48"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_placeholder",
                  "type": "uint64"
                }
              ],
              "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
              "name": "groups",
              "type": "tuple[]"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Pair",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "long",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "short",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "max",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "_placeholder",
              "type": "uint40"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairOi",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint64",
              "name": "initialAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "initialAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "prevGroupAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "prevGroupAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "pairAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "pairAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "_placeholder",
              "type": "uint64"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
          "name": "pairGroups",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accPairFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accGroupFee",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "_placeholder",
              "type": "uint80"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees",
          "name": "initialFees",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getPairGroupAccFeesDeltas",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "deltaGroup",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "deltaPair",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "beforeTradeOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairGroupIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairMaxOi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairOpenInterestDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "getPairPendingAccFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFee",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getPairPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "pairAccFeeDelta",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "oiLong",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oiShort",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "currentBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accLastUpdatedBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PendingAccFeesInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "newAccFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "newAccFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "delta",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "long",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getTradeBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradeInitialAccFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accPairFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accGroupFee",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "_placeholder",
              "type": "uint80"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees",
          "name": "borrowingFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rollover",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "funding",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "openedAfterUpdate",
              "type": "bool"
            }
          ],
          "internalType": "struct GNSPairInfosInterfaceV6.TradeInitialAccFees",
          "name": "otherFees",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "long",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.LiqPriceInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getTradeLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groupFeeExponents",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "oiLong",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "oiShort",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "accLastUpdatedBlock",
          "type": "uint48"
        },
        {
          "internalType": "uint80",
          "name": "maxOi",
          "type": "uint80"
        },
        {
          "internalType": "uint256",
          "name": "lastAccBlockWeightedMarketCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "handleTradeAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accPairFee",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accGroupFee",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "block",
          "type": "uint48"
        },
        {
          "internalType": "uint80",
          "name": "_placeholder",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairOis",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "long",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "short",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "max",
          "type": "uint72"
        },
        {
          "internalType": "uint40",
          "name": "_placeholder",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "accLastUpdatedBlock",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "lastAccBlockWeightedMarketCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.GroupParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setGroupParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "indices",
          "type": "uint16[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.GroupParams[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "name": "setGroupParamsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPairParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairParams[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "name": "setPairParamsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        }
      ],
      "name": "withinMaxGroupOi",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7456b368b7c55470688e06fb9f4195eafcae4325de1303da79b1f8034de272e",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0xD079D75d76D9b6C798A4a1a6CEFFe5d7DAe537b0",
    "transactionIndex": 0,
    "gasUsed": "4226409",
    "logsBloom": "0x
    "blockHash": "0x22c04a3487366cbbba71f89ad1317255fb3a9e5df869d4d1152c1650a48e58dc",
    "transactionHash": "0xb7456b368b7c55470688e06fb9f4195eafcae4325de1303da79b1f8034de272e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5891426,
        "transactionHash": "0xb7456b368b7c55470688e06fb9f4195eafcae4325de1303da79b1f8034de272e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d7d1dcba2c678ee7e049bd55176354e7c5bbdcca",
          "0x000000000000000000000000bb583a9dde59ca64aaa14807f37a4c665c0d72c7"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002589bdd190ab6d90000000000000000000000000000000000000000000000000388f008f6ed648700000000000000000000000000000000000000000000001835808ff0c2ea9d5a0000000000000000000000000000000000000000000000000130542bdde2adae00000000000000000000000000000000000000000000001837d92bcddbf55433",
        "logIndex": 0,
        "blockHash": "0x22c04a3487366cbbba71f89ad1317255fb3a9e5df869d4d1152c1650a48e58dc"
      }
    ],
    "blockNumber": 5891426,
    "cumulativeGasUsed": "4226409",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cc5d4e2f213917157f3c16bbc680ee91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"}],\"name\":\"GroupAccFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"}],\"name\":\"GroupOiUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"name\":\"GroupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"}],\"name\":\"PairAccFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"prevGroupIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newGroupIndex\",\"type\":\"uint16\"}],\"name\":\"PairGroupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"name\":\"PairParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"}],\"name\":\"TradeActionHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialPairAccFee\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialGroupAccFee\",\"type\":\"uint64\"}],\"name\":\"TradeInitialAccFeesStored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAllPairs\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Pair[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairOi[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"}],\"name\":\"getGroup\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Group\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"getGroupPendingAccFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFee\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getGroupPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"groupAccFeeDelta\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"indices\",\"type\":\"uint16[]\"}],\"name\":\"getGroups\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Group[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint48[]\",\"name\":\"\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Pair\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairOi\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]\",\"name\":\"pairGroups\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees\",\"name\":\"initialFees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getPairGroupAccFeesDeltas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"deltaGroup\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deltaPair\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"beforeTradeOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairGroupIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairMaxOi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairOpenInterestDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"getPairPendingAccFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFee\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getPairPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeDelta\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"oiLong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oiShort\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PendingAccFeesInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"newAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"delta\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getTradeBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeInitialAccFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees\",\"name\":\"borrowingFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rollover\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"funding\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"openedAfterUpdate\",\"type\":\"bool\"}],\"internalType\":\"struct GNSPairInfosInterfaceV6.TradeInitialAccFees\",\"name\":\"otherFees\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.LiqPriceInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getTradeLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupFeeExponents\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"handleTradeAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initialAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairOis\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.GroupParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setGroupParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"indices\",\"type\":\"uint16[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.GroupParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setGroupParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPairParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setPairParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"}],\"name\":\"withinMaxGroupOi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GNSBorrowingFeesV6_4.sol\":\"GNSBorrowingFeesV6_4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/contracts/GNSBorrowingFeesV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../libraries/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\\\";\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"../interfaces/GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\n\\ncontract GNSBorrowingFeesV6_4 is Initializable, GNSBorrowingFeesInterfaceV6_4 {\\n    // Constants\\n    uint constant P_1 = 1e10;\\n    uint constant P_2 = 1e40;\\n\\n    // Addresses\\n    StorageInterfaceV5 public storageT;\\n    GNSPairInfosInterfaceV6 public pairInfos;\\n\\n    // State\\n    mapping(uint16 => Group) public groups;\\n    mapping(uint => Pair) public pairs;\\n    mapping(address => mapping(uint => mapping(uint => InitialAccFees))) public initialAccFees;\\n    mapping(uint => PairOi) public pairOis;\\n    mapping(uint => uint48) public groupFeeExponents;\\n\\n    function initialize(StorageInterfaceV5 _storageT, GNSPairInfosInterfaceV6 _pairInfos) external initializer {\\n        require(address(_storageT) != address(0) && address(_pairInfos) != address(0), \\\"WRONG_PARAMS\\\");\\n\\n        storageT = _storageT;\\n        pairInfos = _pairInfos;\\n    }\\n\\n    // Modifiers\\n    modifier onlyManager() {\\n        require(msg.sender == pairInfos.manager(), \\\"MANAGER_ONLY\\\");\\n        _;\\n    }\\n\\n    modifier onlyCallbacks() {\\n        require(msg.sender == storageT.callbacks(), \\\"CALLBACKS_ONLY\\\");\\n        _;\\n    }\\n\\n    // Manage pair params\\n    function setPairParams(uint pairIndex, PairParams calldata value) external onlyManager {\\n        _setPairParams(pairIndex, value);\\n    }\\n\\n    function setPairParamsArray(uint[] calldata indices, PairParams[] calldata values) external onlyManager {\\n        uint len = indices.length;\\n        require(len == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i; i < len; ) {\\n            _setPairParams(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairParams(uint pairIndex, PairParams calldata value) private {\\n        require(value.feeExponent >= 1 && value.feeExponent <= 3, \\\"WRONG_EXPONENT\\\");\\n\\n        Pair storage p = pairs[pairIndex];\\n\\n        uint16 prevGroupIndex = getPairGroupIndex(pairIndex);\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        _setPairPendingAccFees(pairIndex, currentBlock);\\n\\n        if (value.groupIndex != prevGroupIndex) {\\n            _setGroupPendingAccFees(prevGroupIndex, currentBlock);\\n            _setGroupPendingAccFees(value.groupIndex, currentBlock);\\n\\n            (uint oiLong, uint oiShort) = getPairOpenInterestDai(pairIndex);\\n\\n            // Only remove OI from old group if old group is not 0\\n            _setGroupOi(prevGroupIndex, true, false, oiLong);\\n            _setGroupOi(prevGroupIndex, false, false, oiShort);\\n\\n            // Add OI to new group if it's not group 0 (even if old group is 0)\\n            // So when we assign a pair to a group, it takes into account its OI\\n            // And group 0 OI will always be 0 but it doesn't matter since it's not used\\n            _setGroupOi(value.groupIndex, true, true, oiLong);\\n            _setGroupOi(value.groupIndex, false, true, oiShort);\\n\\n            Group memory newGroup = groups[value.groupIndex];\\n            Group memory prevGroup = groups[prevGroupIndex];\\n\\n            p.groups.push(\\n                PairGroup(\\n                    value.groupIndex,\\n                    ChainUtils.getUint48BlockNumber(currentBlock),\\n                    newGroup.accFeeLong,\\n                    newGroup.accFeeShort,\\n                    prevGroup.accFeeLong,\\n                    prevGroup.accFeeShort,\\n                    p.accFeeLong,\\n                    p.accFeeShort,\\n                    0 // placeholder\\n                )\\n            );\\n\\n            emit PairGroupUpdated(pairIndex, prevGroupIndex, value.groupIndex);\\n        }\\n\\n        p.feePerBlock = value.feePerBlock;\\n        p.feeExponent = value.feeExponent;\\n        pairOis[pairIndex].max = value.maxOi;\\n\\n        emit PairParamsUpdated(pairIndex, value.groupIndex, value.feePerBlock, value.feeExponent, value.maxOi);\\n    }\\n\\n    // Manage group params\\n    function setGroupParams(uint16 groupIndex, GroupParams calldata value) external onlyManager {\\n        _setGroupParams(groupIndex, value);\\n    }\\n\\n    function setGroupParamsArray(uint16[] calldata indices, GroupParams[] calldata values) external onlyManager {\\n        uint len = indices.length;\\n        require(len == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i; i < len; ) {\\n            _setGroupParams(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setGroupParams(uint16 groupIndex, GroupParams calldata value) private {\\n        require(groupIndex > 0, \\\"GROUP_0\\\");\\n        require(value.feeExponent >= 1 && value.feeExponent <= 3, \\\"WRONG_EXPONENT\\\");\\n\\n        _setGroupPendingAccFees(groupIndex, ChainUtils.getBlockNumber());\\n\\n        Group storage g = groups[groupIndex];\\n        g.feePerBlock = value.feePerBlock;\\n        g.maxOi = uint80(value.maxOi);\\n        groupFeeExponents[groupIndex] = value.feeExponent;\\n\\n        emit GroupUpdated(groupIndex, value.feePerBlock, value.maxOi, value.feeExponent);\\n    }\\n\\n    // Group OI setter\\n    function _setGroupOi(\\n        uint16 groupIndex,\\n        bool long,\\n        bool increase,\\n        uint amount // 1e18\\n    ) private {\\n        Group storage group = groups[groupIndex];\\n        uint112 amountFinal;\\n\\n        if (groupIndex > 0) {\\n            amount = (amount * P_1) / 1e18; // 1e10\\n            require(amount <= type(uint112).max, \\\"OVERFLOW\\\");\\n\\n            amountFinal = uint112(amount);\\n\\n            if (long) {\\n                group.oiLong = increase\\n                    ? group.oiLong + amountFinal\\n                    : group.oiLong - (group.oiLong > amountFinal ? amountFinal : group.oiLong);\\n            } else {\\n                group.oiShort = increase\\n                    ? group.oiShort + amountFinal\\n                    : group.oiShort - (group.oiShort > amountFinal ? amountFinal : group.oiShort);\\n            }\\n        }\\n\\n        emit GroupOiUpdated(groupIndex, long, increase, amountFinal, group.oiLong, group.oiShort);\\n    }\\n\\n    // Acc fees getters for pairs and groups\\n    function getPendingAccFees(\\n        PendingAccFeesInput memory input\\n    ) public pure returns (uint64 newAccFeeLong, uint64 newAccFeeShort, uint64 delta) {\\n        require(input.currentBlock >= input.accLastUpdatedBlock, \\\"BLOCK_ORDER\\\");\\n\\n        bool moreShorts = input.oiLong < input.oiShort;\\n        uint netOi = moreShorts ? input.oiShort - input.oiLong : input.oiLong - input.oiShort;\\n\\n        uint _delta = input.maxOi > 0 && input.feeExponent > 0\\n            ? ((input.currentBlock - input.accLastUpdatedBlock) *\\n                input.feePerBlock *\\n                ((netOi * 1e10) / input.maxOi) ** input.feeExponent) / (1e18 ** input.feeExponent)\\n            : 0; // 1e10 (%)\\n\\n        require(_delta <= type(uint64).max, \\\"OVERFLOW\\\");\\n        delta = uint64(_delta);\\n\\n        newAccFeeLong = moreShorts ? input.accFeeLong : input.accFeeLong + delta;\\n        newAccFeeShort = moreShorts ? input.accFeeShort + delta : input.accFeeShort;\\n    }\\n\\n    function getPairGroupAccFeesDeltas(\\n        uint i,\\n        PairGroup[] memory pairGroups,\\n        InitialAccFees memory initialFees,\\n        uint pairIndex,\\n        bool long,\\n        uint currentBlock\\n    ) public view returns (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen) {\\n        PairGroup memory group = pairGroups[i];\\n\\n        beforeTradeOpen = group.block < initialFees.block;\\n\\n        if (i == pairGroups.length - 1) {\\n            // Last active group\\n            deltaGroup = getGroupPendingAccFee(group.groupIndex, currentBlock, long);\\n            deltaPair = getPairPendingAccFee(pairIndex, currentBlock, long);\\n        } else {\\n            // Previous groups\\n            PairGroup memory nextGroup = pairGroups[i + 1];\\n\\n            // If it's not the first group to be before the trade was opened then fee is 0\\n            if (beforeTradeOpen && nextGroup.block <= initialFees.block) {\\n                return (0, 0, beforeTradeOpen);\\n            }\\n\\n            deltaGroup = long ? nextGroup.prevGroupAccFeeLong : nextGroup.prevGroupAccFeeShort;\\n            deltaPair = long ? nextGroup.pairAccFeeLong : nextGroup.pairAccFeeShort;\\n        }\\n\\n        if (beforeTradeOpen) {\\n            deltaGroup -= initialFees.accGroupFee;\\n            deltaPair -= initialFees.accPairFee;\\n        } else {\\n            deltaGroup -= (long ? group.initialAccFeeLong : group.initialAccFeeShort);\\n            deltaPair -= (long ? group.pairAccFeeLong : group.pairAccFeeShort);\\n        }\\n    }\\n\\n    // Pair acc fees helpers\\n    function getPairPendingAccFees(\\n        uint pairIndex,\\n        uint currentBlock\\n    ) public view returns (uint64 accFeeLong, uint64 accFeeShort, uint64 pairAccFeeDelta) {\\n        Pair memory pair = pairs[pairIndex];\\n\\n        (uint pairOiLong, uint pairOiShort) = getPairOpenInterestDai(pairIndex);\\n\\n        (accFeeLong, accFeeShort, pairAccFeeDelta) = getPendingAccFees(\\n            PendingAccFeesInput(\\n                pair.accFeeLong,\\n                pair.accFeeShort,\\n                pairOiLong,\\n                pairOiShort,\\n                pair.feePerBlock,\\n                currentBlock,\\n                pair.accLastUpdatedBlock,\\n                pairOis[pairIndex].max,\\n                pair.feeExponent\\n            )\\n        );\\n    }\\n\\n    function getPairPendingAccFee(uint pairIndex, uint currentBlock, bool long) public view returns (uint64 accFee) {\\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getPairPendingAccFees(pairIndex, currentBlock);\\n        return long ? accFeeLong : accFeeShort;\\n    }\\n\\n    function _setPairPendingAccFees(\\n        uint pairIndex,\\n        uint currentBlock\\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\\n        (accFeeLong, accFeeShort, ) = getPairPendingAccFees(pairIndex, currentBlock);\\n\\n        Pair storage pair = pairs[pairIndex];\\n\\n        (pair.accFeeLong, pair.accFeeShort) = (accFeeLong, accFeeShort);\\n        pair.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(currentBlock);\\n\\n        emit PairAccFeesUpdated(pairIndex, currentBlock, pair.accFeeLong, pair.accFeeShort);\\n    }\\n\\n    // Group acc fees helpers\\n    function getGroupPendingAccFees(\\n        uint16 groupIndex,\\n        uint currentBlock\\n    ) public view returns (uint64 accFeeLong, uint64 accFeeShort, uint64 groupAccFeeDelta) {\\n        Group memory group = groups[groupIndex];\\n\\n        (accFeeLong, accFeeShort, groupAccFeeDelta) = getPendingAccFees(\\n            PendingAccFeesInput(\\n                group.accFeeLong,\\n                group.accFeeShort,\\n                (uint(group.oiLong) * 1e18) / P_1,\\n                (uint(group.oiShort) * 1e18) / P_1,\\n                group.feePerBlock,\\n                currentBlock,\\n                group.accLastUpdatedBlock,\\n                uint72(group.maxOi),\\n                groupFeeExponents[groupIndex]\\n            )\\n        );\\n    }\\n\\n    function getGroupPendingAccFee(\\n        uint16 groupIndex,\\n        uint currentBlock,\\n        bool long\\n    ) public view returns (uint64 accFee) {\\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getGroupPendingAccFees(groupIndex, currentBlock);\\n        return long ? accFeeLong : accFeeShort;\\n    }\\n\\n    function _setGroupPendingAccFees(\\n        uint16 groupIndex,\\n        uint currentBlock\\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\\n        (accFeeLong, accFeeShort, ) = getGroupPendingAccFees(groupIndex, currentBlock);\\n\\n        Group storage group = groups[groupIndex];\\n\\n        (group.accFeeLong, group.accFeeShort) = (accFeeLong, accFeeShort);\\n        group.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(currentBlock);\\n\\n        emit GroupAccFeesUpdated(groupIndex, currentBlock, group.accFeeLong, group.accFeeShort);\\n    }\\n\\n    // Interaction with callbacks\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external override {\\n        uint16 groupIndex = getPairGroupIndex(pairIndex);\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        (uint64 pairAccFeeLong, uint64 pairAccFeeShort) = _setPairPendingAccFees(pairIndex, currentBlock);\\n        (uint64 groupAccFeeLong, uint64 groupAccFeeShort) = _setGroupPendingAccFees(groupIndex, currentBlock);\\n\\n        _setGroupOi(groupIndex, long, open, positionSizeDai);\\n\\n        if (open) {\\n            InitialAccFees memory initialFees = InitialAccFees(\\n                long ? pairAccFeeLong : pairAccFeeShort,\\n                long ? groupAccFeeLong : groupAccFeeShort,\\n                ChainUtils.getUint48BlockNumber(currentBlock),\\n                0 // placeholder\\n            );\\n\\n            initialAccFees[trader][pairIndex][index] = initialFees;\\n\\n            emit TradeInitialAccFeesStored(trader, pairIndex, index, initialFees.accPairFee, initialFees.accGroupFee);\\n        }\\n\\n        emit TradeActionHandled(trader, pairIndex, index, open, long, positionSizeDai);\\n    }\\n\\n    // Important trade getters\\n    function getTradeBorrowingFee(BorrowingFeeInput memory input) public view override returns (uint fee) {\\n        InitialAccFees memory initialFees = initialAccFees[input.trader][input.pairIndex][input.index];\\n        PairGroup[] memory pairGroups = pairs[input.pairIndex].groups;\\n\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        PairGroup memory firstPairGroup;\\n        if (pairGroups.length > 0) {\\n            firstPairGroup = pairGroups[0];\\n        }\\n\\n        // If pair has had no group after trade was opened, initialize with pair borrowing fee\\n        if (pairGroups.length == 0 || firstPairGroup.block > initialFees.block) {\\n            fee = ((\\n                pairGroups.length == 0\\n                    ? getPairPendingAccFee(input.pairIndex, currentBlock, input.long)\\n                    : (input.long ? firstPairGroup.pairAccFeeLong : firstPairGroup.pairAccFeeShort)\\n            ) - initialFees.accPairFee);\\n        }\\n\\n        // Sum of max(pair fee, group fee) for all groups the pair was in while trade was open\\n        for (uint i = pairGroups.length; i > 0; ) {\\n            (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen) = getPairGroupAccFeesDeltas(\\n                i - 1,\\n                pairGroups,\\n                initialFees,\\n                input.pairIndex,\\n                input.long,\\n                currentBlock\\n            );\\n\\n            fee += (deltaGroup > deltaPair ? deltaGroup : deltaPair);\\n\\n            // Exit loop at first group before trade was open\\n            if (beforeTradeOpen) break;\\n            unchecked {\\n                --i;\\n            }\\n        }\\n\\n        fee = (input.collateral * input.leverage * fee) / P_1 / 100; // 1e18 (DAI)\\n    }\\n\\n    function getTradeLiquidationPrice(LiqPriceInput calldata input) external view override returns (uint)  {\\n        return\\n            pairInfos.getTradeLiquidationPricePure(\\n                input.openPrice,\\n                input.long,\\n                input.collateral,\\n                input.leverage,\\n                pairInfos.getTradeRolloverFee(input.trader, input.pairIndex, input.index, input.collateral) +\\n                    getTradeBorrowingFee(\\n                        BorrowingFeeInput(\\n                            input.trader,\\n                            input.pairIndex,\\n                            input.index,\\n                            input.long,\\n                            input.collateral,\\n                            input.leverage\\n                        )\\n                    ),\\n                pairInfos.getTradeFundingFee(\\n                    input.trader,\\n                    input.pairIndex,\\n                    input.index,\\n                    input.long,\\n                    input.collateral,\\n                    input.leverage\\n                )\\n            );\\n    }\\n\\n    // Public getters\\n    function getPairOpenInterestDai(uint pairIndex) public view returns (uint, uint) {\\n        return (storageT.openInterestDai(pairIndex, 0), storageT.openInterestDai(pairIndex, 1));\\n    }\\n\\n    function getPairGroupIndex(uint pairIndex) public view returns (uint16 groupIndex) {\\n        PairGroup[] memory pairGroups = pairs[pairIndex].groups;\\n        return pairGroups.length == 0 ? 0 : pairGroups[pairGroups.length - 1].groupIndex;\\n    }\\n\\n    // External getters\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    ) external view override returns (bool) {\\n        Group memory g = groups[getPairGroupIndex(pairIndex)];\\n        return (g.maxOi == 0) || ((long ? g.oiLong : g.oiShort) + (positionSizeDai * P_1) / 1e18 <= g.maxOi);\\n    }\\n\\n    function getGroup(uint16 groupIndex) external view returns (Group memory, uint48) {\\n        return (groups[groupIndex], groupFeeExponents[groupIndex]);\\n    }\\n\\n    function getPair(uint pairIndex) external view returns (Pair memory, PairOi memory) {\\n        return (pairs[pairIndex], pairOis[pairIndex]);\\n    }\\n\\n    function getAllPairs() external view returns (Pair[] memory, PairOi[] memory) {\\n        uint len = storageT.priceAggregator().pairsStorage().pairsCount();\\n        Pair[] memory p = new Pair[](len);\\n        PairOi[] memory pairOi = new PairOi[](len);\\n\\n        for (uint i; i < len; ) {\\n            p[i] = pairs[i];\\n            pairOi[i] = pairOis[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (p, pairOi);\\n    }\\n\\n    function getGroups(uint16[] calldata indices) external view returns (Group[] memory, uint48[] memory) {\\n        Group[] memory g = new Group[](indices.length);\\n        uint48[] memory e = new uint48[](indices.length);\\n        uint len = indices.length;\\n\\n        for (uint i; i < len; ) {\\n            g[i] = groups[indices[i]];\\n            e[i] = groupFeeExponents[indices[i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (g, e);\\n    }\\n\\n    function getTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    )\\n        external\\n        view\\n        returns (InitialAccFees memory borrowingFees, GNSPairInfosInterfaceV6.TradeInitialAccFees memory otherFees)\\n    {\\n        borrowingFees = initialAccFees[trader][pairIndex][index];\\n        otherFees = pairInfos.tradeInitialAccFees(trader, pairIndex, index);\\n    }\\n\\n    function getPairMaxOi(uint pairIndex) external view override returns (uint)  {\\n        return pairOis[pairIndex].max;\\n    }\\n}\",\"keccak256\":\"0x9caf9e9a7e4fe206cfb112d99a94bcae882f6a1692fdd0dd71994f7b643e76c0\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface ChainlinkFeedInterfaceV5{\\n    function latestRoundData() external view returns (uint80,int,uint,uint,uint80);\\n}\",\"keccak256\":\"0x4f39b41b3bdadfb7233fac30c60cedfd20d534ba536c0b016818dd01b47728b1\",\"license\":\"MIT\"},\"contracts/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface GNSBorrowingFeesInterfaceV6_4 {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(uint indexed pairIndex, uint16 indexed prevGroupIndex, uint16 indexed newGroupIndex);\\n    event GroupUpdated(uint16 indexed groupIndex, uint32 feePerBlock, uint72 maxOi, uint48 feeExponent);\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(uint indexed pairIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupAccFeesUpdated(uint16 indexed groupIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(LiqPriceInput calldata) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(BorrowingFeeInput memory) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(uint pairIndex, bool long, uint positionSizeDai) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\",\"keccak256\":\"0x45e49a29961376e50a705047ffcf736885fe69fa9be03e40140102544300cb2b\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface GNSPairInfosInterfaceV6 {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(address, uint, uint) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(address trader, uint pairIndex, uint index, bool long) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\",\"keccak256\":\"0x7f6341ee7fb757eba372d876035758b9f3ad043299353787ea9fd3964c53be4c\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xe1c4eac213e8cc146ef165a92ff5b652c250d2340d4954b7647eed73e601757f\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0x1aba6c110d3893750103e30bd9556f785887576264ba70aa2c4f719eda7de3c4\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(uint) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosDai(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\",\"keccak256\":\"0x664be7bcc46917987f32350f6bdb4e925679875f828e8aef07f0f14c7a4d43d2\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\\n\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n\\n    function openTrades(address, uint, uint) external view returns (Trade memory);\\n\\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n\\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\",\"keccak256\":\"0xb878c2794b85f554cd41e925a457e789e71b2512fdc0e39ce4552c1194094fab\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x0b1aef35747e180443d65683c29cebff6cc9eaaac364f29f1a619f68b8df9b82\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (block.chainid == ARBITRUM_MAINNET || block.chainid == ARBITRUM_GOERLI) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(uint blockNumber) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\",\"keccak256\":\"0x0dc4bd22d718155e7f7471ffb0776c8df4fa0e192999c08aa3572a2f839319d4\",\"license\":\"MIT\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\",\"keccak256\":\"0xe3ded73d85620c3a752c8c82be5e24e22b868e47f021e2b6e1783fb2be56aa24\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.7;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\",\"keccak256\":\"0x3ef4c9add07628e009b35ee24c956fd626f4569d910b314fe09ed9deebe686c4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614b78806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806390895ff111610104578063bb219c75116100a2578063d627450511610071578063d6274505146107c1578063e3e98a75146107e4578063f800ece914610823578063ff933fc41461083957600080fd5b8063bb219c75146106f6578063bcb788711461077a578063bdf391cc1461078d578063ce67edfb146107ae57600080fd5b8063b0baf5d4116100de578063b0baf5d4146105e9578063b2c9dd8b146105fc578063b91ac7881461060f578063b94ffa1c146106c657600080fd5b806390895ff11461051a578063930842aa146105c357806393e0e533146105d657600080fd5b8063485cc9551161017c5780637b64112b1161014b5780637b64112b1461042a5780637cbd3c981461043d5780638ee1caa7146104b75780638f694238146104f457600080fd5b8063485cc955146103c75780634c67cfa0146103dc578063651501b514610404578063706faf3a1461041757600080fd5b80631ab5911a116101b85780631ab5911a14610263578063220052021461028e5780632d28a817146102af5780633979324d146102d057600080fd5b80630f8df7e0146101df5780631346b0ff1461021f57806316fff0741461024a575b600080fd5b6101f26101ed366004614202565b61085a565b604080516001600160401b0394851681529390921660208401521515908201526060015b60405180910390f35b600154610232906001600160a01b031681565b6040516001600160a01b039091168152602001610216565b600054610232906201000090046001600160a01b031681565b6102766102713660046141a9565b6109db565b6040516001600160401b039091168152602001610216565b6102a161029c366004613db5565b610a08565b60405161021692919061465d565b6102c26102bd366004613f88565b610c34565b604051908152602001610216565b61035c6102de366004614125565b60026020819052600091825260409091208054600182015491909201546001600160701b0380841693600160701b810490911692600160e01b90910463ffffffff16916001600160401b0380831692600160401b810490911691600160801b820465ffffffffffff1691600160b01b90046001600160501b03169088565b604080516001600160701b03998a16815298909716602089015263ffffffff909516958701959095526001600160401b0392831660608701529116608085015265ffffffffffff1660a08401526001600160501b0390911660c083015260e082015261010001610216565b6103da6103d5366004613f36565b610f4e565b005b6103ef6103ea3660046141e9565b6110fa565b60408051928352602083019190915201610216565b6103da610412366004613e8f565b611215565b6102c2610425366004614012565b61135e565b610276610438366004614421565b61162c565b61045061044b366004613d19565b61163b565b6040805183516001600160401b039081168252602080860151909116818301528483015165ffffffffffff16828401526060948501516001600160501b031694820194909452825160808201529282015160a08401520151151560c082015260e001610216565b6104ca6104c53660046143ff565b61177f565b604080516001600160401b0394851681529284166020840152921691810191909152606001610216565b6105076105023660046141e9565b6119af565b60405161ffff9091168152602001610216565b610582610528366004613d19565b60046020908152600093845260408085208252928452828420905282529020546001600160401b0380821691600160401b810490911690600160801b810465ffffffffffff1690600160b01b90046001600160501b031684565b604080516001600160401b03958616815294909316602085015265ffffffffffff909116918301919091526001600160501b03166060820152608001610216565b6103da6105d1366004614140565b611ad1565b6104ca6105e436600461402a565b611b95565b6103da6105f73660046143d5565b611d56565b6103da61060a366004613df6565b611e16565b61067a61061d3660046141e9565b6003602052600090815260409020600181015460029091015463ffffffff8216916001600160401b036401000000008204811692600160601b83049091169165ffffffffffff600160a01b8204811692600160d01b909204169086565b6040805163ffffffff9790971687526001600160401b039586166020880152939094169285019290925265ffffffffffff908116606085015216608083015260a082015260c001610216565b6102c26106d43660046141e9565b600090815260056020526040902054600160901b90046001600160481b031690565b6107436107043660046141e9565b6005602052600090815260409020546001600160481b0380821691600160481b8104821691600160901b82041690600160d81b900464ffffffffff1684565b604080516001600160481b0395861681529385166020850152919093169082015264ffffffffff9091166060820152608001610216565b6104ca61078836600461417f565b611f65565b6107a061079b3660046141e9565b612104565b604051610216929190614834565b6103da6107bc366004613d4e565b612321565b6107d46107cf36600461439d565b6125ac565b6040519015158152602001610216565b61080c6107f23660046141e9565b60066020526000908152604090205465ffffffffffff1681565b60405165ffffffffffff9091168152602001610216565b61082b6126d2565b6040516102169291906146eb565b61084c610847366004614125565b612b40565b60405161021692919061480f565b600080600080888a8151811061087257610872614af0565b60200260200101519050876040015165ffffffffffff16816020015165ffffffffffff16109150600189516108a79190614aa7565b8a14156108cf5780516108bb9086886109db565b93506108c887868861162c565b925061095f565b6000896108dd8c6001614911565b815181106108ed576108ed614af0565b6020026020010151905082801561091c5750886040015165ffffffffffff16816020015165ffffffffffff1611155b1561092f576000809450945050506109cf565b8661093e578060a00151610944565b80608001515b945086610955578060e0015161095b565b8060c001515b9350505b811561098a5760208801516109749085614abe565b88519094506109839084614abe565b92506109cd565b8561099957806060015161099f565b80604001515b6109a99085614abe565b9350856109ba578060e001516109c0565b8060c001515b6109ca9084614abe565b92505b505b96509650969350505050565b60008060006109ea8686611f65565b5091509150836109fa57806109fc565b815b925050505b9392505050565b6060806000836001600160401b03811115610a2557610a25614b06565b604051908082528060200260200182016040528015610a5e57816020015b610a4b613b4f565b815260200190600190039081610a435790505b5090506000846001600160401b03811115610a7b57610a7b614b06565b604051908082528060200260200182016040528015610aa4578160200160208202803683370190505b5090508460005b81811015610c255760026000898984818110610ac957610ac9614af0565b9050602002016020810190610ade9190614125565b61ffff168152602080820192909252604090810160002081516101008101835281546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018101546001600160401b038082166060850152600160401b8204166080840152600160801b810465ffffffffffff1660a0840152600160b01b90046001600160501b031660c08301526002015460e08201528451859083908110610b9957610b99614af0565b602002602001018190525060066000898984818110610bba57610bba614af0565b9050602002016020810190610bcf9190614125565b61ffff16815260200190815260200160002060009054906101000a900465ffffffffffff16838281518110610c0657610c06614af0565b65ffffffffffff90921660209283029190910190910152600101610aab565b509193509150505b9250929050565b80516001600160a01b03166000908152600460209081526040808320828501805185529083528184208286015185528352818420825160808101845290546001600160401b038082168352600160401b82041682860152600160801b810465ffffffffffff1682850152600160b01b90046001600160501b0316606082015290518452600383528184208054835181860281018601909452808452919385939290849084015b82821015610d8b576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e086015292049091166101008301529083529092019101610cda565b5050505090506000610d9b612c00565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152909150825115610e0c5782600081518110610e0157610e01614af0565b602002602001015190505b82511580610e315750836040015165ffffffffffff16816020015165ffffffffffff16115b15610e85578351835115610e5c578660600151610e52578160e00151610e6f565b8160c00151610e6f565b610e6f876020015184896060015161162c565b610e799190614abe565b6001600160401b031694505b82515b8015610f085760008080610eb2610ea0600186614aa7565b888a8d602001518e606001518b61085a565b925092509250816001600160401b0316836001600160401b031611610ed75781610ed9565b825b610eec906001600160401b03168a614911565b98508015610efc57505050610f08565b50505060001901610e88565b5060646402540be400868860a001518960800151610f269190614a60565b610f309190614a60565b610f3a919061494b565b610f44919061494b565b9695505050505050565b600054610100900460ff1615808015610f6e5750600054600160ff909116105b80610f885750303b158015610f88575060005460ff166001145b610ff05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015611013576000805461ff0019166101001790555b6001600160a01b0383161580159061103357506001600160a01b03821615155b61106e5760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b6044820152606401610fe7565b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b03191691841691909117905580156110f5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600080546040516328daca2160e01b8152600481018490526024810183905282916201000090046001600160a01b0316906328daca219060440160206040518083038186803b15801561114c57600080fd5b505afa158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190613f6f565b6000546040516328daca2160e01b81526004810186905260016024820152620100009091046001600160a01b0316906328daca219060440160206040518083038186803b1580156111d457600080fd5b505afa1580156111e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120c9190613f6f565b91509150915091565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561126357600080fd5b505afa158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b9190613cfc565b6001600160a01b0316336001600160a01b0316146112cb5760405162461bcd60e51b8152600401610fe7906147c7565b8281811461130a5760405162461bcd60e51b815260206004820152600c60248201526b0aea49e9c8ebe988a9c8ea8960a31b6044820152606401610fe7565b60005b818110156113565761134e86868381811061132a5761132a614af0565b9050602002013585858481811061134357611343614af0565b905060800201612c95565b60010161130d565b505050505050565b6001546000906001600160a01b0316636bcbe860606084013561138760a0860160808701613f19565b8560a001358660c001356114026040518060c001604052808a60000160208101906113b29190613cdf565b6001600160a01b0316815260208b810135908201526040808c0135908201526060016113e460a08c0160808d01613f19565b151581526020018a60a0013581526020018a60c00135815250610c34565b6001546001600160a01b03166358f796bc61142060208c018c613cdf565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015260208d013560248301528c0135604482015260a08c0135606482015260840160206040518083038186803b15801561147c57600080fd5b505afa158015611490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b49190613f6f565b6114be9190614911565b6001546001600160a01b031663f6c50efe6114dc60208c018c613cdf565b8b602001358c604001358d60800160208101906114f99190613f19565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301521515606482015260a08c0135608482015260c08c013560a482015260c40160206040518083038186803b15801561156057600080fd5b505afa158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190613f6f565b6040516001600160e01b031960e089901b1681526004810196909652931515602486015260448501929092526064840152608483015260a482015260c40160206040518083038186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190613f6f565b92915050565b60008060006109ea868661177f565b604080516080810182526000808252602080830182905282840182905260608084018390528451908101855282815290810182905292830152906001600160a01b0385811660008181526004602081815260408084208a85528252808420898552825292839020835160808101855290546001600160401b038082168352600160401b82041692820192909252600160801b820465ffffffffffff1681850152600160b01b9091046001600160501b031660608201526001549251632f6ac02760e11b815291820193909352602481018890526044810187905291945090911690635ed5804e9060640160606040518083038186803b15801561173d57600080fd5b505afa158015611751573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177591906140c4565b9050935093915050565b6000828152600360209081526040808320815181546101009481028201850190935260e0810183815285948594859492849290918491879085015b8282101561186b576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e0860152920490911661010083015290835290920191016117ba565b50505090825250600182015463ffffffff811660208301526001600160401b03640100000000820481166040840152600160601b820416606083015265ffffffffffff600160a01b820481166080840152600160d01b9091041660a082015260029091015460c09091015290506000806118e4886110fa565b9150915061199e60405180610120016040528085604001516001600160401b0316815260200185606001516001600160401b03168152602001848152602001838152602001856020015163ffffffff168152602001898152602001856080015165ffffffffffff168152602001600560008c815260200190815260200160002060000160129054906101000a90046001600160481b03166001600160481b031681526020018560a0015165ffffffffffff16815250611b95565b919a90995090975095505050505050565b600081815260036020908152604080832080548251818502810185019093528083528493849084015b82821015611a89576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e0860152920490911661010083015290835290920191016119d8565b5050505090508051600014611ac8578060018251611aa79190614aa7565b81518110611ab757611ab7614af0565b602002602001015160000151610a01565b60009392505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1f57600080fd5b505afa158015611b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b579190613cfc565b6001600160a01b0316336001600160a01b031614611b875760405162461bcd60e51b8152600401610fe7906147c7565b611b91828261350b565b5050565b60008060008360c001518460a001511015611be05760405162461bcd60e51b815260206004820152600b60248201526a212627a1a5afa7a92222a960a91b6044820152606401610fe7565b6060840151604085015110600081611c0b5785606001518660400151611c069190614aa7565b611c1f565b85604001518660600151611c1f9190614aa7565b90506000808760e001516001600160481b0316118015611c4c5750600087610100015165ffffffffffff16115b611c57576000611ce3565b610100870151611c6f90670de0b6b3a76400006149b0565b61010088015160e08901516001600160481b0316611c92856402540be400614a60565b611c9c919061494b565b611ca691906149b0565b886080015163ffffffff168960c001518a60a00151611cc59190614aa7565b611ccf9190614a60565b611cd99190614a60565b611ce3919061494b565b90506001600160401b03811115611d0c5760405162461bcd60e51b8152600401610fe7906147ed565b80935082611d26578651611d21908590614929565b611d29565b86515b955082611d3a578660200151611d4a565b838760200151611d4a9190614929565b94505050509193909250565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015611da457600080fd5b505afa158015611db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddc9190613cfc565b6001600160a01b0316336001600160a01b031614611e0c5760405162461bcd60e51b8152600401610fe7906147c7565b611b918282612c95565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6457600080fd5b505afa158015611e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9c9190613cfc565b6001600160a01b0316336001600160a01b031614611ecc5760405162461bcd60e51b8152600401610fe7906147c7565b82818114611f0b5760405162461bcd60e51b815260206004820152600c60248201526b0aea49e9c8ebe988a9c8ea8960a31b6044820152606401610fe7565b60005b8181101561135657611f5d868683818110611f2b57611f2b614af0565b9050602002016020810190611f409190614125565b858584818110611f5257611f52614af0565b90506060020161350b565b600101611f0e565b61ffff8216600090815260026020818152604080842081516101008101835281546001600160701b038082168352600160701b8204811683870152600160e01b90910463ffffffff168285015260018301546001600160401b0380821660608501908152600160401b8304821660808601908152600160801b840465ffffffffffff1660a0870152600160b01b9093046001600160501b031660c0860152949097015460e08401528451610120810186529351871684525190951693820193909352825185948594936120f59392908301916402540be400916120519116670de0b6b3a7640000614a60565b61205b919061494b565b81526020016402540be40084602001516001600160701b0316670de0b6b3a76400006120879190614a60565b612091919061494b565b815260408085015163ffffffff166020808401919091528183018a905260a08087015165ffffffffffff908116606086015260c08801516001600160481b0316608086015261ffff8d16600090815260069093529290912054909116910152611b95565b91989097509095509350505050565b6040805160e08082018352606080835260006020808501829052848601829052828501829052608080860183905260a0860183905260c0860183905286519081018752828152808201839052808701839052928301829052868252600381528582206005825286832087518254938402810161010090810190995295860183815296979496919590949093869385939285929085015b8282101561224b576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e08601529204909116610100830152908352909201910161219a565b50505090825250600182015463ffffffff811660208084019190915264010000000082046001600160401b03908116604080860191909152600160601b8404909116606080860191909152600160a01b840465ffffffffffff908116608080880191909152600160d01b9095041660a086015260029095015460c0909401939093528251918201835294546001600160481b038082168352600160481b8204811696830196909652600160901b810490951691810191909152600160d81b90930464ffffffffff16908301529590945092505050565b600061232c866119af565b90506000612338612c00565b9050600080612347898461371e565b91509150600080612358868661382d565b9150915061236886888a8c613923565b871561253e5760006040518060800160405280896123865785612388565b865b6001600160401b03168152602001896123a157836123a3565b845b6001600160401b031681526020016123ba88613b23565b65ffffffffffff16815260200160006001600160501b0316815250905080600460008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060008d815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a8154816001600160401b0302191690836001600160401b0316021790555060408201518160000160106101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160166101000a8154816001600160501b0302191690836001600160501b031602179055509050508b8d6001600160a01b03167faa00ca5c6f282cb9f35953ecb0eaf8e39c95b7c8df114efac12162a85c085e608d84600001518560200151604051612534939291909283526001600160401b03918216602084015216604082015260600190565b60405180910390a3505b8a8c6001600160a01b03167f66baa1848f5d4d14567e9bc527e5608778c86e512490d413cfafc9250327308f8c8b8b8e6040516125969493929190938452911515602084015215156040830152606082015260800190565b60405180910390a3505050505050505050505050565b600080600260006125bc876119af565b61ffff168152602080820192909252604090810160002081516101008101835281546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018101546001600160401b038082166060850152600160401b8204166080840152600160801b810465ffffffffffff1660a0840152600160b01b90046001600160501b031660c0830181905260029091015460e083015290915015806126c9575060c08101516001600160501b0316670de0b6b3a76400006126976402540be40086614a60565b6126a1919061494b565b856126b05782602001516126b3565b82515b6001600160701b03166126c69190614911565b11155b95945050505050565b60608060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b815260040160206040518083038186803b15801561272457600080fd5b505afa158015612738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275c9190613cfc565b6001600160a01b03166335b03c176040518163ffffffff1660e01b815260040160206040518083038186803b15801561279457600080fd5b505afa1580156127a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cc9190613cfc565b6001600160a01b031663b81b2b716040518163ffffffff1660e01b815260040160206040518083038186803b15801561280457600080fd5b505afa158015612818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283c9190613f6f565b90506000816001600160401b0381111561285857612858614b06565b6040519080825280602002602001820160405280156128c057816020015b6040805160e0810182526060808252600060208084018290529383018190529082018190526080820181905260a0820181905260c082015282526000199092019101816128765790505b5090506000826001600160401b038111156128dd576128dd614b06565b60405190808252806020026020018201604052801561292f57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816128fb5790505b50905060005b83811015612b35576000818152600360209081526040808320815181546101009481028201850190935260e08101838152909491938593919285929185015b82821015612a25576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e086015292049091166101008301529083529092019101612974565b50505090825250600182015463ffffffff811660208301526001600160401b03640100000000820481166040840152600160601b820416606083015265ffffffffffff600160a01b820481166080840152600160d01b9091041660a082015260029091015460c0909101528351849083908110612aa457612aa4614af0565b602090810291909101810191909152600082815260058252604090819020815160808101835290546001600160481b038082168352600160481b8204811694830194909452600160901b810490931691810191909152600160d81b90910464ffffffffff1660608201528251839083908110612b2257612b22614af0565b6020908102919091010152600101612935565b509094909350915050565b612b48613b4f565b5061ffff16600090815260026020818152604080842060068352938190205481516101008101835285546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018401546001600160401b038082166060850152600160401b820416608084015265ffffffffffff600160801b8204811660a0850152600160b01b9091046001600160501b031660c0840152939092015460e082015292911690565b600061a4b1461480612c14575062066eed46145b15612c905760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c5357600080fd5b505afa158015612c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8b9190613f6f565b905090565b504390565b6001612ca7606083016040840161446a565b65ffffffffffff1610158015612cd557506003612cca606083016040840161446a565b65ffffffffffff1611155b612d125760405162461bcd60e51b815260206004820152600e60248201526d15d493d391d7d1561413d391539560921b6044820152606401610fe7565b600082815260036020526040812090612d2a846119af565b90506000612d36612c00565b9050612d42858261371e565b505061ffff8216612d566020860186614125565b61ffff16146133bc57612d69828261382d565b50612d829050612d7c6020860186614125565b8261382d565b5050600080612d90876110fa565b91509150612da2846001600085613923565b612daf8460008084613923565b612dc8612dbf6020880188614125565b60018085613923565b612de2612dd86020880188614125565b6000600184613923565b6000600281612df460208a018a614125565b61ffff1661ffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201600e9054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160089054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160109054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160169054906101000a90046001600160501b03166001600160501b03166001600160501b0316815260200160028201548152505090506000600260008761ffff1661ffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201600e9054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160089054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160109054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160169054906101000a90046001600160501b03166001600160501b03166001600160501b031681526020016002820154815250509050866000016040518061012001604052808a60000160208101906130f49190614125565b61ffff16815260200161310688613b23565b65ffffffffffff16815260200184606001516001600160401b0316815260200184608001516001600160401b0316815260200183606001516001600160401b0316815260200183608001516001600160401b031681526020018960010160049054906101000a90046001600160401b03166001600160401b0316815260200189600101600c9054906101000a90046001600160401b03166001600160401b0316815260200160006001600160401b0316815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160000160086101000a8154816001600160401b0302191690836001600160401b0316021790555060608201518160000160106101000a8154816001600160401b0302191690836001600160401b0316021790555060808201518160000160186101000a8154816001600160401b0302191690836001600160401b0316021790555060a08201518160010160006101000a8154816001600160401b0302191690836001600160401b0316021790555060c08201518160010160086101000a8154816001600160401b0302191690836001600160401b0316021790555060e08201518160010160106101000a8154816001600160401b0302191690836001600160401b031602179055506101008201518160010160186101000a8154816001600160401b0302191690836001600160401b0316021790555050508760000160208101906133819190614125565b61ffff168661ffff168a7f5beb7d73e1c3cd532d47c9e896931df26d9be450a833bd5fe1ace6bf5690d46860405160405180910390a4505050505b6133cc604085016020860161444f565b60018401805463ffffffff191663ffffffff929092169190911790556133f8606085016040860161446a565b60018401805465ffffffffffff92909216600160d01b026001600160d01b039092169190911790556134306080850160608601614485565b600086815260056020908152604090912080546001600160481b0393909316600160901b0268ffffffffffffffffff60901b199093169290921790915561347990850185614125565b61ffff16857f1caa8de744ea74fb9e0c2f32b7fed3b30ea426105a6b73926010be6372458ef46134af604088016020890161444f565b6134bf6060890160408a0161446a565b6134cf60808a0160608b01614485565b6040805163ffffffff909416845265ffffffffffff90921660208401526001600160481b03169082015260600160405180910390a35050505050565b60008261ffff16116135495760405162461bcd60e51b8152602060048201526007602482015266047524f55505f360cc1b6044820152606401610fe7565b600161355b606083016040840161446a565b65ffffffffffff16101580156135895750600361357e606083016040840161446a565b65ffffffffffff1611155b6135c65760405162461bcd60e51b815260206004820152600e60248201526d15d493d391d7d1561413d391539560921b6044820152606401610fe7565b6135d7826135d2612c00565b61382d565b505061ffff82166000908152600260209081526040909120906135fc9083018361444f565b815463ffffffff91909116600160e01b026001600160e01b0390911617815561362b6040830160208401614485565b6001820180546001600160b01b03166001600160481b0392909216600160b01b02919091179055613662606083016040840161446a565b61ffff84166000818152600660209081526040909120805465ffffffffffff191665ffffffffffff9490941693909317909255907ffe3f382c07994321b091a508fb27d2cec41f6dfa9f52b97a01af5b992fdc1681906136c49085018561444f565b6136d46040860160208701614485565b6136e4606087016040880161446a565b6040805163ffffffff90941684526001600160481b03909216602084015265ffffffffffff169082015260600160405180910390a2505050565b60008061372b848461177f565b5060008681526003602052604090206001810180546001600160401b03808616640100000000026bffffffffffffffff0000000019918616600160601b029190911673ffffffffffffffffffffffffffffffff000000001990921691909117179055919350915061379b84613b23565b60018201805465ffffffffffff92909216600160a01b0265ffffffffffff60a01b199092169190911790819055604080518681526001600160401b03640100000000840481166020830152600160601b9093049092169082015285907ffc346088168e874385f54275cfc143d52a459a0fdc016c1bb6c237097ef27bf4906060015b60405180910390a2509250929050565b60008061383a8484611f65565b5061ffff861660009081526002602052604090206001810180546fffffffffffffffffffffffffffffffff1916600160401b6001600160401b038581169190910267ffffffffffffffff191691909117908516179055919350915061389e84613b23565b60018201805465ffffffffffff92909216600160801b0265ffffffffffff60801b198316811791829055604080518881526001600160401b03928316948316949094176020850152600160401b909204169082015261ffff8616907fd246da22fc6064e2fae4f4affdb9425eac12bebcf4f08fb3892f08480513752e9060600161381d565b61ffff841660008181526002602052604081209115613ab657670de0b6b3a76400006139546402540be40085614a60565b61395e919061494b565b92506001600160701b038311156139875760405162461bcd60e51b8152600401610fe7906147ed565b50818415613a1157836139d45781546001600160701b038083169116116139b85781546001600160701b03166139ba565b805b82546139cf91906001600160701b0316614a7f565b6139ea565b81546139ea9082906001600160701b03166148e6565b82546dffffffffffffffffffffffffffff19166001600160701b0391909116178255613ab6565b83613a6b5781546001600160701b03808316600160701b9092041611613a48578154600160701b90046001600160701b0316613a4a565b805b8254613a669190600160701b90046001600160701b0316614a7f565b613a88565b8154613a88908290600160701b90046001600160701b03166148e6565b82546001600160701b0391909116600160701b026dffffffffffffffffffffffffffff60701b199091161782555b8154604080516001600160701b0380851682528084166020830152600160701b90930490921690820152841515908615159061ffff8916907f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339060600160405180910390a4505050505050565b600065ffffffffffff821115613b4b5760405162461bcd60e51b8152600401610fe7906147ed565b5090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b60008083601f840112613ba557600080fd5b5081356001600160401b03811115613bbc57600080fd5b6020830191508360208260051b8501011115610c2d57600080fd5b8035613be281614b34565b919050565b600060808284031215613bf957600080fd5b604051608081018181106001600160401b0382111715613c1b57613c1b614b06565b604052905080613c2a83613cb1565b8152613c3860208401613cb1565b6020820152613c4960408401613c9b565b604082015260608301356001600160501b0381168114613c6857600080fd5b6060919091015292915050565b803561ffff81168114613be257600080fd5b803563ffffffff81168114613be257600080fd5b803565ffffffffffff81168114613be257600080fd5b80356001600160401b0381168114613be257600080fd5b80356001600160481b0381168114613be257600080fd5b600060208284031215613cf157600080fd5b8135610a0181614b1c565b600060208284031215613d0e57600080fd5b8151610a0181614b1c565b600080600060608486031215613d2e57600080fd5b8335613d3981614b1c565b95602085013595506040909401359392505050565b60008060008060008060c08789031215613d6757600080fd5b8635613d7281614b1c565b95506020870135945060408701359350606087013592506080870135613d9781614b34565b915060a0870135613da781614b34565b809150509295509295509295565b60008060208385031215613dc857600080fd5b82356001600160401b03811115613dde57600080fd5b613dea85828601613b93565b90969095509350505050565b60008060008060408587031215613e0c57600080fd5b84356001600160401b0380821115613e2357600080fd5b613e2f88838901613b93565b90965094506020870135915080821115613e4857600080fd5b818701915087601f830112613e5c57600080fd5b813581811115613e6b57600080fd5b886020606083028501011115613e8057600080fd5b95989497505060200194505050565b60008060008060408587031215613ea557600080fd5b84356001600160401b0380821115613ebc57600080fd5b613ec888838901613b93565b90965094506020870135915080821115613ee157600080fd5b818701915087601f830112613ef557600080fd5b813581811115613f0457600080fd5b8860208260071b8501011115613e8057600080fd5b600060208284031215613f2b57600080fd5b8135610a0181614b34565b60008060408385031215613f4957600080fd5b8235613f5481614b1c565b91506020830135613f6481614b1c565b809150509250929050565b600060208284031215613f8157600080fd5b5051919050565b600060c08284031215613f9a57600080fd5b60405160c081018181106001600160401b0382111715613fbc57613fbc614b06565b6040528235613fca81614b1c565b8082525060208301356020820152604083013560408201526060830135613ff081614b34565b60608201526080838101359082015260a0928301359281019290925250919050565b600060e0828403121561402457600080fd5b50919050565b6000610120828403121561403d57600080fd5b61404561488d565b61404e83613cb1565b815261405c60208401613cb1565b6020820152604083013560408201526060830135606082015261408160808401613c87565b608082015260a083013560a082015260c083013560c08201526140a660e08401613cc8565b60e08201526101006140b9818501613c9b565b908201529392505050565b6000606082840312156140d657600080fd5b604051606081018181106001600160401b03821117156140f8576140f8614b06565b80604052508251815260208301516020820152604083015161411981614b34565b60408201529392505050565b60006020828403121561413757600080fd5b610a0182613c75565b600080828403608081121561415457600080fd5b61415d84613c75565b92506060601f198201121561417157600080fd5b506020830190509250929050565b6000806040838503121561419257600080fd5b61419b83613c75565b946020939093013593505050565b6000806000606084860312156141be57600080fd5b6141c784613c75565b92506020840135915060408401356141de81614b34565b809150509250925092565b6000602082840312156141fb57600080fd5b5035919050565b600080600080600080610120878903121561421c57600080fd5b863595506020808801356001600160401b038082111561423b57600080fd5b818a0191508a601f83011261424f57600080fd5b81358181111561426157614261614b06565b61426f848260051b016148b6565b81815284810192508385016101208302850186018e101561428f57600080fd5b600094505b8285101561435e57610120818f0312156142ad57600080fd5b6142b561488d565b6142be82613c75565b81526142cb878301613c9b565b878201526142db60408301613cb1565b60408201526142ec60608301613cb1565b60608201526142fd60808301613cb1565b608082015261430e60a08301613cb1565b60a082015261431f60c08301613cb1565b60c082015261433060e08301613cb1565b60e08201526143426101008301613cb1565b6101008201528452600194909401939285019261012001614294565b5080995050505050506143748860408901613be7565b935060c0870135925061438960e08801613bd7565b915061010087013590509295509295509295565b6000806000606084860312156143b257600080fd5b8335925060208401356143c481614b34565b929592945050506040919091013590565b60008082840360a08112156143e957600080fd5b833592506080601f198201121561417157600080fd5b6000806040838503121561441257600080fd5b50508035926020909101359150565b60008060006060848603121561443657600080fd5b833592506020840135915060408401356141de81614b34565b60006020828403121561446157600080fd5b610a0182613c87565b60006020828403121561447c57600080fd5b610a0182613c9b565b60006020828403121561449757600080fd5b610a0182613cc8565b6001600160701b038082511683528060208301511660208401525063ffffffff604082015116604083015260608101516001600160401b038082166060850152806080840151166080850152505065ffffffffffff60a08201511660a083015260c081015161451a60c08401826001600160501b03169052565b5060e090810151910152565b805160e08084528151848201819052600092610100916020918201918388019190865b828110156145d9578451805161ffff1685528281015165ffffffffffff16838601526040808201516001600160401b039081169187019190915260608083015182169087015260808083015182169087015260a08083015182169087015260c080830151821690870152888201518116898701529087015116868501529381019361012090930192600101614549565b508781015163ffffffff1690890152506040808701516001600160401b03908116918901919091526060808801519182169089015293506080860151935061462b608088018565ffffffffffff169052565b60a0860151935061464660a088018565ffffffffffff169052565b60c086015160c08801528094505050505092915050565b604080825283519082018190526000906020906060840190828701845b828110156146a15761468d8483516144a0565b61010093909301929084019060010161467a565b5050508381038285015284518082528583019183019060005b818110156146de57835165ffffffffffff16835292840192918401916001016146ba565b5090979650505050505050565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b8381101561474257605f19888703018552614730868351614526565b95509382019390820190600101614714565b50508584038187015286518085528782019482019350915060005b828110156147ba576147a78486516001600160481b038082511683528060208301511660208401528060408301511660408401525064ffffffffff60608201511660608301525050565b938101936080939093019260010161475d565b5091979650505050505050565b6020808252600c908201526b4d414e414745525f4f4e4c5960a01b604082015260600190565b6020808252600890820152674f564552464c4f5760c01b604082015260600190565b610120810161481e82856144a0565b65ffffffffffff83166101008301529392505050565b60a08152600061484760a0830185614526565b9050610a0160208301846001600160481b038082511683528060208301511660208401528060408301511660408401525064ffffffffff60608201511660608301525050565b60405161012081016001600160401b03811182821017156148b0576148b0614b06565b60405290565b604051601f8201601f191681016001600160401b03811182821017156148de576148de614b06565b604052919050565b60006001600160701b0380831681851680830382111561490857614908614ada565b01949350505050565b6000821982111561492457614924614ada565b500190565b60006001600160401b0380831681851680830382111561490857614908614ada565b60008261496857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156149a857816000190482111561498e5761498e614ada565b8085161561499b57918102915b93841c9390800290614972565b509250929050565b6000610a0165ffffffffffff8416836000826149ce57506001611626565b816149db57506000611626565b81600181146149f157600281146149fb57614a17565b6001915050611626565b60ff841115614a0c57614a0c614ada565b50506001821b611626565b5060208310610133831016604e8410600b8410161715614a3a575081810a611626565b614a44838361496d565b8060001904821115614a5857614a58614ada565b029392505050565b6000816000190483118215151615614a7a57614a7a614ada565b500290565b60006001600160701b0383811690831681811015614a9f57614a9f614ada565b039392505050565b600082821015614ab957614ab9614ada565b500390565b60006001600160401b0383811690831681811015614a9f57614a9f5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114614b3157600080fd5b50565b8015158114614b3157600080fdfea2646970667358221220e7076d668c9d44a291c482159b1fe01db09dafbc9209519a24d0bcab02dcfd8864736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806390895ff111610104578063bb219c75116100a2578063d627450511610071578063d6274505146107c1578063e3e98a75146107e4578063f800ece914610823578063ff933fc41461083957600080fd5b8063bb219c75146106f6578063bcb788711461077a578063bdf391cc1461078d578063ce67edfb146107ae57600080fd5b8063b0baf5d4116100de578063b0baf5d4146105e9578063b2c9dd8b146105fc578063b91ac7881461060f578063b94ffa1c146106c657600080fd5b806390895ff11461051a578063930842aa146105c357806393e0e533146105d657600080fd5b8063485cc9551161017c5780637b64112b1161014b5780637b64112b1461042a5780637cbd3c981461043d5780638ee1caa7146104b75780638f694238146104f457600080fd5b8063485cc955146103c75780634c67cfa0146103dc578063651501b514610404578063706faf3a1461041757600080fd5b80631ab5911a116101b85780631ab5911a14610263578063220052021461028e5780632d28a817146102af5780633979324d146102d057600080fd5b80630f8df7e0146101df5780631346b0ff1461021f57806316fff0741461024a575b600080fd5b6101f26101ed366004614202565b61085a565b604080516001600160401b0394851681529390921660208401521515908201526060015b60405180910390f35b600154610232906001600160a01b031681565b6040516001600160a01b039091168152602001610216565b600054610232906201000090046001600160a01b031681565b6102766102713660046141a9565b6109db565b6040516001600160401b039091168152602001610216565b6102a161029c366004613db5565b610a08565b60405161021692919061465d565b6102c26102bd366004613f88565b610c34565b604051908152602001610216565b61035c6102de366004614125565b60026020819052600091825260409091208054600182015491909201546001600160701b0380841693600160701b810490911692600160e01b90910463ffffffff16916001600160401b0380831692600160401b810490911691600160801b820465ffffffffffff1691600160b01b90046001600160501b03169088565b604080516001600160701b03998a16815298909716602089015263ffffffff909516958701959095526001600160401b0392831660608701529116608085015265ffffffffffff1660a08401526001600160501b0390911660c083015260e082015261010001610216565b6103da6103d5366004613f36565b610f4e565b005b6103ef6103ea3660046141e9565b6110fa565b60408051928352602083019190915201610216565b6103da610412366004613e8f565b611215565b6102c2610425366004614012565b61135e565b610276610438366004614421565b61162c565b61045061044b366004613d19565b61163b565b6040805183516001600160401b039081168252602080860151909116818301528483015165ffffffffffff16828401526060948501516001600160501b031694820194909452825160808201529282015160a08401520151151560c082015260e001610216565b6104ca6104c53660046143ff565b61177f565b604080516001600160401b0394851681529284166020840152921691810191909152606001610216565b6105076105023660046141e9565b6119af565b60405161ffff9091168152602001610216565b610582610528366004613d19565b60046020908152600093845260408085208252928452828420905282529020546001600160401b0380821691600160401b810490911690600160801b810465ffffffffffff1690600160b01b90046001600160501b031684565b604080516001600160401b03958616815294909316602085015265ffffffffffff909116918301919091526001600160501b03166060820152608001610216565b6103da6105d1366004614140565b611ad1565b6104ca6105e436600461402a565b611b95565b6103da6105f73660046143d5565b611d56565b6103da61060a366004613df6565b611e16565b61067a61061d3660046141e9565b6003602052600090815260409020600181015460029091015463ffffffff8216916001600160401b036401000000008204811692600160601b83049091169165ffffffffffff600160a01b8204811692600160d01b909204169086565b6040805163ffffffff9790971687526001600160401b039586166020880152939094169285019290925265ffffffffffff908116606085015216608083015260a082015260c001610216565b6102c26106d43660046141e9565b600090815260056020526040902054600160901b90046001600160481b031690565b6107436107043660046141e9565b6005602052600090815260409020546001600160481b0380821691600160481b8104821691600160901b82041690600160d81b900464ffffffffff1684565b604080516001600160481b0395861681529385166020850152919093169082015264ffffffffff9091166060820152608001610216565b6104ca61078836600461417f565b611f65565b6107a061079b3660046141e9565b612104565b604051610216929190614834565b6103da6107bc366004613d4e565b612321565b6107d46107cf36600461439d565b6125ac565b6040519015158152602001610216565b61080c6107f23660046141e9565b60066020526000908152604090205465ffffffffffff1681565b60405165ffffffffffff9091168152602001610216565b61082b6126d2565b6040516102169291906146eb565b61084c610847366004614125565b612b40565b60405161021692919061480f565b600080600080888a8151811061087257610872614af0565b60200260200101519050876040015165ffffffffffff16816020015165ffffffffffff16109150600189516108a79190614aa7565b8a14156108cf5780516108bb9086886109db565b93506108c887868861162c565b925061095f565b6000896108dd8c6001614911565b815181106108ed576108ed614af0565b6020026020010151905082801561091c5750886040015165ffffffffffff16816020015165ffffffffffff1611155b1561092f576000809450945050506109cf565b8661093e578060a00151610944565b80608001515b945086610955578060e0015161095b565b8060c001515b9350505b811561098a5760208801516109749085614abe565b88519094506109839084614abe565b92506109cd565b8561099957806060015161099f565b80604001515b6109a99085614abe565b9350856109ba578060e001516109c0565b8060c001515b6109ca9084614abe565b92505b505b96509650969350505050565b60008060006109ea8686611f65565b5091509150836109fa57806109fc565b815b925050505b9392505050565b6060806000836001600160401b03811115610a2557610a25614b06565b604051908082528060200260200182016040528015610a5e57816020015b610a4b613b4f565b815260200190600190039081610a435790505b5090506000846001600160401b03811115610a7b57610a7b614b06565b604051908082528060200260200182016040528015610aa4578160200160208202803683370190505b5090508460005b81811015610c255760026000898984818110610ac957610ac9614af0565b9050602002016020810190610ade9190614125565b61ffff168152602080820192909252604090810160002081516101008101835281546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018101546001600160401b038082166060850152600160401b8204166080840152600160801b810465ffffffffffff1660a0840152600160b01b90046001600160501b031660c08301526002015460e08201528451859083908110610b9957610b99614af0565b602002602001018190525060066000898984818110610bba57610bba614af0565b9050602002016020810190610bcf9190614125565b61ffff16815260200190815260200160002060009054906101000a900465ffffffffffff16838281518110610c0657610c06614af0565b65ffffffffffff90921660209283029190910190910152600101610aab565b509193509150505b9250929050565b80516001600160a01b03166000908152600460209081526040808320828501805185529083528184208286015185528352818420825160808101845290546001600160401b038082168352600160401b82041682860152600160801b810465ffffffffffff1682850152600160b01b90046001600160501b0316606082015290518452600383528184208054835181860281018601909452808452919385939290849084015b82821015610d8b576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e086015292049091166101008301529083529092019101610cda565b5050505090506000610d9b612c00565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152909150825115610e0c5782600081518110610e0157610e01614af0565b602002602001015190505b82511580610e315750836040015165ffffffffffff16816020015165ffffffffffff16115b15610e85578351835115610e5c578660600151610e52578160e00151610e6f565b8160c00151610e6f565b610e6f876020015184896060015161162c565b610e799190614abe565b6001600160401b031694505b82515b8015610f085760008080610eb2610ea0600186614aa7565b888a8d602001518e606001518b61085a565b925092509250816001600160401b0316836001600160401b031611610ed75781610ed9565b825b610eec906001600160401b03168a614911565b98508015610efc57505050610f08565b50505060001901610e88565b5060646402540be400868860a001518960800151610f269190614a60565b610f309190614a60565b610f3a919061494b565b610f44919061494b565b9695505050505050565b600054610100900460ff1615808015610f6e5750600054600160ff909116105b80610f885750303b158015610f88575060005460ff166001145b610ff05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015611013576000805461ff0019166101001790555b6001600160a01b0383161580159061103357506001600160a01b03821615155b61106e5760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b6044820152606401610fe7565b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b03191691841691909117905580156110f5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600080546040516328daca2160e01b8152600481018490526024810183905282916201000090046001600160a01b0316906328daca219060440160206040518083038186803b15801561114c57600080fd5b505afa158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190613f6f565b6000546040516328daca2160e01b81526004810186905260016024820152620100009091046001600160a01b0316906328daca219060440160206040518083038186803b1580156111d457600080fd5b505afa1580156111e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120c9190613f6f565b91509150915091565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561126357600080fd5b505afa158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b9190613cfc565b6001600160a01b0316336001600160a01b0316146112cb5760405162461bcd60e51b8152600401610fe7906147c7565b8281811461130a5760405162461bcd60e51b815260206004820152600c60248201526b0aea49e9c8ebe988a9c8ea8960a31b6044820152606401610fe7565b60005b818110156113565761134e86868381811061132a5761132a614af0565b9050602002013585858481811061134357611343614af0565b905060800201612c95565b60010161130d565b505050505050565b6001546000906001600160a01b0316636bcbe860606084013561138760a0860160808701613f19565b8560a001358660c001356114026040518060c001604052808a60000160208101906113b29190613cdf565b6001600160a01b0316815260208b810135908201526040808c0135908201526060016113e460a08c0160808d01613f19565b151581526020018a60a0013581526020018a60c00135815250610c34565b6001546001600160a01b03166358f796bc61142060208c018c613cdf565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015260208d013560248301528c0135604482015260a08c0135606482015260840160206040518083038186803b15801561147c57600080fd5b505afa158015611490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b49190613f6f565b6114be9190614911565b6001546001600160a01b031663f6c50efe6114dc60208c018c613cdf565b8b602001358c604001358d60800160208101906114f99190613f19565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301521515606482015260a08c0135608482015260c08c013560a482015260c40160206040518083038186803b15801561156057600080fd5b505afa158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190613f6f565b6040516001600160e01b031960e089901b1681526004810196909652931515602486015260448501929092526064840152608483015260a482015260c40160206040518083038186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190613f6f565b92915050565b60008060006109ea868661177f565b604080516080810182526000808252602080830182905282840182905260608084018390528451908101855282815290810182905292830152906001600160a01b0385811660008181526004602081815260408084208a85528252808420898552825292839020835160808101855290546001600160401b038082168352600160401b82041692820192909252600160801b820465ffffffffffff1681850152600160b01b9091046001600160501b031660608201526001549251632f6ac02760e11b815291820193909352602481018890526044810187905291945090911690635ed5804e9060640160606040518083038186803b15801561173d57600080fd5b505afa158015611751573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177591906140c4565b9050935093915050565b6000828152600360209081526040808320815181546101009481028201850190935260e0810183815285948594859492849290918491879085015b8282101561186b576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e0860152920490911661010083015290835290920191016117ba565b50505090825250600182015463ffffffff811660208301526001600160401b03640100000000820481166040840152600160601b820416606083015265ffffffffffff600160a01b820481166080840152600160d01b9091041660a082015260029091015460c09091015290506000806118e4886110fa565b9150915061199e60405180610120016040528085604001516001600160401b0316815260200185606001516001600160401b03168152602001848152602001838152602001856020015163ffffffff168152602001898152602001856080015165ffffffffffff168152602001600560008c815260200190815260200160002060000160129054906101000a90046001600160481b03166001600160481b031681526020018560a0015165ffffffffffff16815250611b95565b919a90995090975095505050505050565b600081815260036020908152604080832080548251818502810185019093528083528493849084015b82821015611a89576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e0860152920490911661010083015290835290920191016119d8565b5050505090508051600014611ac8578060018251611aa79190614aa7565b81518110611ab757611ab7614af0565b602002602001015160000151610a01565b60009392505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015611b1f57600080fd5b505afa158015611b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b579190613cfc565b6001600160a01b0316336001600160a01b031614611b875760405162461bcd60e51b8152600401610fe7906147c7565b611b91828261350b565b5050565b60008060008360c001518460a001511015611be05760405162461bcd60e51b815260206004820152600b60248201526a212627a1a5afa7a92222a960a91b6044820152606401610fe7565b6060840151604085015110600081611c0b5785606001518660400151611c069190614aa7565b611c1f565b85604001518660600151611c1f9190614aa7565b90506000808760e001516001600160481b0316118015611c4c5750600087610100015165ffffffffffff16115b611c57576000611ce3565b610100870151611c6f90670de0b6b3a76400006149b0565b61010088015160e08901516001600160481b0316611c92856402540be400614a60565b611c9c919061494b565b611ca691906149b0565b886080015163ffffffff168960c001518a60a00151611cc59190614aa7565b611ccf9190614a60565b611cd99190614a60565b611ce3919061494b565b90506001600160401b03811115611d0c5760405162461bcd60e51b8152600401610fe7906147ed565b80935082611d26578651611d21908590614929565b611d29565b86515b955082611d3a578660200151611d4a565b838760200151611d4a9190614929565b94505050509193909250565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015611da457600080fd5b505afa158015611db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddc9190613cfc565b6001600160a01b0316336001600160a01b031614611e0c5760405162461bcd60e51b8152600401610fe7906147c7565b611b918282612c95565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015611e6457600080fd5b505afa158015611e78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9c9190613cfc565b6001600160a01b0316336001600160a01b031614611ecc5760405162461bcd60e51b8152600401610fe7906147c7565b82818114611f0b5760405162461bcd60e51b815260206004820152600c60248201526b0aea49e9c8ebe988a9c8ea8960a31b6044820152606401610fe7565b60005b8181101561135657611f5d868683818110611f2b57611f2b614af0565b9050602002016020810190611f409190614125565b858584818110611f5257611f52614af0565b90506060020161350b565b600101611f0e565b61ffff8216600090815260026020818152604080842081516101008101835281546001600160701b038082168352600160701b8204811683870152600160e01b90910463ffffffff168285015260018301546001600160401b0380821660608501908152600160401b8304821660808601908152600160801b840465ffffffffffff1660a0870152600160b01b9093046001600160501b031660c0860152949097015460e08401528451610120810186529351871684525190951693820193909352825185948594936120f59392908301916402540be400916120519116670de0b6b3a7640000614a60565b61205b919061494b565b81526020016402540be40084602001516001600160701b0316670de0b6b3a76400006120879190614a60565b612091919061494b565b815260408085015163ffffffff166020808401919091528183018a905260a08087015165ffffffffffff908116606086015260c08801516001600160481b0316608086015261ffff8d16600090815260069093529290912054909116910152611b95565b91989097509095509350505050565b6040805160e08082018352606080835260006020808501829052848601829052828501829052608080860183905260a0860183905260c0860183905286519081018752828152808201839052808701839052928301829052868252600381528582206005825286832087518254938402810161010090810190995295860183815296979496919590949093869385939285929085015b8282101561224b576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e08601529204909116610100830152908352909201910161219a565b50505090825250600182015463ffffffff811660208084019190915264010000000082046001600160401b03908116604080860191909152600160601b8404909116606080860191909152600160a01b840465ffffffffffff908116608080880191909152600160d01b9095041660a086015260029095015460c0909401939093528251918201835294546001600160481b038082168352600160481b8204811696830196909652600160901b810490951691810191909152600160d81b90930464ffffffffff16908301529590945092505050565b600061232c866119af565b90506000612338612c00565b9050600080612347898461371e565b91509150600080612358868661382d565b9150915061236886888a8c613923565b871561253e5760006040518060800160405280896123865785612388565b865b6001600160401b03168152602001896123a157836123a3565b845b6001600160401b031681526020016123ba88613b23565b65ffffffffffff16815260200160006001600160501b0316815250905080600460008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060008d815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a8154816001600160401b0302191690836001600160401b0316021790555060408201518160000160106101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160166101000a8154816001600160501b0302191690836001600160501b031602179055509050508b8d6001600160a01b03167faa00ca5c6f282cb9f35953ecb0eaf8e39c95b7c8df114efac12162a85c085e608d84600001518560200151604051612534939291909283526001600160401b03918216602084015216604082015260600190565b60405180910390a3505b8a8c6001600160a01b03167f66baa1848f5d4d14567e9bc527e5608778c86e512490d413cfafc9250327308f8c8b8b8e6040516125969493929190938452911515602084015215156040830152606082015260800190565b60405180910390a3505050505050505050505050565b600080600260006125bc876119af565b61ffff168152602080820192909252604090810160002081516101008101835281546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018101546001600160401b038082166060850152600160401b8204166080840152600160801b810465ffffffffffff1660a0840152600160b01b90046001600160501b031660c0830181905260029091015460e083015290915015806126c9575060c08101516001600160501b0316670de0b6b3a76400006126976402540be40086614a60565b6126a1919061494b565b856126b05782602001516126b3565b82515b6001600160701b03166126c69190614911565b11155b95945050505050565b60608060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b815260040160206040518083038186803b15801561272457600080fd5b505afa158015612738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275c9190613cfc565b6001600160a01b03166335b03c176040518163ffffffff1660e01b815260040160206040518083038186803b15801561279457600080fd5b505afa1580156127a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127cc9190613cfc565b6001600160a01b031663b81b2b716040518163ffffffff1660e01b815260040160206040518083038186803b15801561280457600080fd5b505afa158015612818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283c9190613f6f565b90506000816001600160401b0381111561285857612858614b06565b6040519080825280602002602001820160405280156128c057816020015b6040805160e0810182526060808252600060208084018290529383018190529082018190526080820181905260a0820181905260c082015282526000199092019101816128765790505b5090506000826001600160401b038111156128dd576128dd614b06565b60405190808252806020026020018201604052801561292f57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816128fb5790505b50905060005b83811015612b35576000818152600360209081526040808320815181546101009481028201850190935260e08101838152909491938593919285929185015b82821015612a25576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e086015292049091166101008301529083529092019101612974565b50505090825250600182015463ffffffff811660208301526001600160401b03640100000000820481166040840152600160601b820416606083015265ffffffffffff600160a01b820481166080840152600160d01b9091041660a082015260029091015460c0909101528351849083908110612aa457612aa4614af0565b602090810291909101810191909152600082815260058252604090819020815160808101835290546001600160481b038082168352600160481b8204811694830194909452600160901b810490931691810191909152600160d81b90910464ffffffffff1660608201528251839083908110612b2257612b22614af0565b6020908102919091010152600101612935565b509094909350915050565b612b48613b4f565b5061ffff16600090815260026020818152604080842060068352938190205481516101008101835285546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018401546001600160401b038082166060850152600160401b820416608084015265ffffffffffff600160801b8204811660a0850152600160b01b9091046001600160501b031660c0840152939092015460e082015292911690565b600061a4b1461480612c14575062066eed46145b15612c905760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c5357600080fd5b505afa158015612c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8b9190613f6f565b905090565b504390565b6001612ca7606083016040840161446a565b65ffffffffffff1610158015612cd557506003612cca606083016040840161446a565b65ffffffffffff1611155b612d125760405162461bcd60e51b815260206004820152600e60248201526d15d493d391d7d1561413d391539560921b6044820152606401610fe7565b600082815260036020526040812090612d2a846119af565b90506000612d36612c00565b9050612d42858261371e565b505061ffff8216612d566020860186614125565b61ffff16146133bc57612d69828261382d565b50612d829050612d7c6020860186614125565b8261382d565b5050600080612d90876110fa565b91509150612da2846001600085613923565b612daf8460008084613923565b612dc8612dbf6020880188614125565b60018085613923565b612de2612dd86020880188614125565b6000600184613923565b6000600281612df460208a018a614125565b61ffff1661ffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201600e9054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160089054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160109054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160169054906101000a90046001600160501b03166001600160501b03166001600160501b0316815260200160028201548152505090506000600260008761ffff1661ffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201600e9054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160089054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160109054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160169054906101000a90046001600160501b03166001600160501b03166001600160501b031681526020016002820154815250509050866000016040518061012001604052808a60000160208101906130f49190614125565b61ffff16815260200161310688613b23565b65ffffffffffff16815260200184606001516001600160401b0316815260200184608001516001600160401b0316815260200183606001516001600160401b0316815260200183608001516001600160401b031681526020018960010160049054906101000a90046001600160401b03166001600160401b0316815260200189600101600c9054906101000a90046001600160401b03166001600160401b0316815260200160006001600160401b0316815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160000160086101000a8154816001600160401b0302191690836001600160401b0316021790555060608201518160000160106101000a8154816001600160401b0302191690836001600160401b0316021790555060808201518160000160186101000a8154816001600160401b0302191690836001600160401b0316021790555060a08201518160010160006101000a8154816001600160401b0302191690836001600160401b0316021790555060c08201518160010160086101000a8154816001600160401b0302191690836001600160401b0316021790555060e08201518160010160106101000a8154816001600160401b0302191690836001600160401b031602179055506101008201518160010160186101000a8154816001600160401b0302191690836001600160401b0316021790555050508760000160208101906133819190614125565b61ffff168661ffff168a7f5beb7d73e1c3cd532d47c9e896931df26d9be450a833bd5fe1ace6bf5690d46860405160405180910390a4505050505b6133cc604085016020860161444f565b60018401805463ffffffff191663ffffffff929092169190911790556133f8606085016040860161446a565b60018401805465ffffffffffff92909216600160d01b026001600160d01b039092169190911790556134306080850160608601614485565b600086815260056020908152604090912080546001600160481b0393909316600160901b0268ffffffffffffffffff60901b199093169290921790915561347990850185614125565b61ffff16857f1caa8de744ea74fb9e0c2f32b7fed3b30ea426105a6b73926010be6372458ef46134af604088016020890161444f565b6134bf6060890160408a0161446a565b6134cf60808a0160608b01614485565b6040805163ffffffff909416845265ffffffffffff90921660208401526001600160481b03169082015260600160405180910390a35050505050565b60008261ffff16116135495760405162461bcd60e51b8152602060048201526007602482015266047524f55505f360cc1b6044820152606401610fe7565b600161355b606083016040840161446a565b65ffffffffffff16101580156135895750600361357e606083016040840161446a565b65ffffffffffff1611155b6135c65760405162461bcd60e51b815260206004820152600e60248201526d15d493d391d7d1561413d391539560921b6044820152606401610fe7565b6135d7826135d2612c00565b61382d565b505061ffff82166000908152600260209081526040909120906135fc9083018361444f565b815463ffffffff91909116600160e01b026001600160e01b0390911617815561362b6040830160208401614485565b6001820180546001600160b01b03166001600160481b0392909216600160b01b02919091179055613662606083016040840161446a565b61ffff84166000818152600660209081526040909120805465ffffffffffff191665ffffffffffff9490941693909317909255907ffe3f382c07994321b091a508fb27d2cec41f6dfa9f52b97a01af5b992fdc1681906136c49085018561444f565b6136d46040860160208701614485565b6136e4606087016040880161446a565b6040805163ffffffff90941684526001600160481b03909216602084015265ffffffffffff169082015260600160405180910390a2505050565b60008061372b848461177f565b5060008681526003602052604090206001810180546001600160401b03808616640100000000026bffffffffffffffff0000000019918616600160601b029190911673ffffffffffffffffffffffffffffffff000000001990921691909117179055919350915061379b84613b23565b60018201805465ffffffffffff92909216600160a01b0265ffffffffffff60a01b199092169190911790819055604080518681526001600160401b03640100000000840481166020830152600160601b9093049092169082015285907ffc346088168e874385f54275cfc143d52a459a0fdc016c1bb6c237097ef27bf4906060015b60405180910390a2509250929050565b60008061383a8484611f65565b5061ffff861660009081526002602052604090206001810180546fffffffffffffffffffffffffffffffff1916600160401b6001600160401b038581169190910267ffffffffffffffff191691909117908516179055919350915061389e84613b23565b60018201805465ffffffffffff92909216600160801b0265ffffffffffff60801b198316811791829055604080518881526001600160401b03928316948316949094176020850152600160401b909204169082015261ffff8616907fd246da22fc6064e2fae4f4affdb9425eac12bebcf4f08fb3892f08480513752e9060600161381d565b61ffff841660008181526002602052604081209115613ab657670de0b6b3a76400006139546402540be40085614a60565b61395e919061494b565b92506001600160701b038311156139875760405162461bcd60e51b8152600401610fe7906147ed565b50818415613a1157836139d45781546001600160701b038083169116116139b85781546001600160701b03166139ba565b805b82546139cf91906001600160701b0316614a7f565b6139ea565b81546139ea9082906001600160701b03166148e6565b82546dffffffffffffffffffffffffffff19166001600160701b0391909116178255613ab6565b83613a6b5781546001600160701b03808316600160701b9092041611613a48578154600160701b90046001600160701b0316613a4a565b805b8254613a669190600160701b90046001600160701b0316614a7f565b613a88565b8154613a88908290600160701b90046001600160701b03166148e6565b82546001600160701b0391909116600160701b026dffffffffffffffffffffffffffff60701b199091161782555b8154604080516001600160701b0380851682528084166020830152600160701b90930490921690820152841515908615159061ffff8916907f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339060600160405180910390a4505050505050565b600065ffffffffffff821115613b4b5760405162461bcd60e51b8152600401610fe7906147ed565b5090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b60008083601f840112613ba557600080fd5b5081356001600160401b03811115613bbc57600080fd5b6020830191508360208260051b8501011115610c2d57600080fd5b8035613be281614b34565b919050565b600060808284031215613bf957600080fd5b604051608081018181106001600160401b0382111715613c1b57613c1b614b06565b604052905080613c2a83613cb1565b8152613c3860208401613cb1565b6020820152613c4960408401613c9b565b604082015260608301356001600160501b0381168114613c6857600080fd5b6060919091015292915050565b803561ffff81168114613be257600080fd5b803563ffffffff81168114613be257600080fd5b803565ffffffffffff81168114613be257600080fd5b80356001600160401b0381168114613be257600080fd5b80356001600160481b0381168114613be257600080fd5b600060208284031215613cf157600080fd5b8135610a0181614b1c565b600060208284031215613d0e57600080fd5b8151610a0181614b1c565b600080600060608486031215613d2e57600080fd5b8335613d3981614b1c565b95602085013595506040909401359392505050565b60008060008060008060c08789031215613d6757600080fd5b8635613d7281614b1c565b95506020870135945060408701359350606087013592506080870135613d9781614b34565b915060a0870135613da781614b34565b809150509295509295509295565b60008060208385031215613dc857600080fd5b82356001600160401b03811115613dde57600080fd5b613dea85828601613b93565b90969095509350505050565b60008060008060408587031215613e0c57600080fd5b84356001600160401b0380821115613e2357600080fd5b613e2f88838901613b93565b90965094506020870135915080821115613e4857600080fd5b818701915087601f830112613e5c57600080fd5b813581811115613e6b57600080fd5b886020606083028501011115613e8057600080fd5b95989497505060200194505050565b60008060008060408587031215613ea557600080fd5b84356001600160401b0380821115613ebc57600080fd5b613ec888838901613b93565b90965094506020870135915080821115613ee157600080fd5b818701915087601f830112613ef557600080fd5b813581811115613f0457600080fd5b8860208260071b8501011115613e8057600080fd5b600060208284031215613f2b57600080fd5b8135610a0181614b34565b60008060408385031215613f4957600080fd5b8235613f5481614b1c565b91506020830135613f6481614b1c565b809150509250929050565b600060208284031215613f8157600080fd5b5051919050565b600060c08284031215613f9a57600080fd5b60405160c081018181106001600160401b0382111715613fbc57613fbc614b06565b6040528235613fca81614b1c565b8082525060208301356020820152604083013560408201526060830135613ff081614b34565b60608201526080838101359082015260a0928301359281019290925250919050565b600060e0828403121561402457600080fd5b50919050565b6000610120828403121561403d57600080fd5b61404561488d565b61404e83613cb1565b815261405c60208401613cb1565b6020820152604083013560408201526060830135606082015261408160808401613c87565b608082015260a083013560a082015260c083013560c08201526140a660e08401613cc8565b60e08201526101006140b9818501613c9b565b908201529392505050565b6000606082840312156140d657600080fd5b604051606081018181106001600160401b03821117156140f8576140f8614b06565b80604052508251815260208301516020820152604083015161411981614b34565b60408201529392505050565b60006020828403121561413757600080fd5b610a0182613c75565b600080828403608081121561415457600080fd5b61415d84613c75565b92506060601f198201121561417157600080fd5b506020830190509250929050565b6000806040838503121561419257600080fd5b61419b83613c75565b946020939093013593505050565b6000806000606084860312156141be57600080fd5b6141c784613c75565b92506020840135915060408401356141de81614b34565b809150509250925092565b6000602082840312156141fb57600080fd5b5035919050565b600080600080600080610120878903121561421c57600080fd5b863595506020808801356001600160401b038082111561423b57600080fd5b818a0191508a601f83011261424f57600080fd5b81358181111561426157614261614b06565b61426f848260051b016148b6565b81815284810192508385016101208302850186018e101561428f57600080fd5b600094505b8285101561435e57610120818f0312156142ad57600080fd5b6142b561488d565b6142be82613c75565b81526142cb878301613c9b565b878201526142db60408301613cb1565b60408201526142ec60608301613cb1565b60608201526142fd60808301613cb1565b608082015261430e60a08301613cb1565b60a082015261431f60c08301613cb1565b60c082015261433060e08301613cb1565b60e08201526143426101008301613cb1565b6101008201528452600194909401939285019261012001614294565b5080995050505050506143748860408901613be7565b935060c0870135925061438960e08801613bd7565b915061010087013590509295509295509295565b6000806000606084860312156143b257600080fd5b8335925060208401356143c481614b34565b929592945050506040919091013590565b60008082840360a08112156143e957600080fd5b833592506080601f198201121561417157600080fd5b6000806040838503121561441257600080fd5b50508035926020909101359150565b60008060006060848603121561443657600080fd5b833592506020840135915060408401356141de81614b34565b60006020828403121561446157600080fd5b610a0182613c87565b60006020828403121561447c57600080fd5b610a0182613c9b565b60006020828403121561449757600080fd5b610a0182613cc8565b6001600160701b038082511683528060208301511660208401525063ffffffff604082015116604083015260608101516001600160401b038082166060850152806080840151166080850152505065ffffffffffff60a08201511660a083015260c081015161451a60c08401826001600160501b03169052565b5060e090810151910152565b805160e08084528151848201819052600092610100916020918201918388019190865b828110156145d9578451805161ffff1685528281015165ffffffffffff16838601526040808201516001600160401b039081169187019190915260608083015182169087015260808083015182169087015260a08083015182169087015260c080830151821690870152888201518116898701529087015116868501529381019361012090930192600101614549565b508781015163ffffffff1690890152506040808701516001600160401b03908116918901919091526060808801519182169089015293506080860151935061462b608088018565ffffffffffff169052565b60a0860151935061464660a088018565ffffffffffff169052565b60c086015160c08801528094505050505092915050565b604080825283519082018190526000906020906060840190828701845b828110156146a15761468d8483516144a0565b61010093909301929084019060010161467a565b5050508381038285015284518082528583019183019060005b818110156146de57835165ffffffffffff16835292840192918401916001016146ba565b5090979650505050505050565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b8381101561474257605f19888703018552614730868351614526565b95509382019390820190600101614714565b50508584038187015286518085528782019482019350915060005b828110156147ba576147a78486516001600160481b038082511683528060208301511660208401528060408301511660408401525064ffffffffff60608201511660608301525050565b938101936080939093019260010161475d565b5091979650505050505050565b6020808252600c908201526b4d414e414745525f4f4e4c5960a01b604082015260600190565b6020808252600890820152674f564552464c4f5760c01b604082015260600190565b610120810161481e82856144a0565b65ffffffffffff83166101008301529392505050565b60a08152600061484760a0830185614526565b9050610a0160208301846001600160481b038082511683528060208301511660208401528060408301511660408401525064ffffffffff60608201511660608301525050565b60405161012081016001600160401b03811182821017156148b0576148b0614b06565b60405290565b604051601f8201601f191681016001600160401b03811182821017156148de576148de614b06565b604052919050565b60006001600160701b0380831681851680830382111561490857614908614ada565b01949350505050565b6000821982111561492457614924614ada565b500190565b60006001600160401b0380831681851680830382111561490857614908614ada565b60008261496857634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156149a857816000190482111561498e5761498e614ada565b8085161561499b57918102915b93841c9390800290614972565b509250929050565b6000610a0165ffffffffffff8416836000826149ce57506001611626565b816149db57506000611626565b81600181146149f157600281146149fb57614a17565b6001915050611626565b60ff841115614a0c57614a0c614ada565b50506001821b611626565b5060208310610133831016604e8410600b8410161715614a3a575081810a611626565b614a44838361496d565b8060001904821115614a5857614a58614ada565b029392505050565b6000816000190483118215151615614a7a57614a7a614ada565b500290565b60006001600160701b0383811690831681811015614a9f57614a9f614ada565b039392505050565b600082821015614ab957614ab9614ada565b500390565b60006001600160401b0383811690831681811015614a9f57614a9f5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114614b3157600080fd5b50565b8015158114614b3157600080fdfea2646970667358221220e7076d668c9d44a291c482159b1fe01db09dafbc9209519a24d0bcab02dcfd8864736f6c63430008070033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3622,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3625,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 19,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterfaceV5)3190"
      },
      {
        "astId": 22,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "pairInfos",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GNSPairInfosInterfaceV6)2295"
      },
      {
        "astId": 27,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "groups",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_struct(Group)1938_storage)"
      },
      {
        "astId": 32,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "pairs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Pair)1912_storage)"
      },
      {
        "astId": 41,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "initialAccFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)1947_storage)))"
      },
      {
        "astId": 46,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "pairOis",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(PairOi)1921_storage)"
      },
      {
        "astId": 50,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "groupFeeExponents",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint48)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PairGroup)1895_storage)dyn_storage": {
        "base": "t_struct(PairGroup)1895_storage",
        "encoding": "dynamic_array",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GNSPairInfosInterfaceV6)2295": {
        "encoding": "inplace",
        "label": "contract GNSPairInfosInterfaceV6",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterfaceV5)3190": {
        "encoding": "inplace",
        "label": "contract StorageInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)1947_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)1947_storage))"
      },
      "t_mapping(t_uint16,t_struct(Group)1938_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct GNSBorrowingFeesInterfaceV6_4.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)1938_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)1947_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InitialAccFees)1947_storage)"
      },
      "t_mapping(t_uint256,t_struct(InitialAccFees)1947_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees)",
        "numberOfBytes": "32",
        "value": "t_struct(InitialAccFees)1947_storage"
      },
      "t_mapping(t_uint256,t_struct(Pair)1912_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.Pair)",
        "numberOfBytes": "32",
        "value": "t_struct(Pair)1912_storage"
      },
      "t_mapping(t_uint256,t_struct(PairOi)1921_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.PairOi)",
        "numberOfBytes": "32",
        "value": "t_struct(PairOi)1921_storage"
      },
      "t_mapping(t_uint256,t_uint48)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint48)",
        "numberOfBytes": "32",
        "value": "t_uint48"
      },
      "t_struct(Group)1938_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.Group",
        "members": [
          {
            "astId": 1923,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "oiLong",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 1925,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "oiShort",
            "offset": 14,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 1927,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "feePerBlock",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1929,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeLong",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1931,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeShort",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1933,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accLastUpdatedBlock",
            "offset": 16,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 1935,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "maxOi",
            "offset": 22,
            "slot": "1",
            "type": "t_uint80"
          },
          {
            "astId": 1937,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "lastAccBlockWeightedMarketCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(InitialAccFees)1947_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees",
        "members": [
          {
            "astId": 1940,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accPairFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1942,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accGroupFee",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1944,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "block",
            "offset": 16,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1946,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "_placeholder",
            "offset": 22,
            "slot": "0",
            "type": "t_uint80"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Pair)1912_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.Pair",
        "members": [
          {
            "astId": 1899,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "groups",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(PairGroup)1895_storage)dyn_storage"
          },
          {
            "astId": 1901,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "feePerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 1903,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeLong",
            "offset": 4,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1905,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeShort",
            "offset": 12,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1907,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accLastUpdatedBlock",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 1909,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "feeExponent",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 1911,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "lastAccBlockWeightedMarketCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PairGroup)1895_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup",
        "members": [
          {
            "astId": 1878,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "groupIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1880,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "block",
            "offset": 2,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 1882,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "initialAccFeeLong",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1884,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "initialAccFeeShort",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1886,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "prevGroupAccFeeLong",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1888,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "prevGroupAccFeeShort",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1890,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "pairAccFeeLong",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1892,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "pairAccFeeShort",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1894,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "_placeholder",
            "offset": 24,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PairOi)1921_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.PairOi",
        "members": [
          {
            "astId": 1914,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "long",
            "offset": 0,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 1916,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "short",
            "offset": 9,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 1918,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "max",
            "offset": 18,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 1920,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "_placeholder",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint72": {
        "encoding": "inplace",
        "label": "uint72",
        "numberOfBytes": "9"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}