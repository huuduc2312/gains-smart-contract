{
  "address": "0x01CeBc41CA749fD0063F25c007bF3F13818ad585",
  "abi": [
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongParams",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeValueDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeValueDai",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiVaultFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "ClosingFeeSharesPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "DaiVaultFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "distributed",
          "type": "bool"
        }
      ],
      "name": "GovFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "GovFeesClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limitIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterfaceV5.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiSentToTrader",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "exactExecution",
          "type": "bool"
        }
      ],
      "name": "LimitExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4_1.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketCloseCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daiSentToTrader",
          "type": "uint256"
        }
      ],
      "name": "MarketExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4_1.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketOpenCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterfaceV5.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4_1.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "NftOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "PairMaxLeverageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "ReferralFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "SssFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueDai",
          "type": "uint256"
        }
      ],
      "name": "TriggerFeeCharged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canExecuteTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "closeTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiVaultFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftCloseOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftOpenOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPairsMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govFeesDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract GNSStakingInterfaceV6_4_1",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultToApprove",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_daiVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "_borrowingFees",
          "type": "address"
        }
      ],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GNSStakingInterfaceV6_4_1",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "_oracleRewards",
          "type": "address"
        }
      ],
      "name": "initializeV4",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "openTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daiVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "setClosingFeeSharesP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "setPairMaxLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "setPairMaxLeverageArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "maxSlippageP",
              "type": "uint40"
            },
            {
              "internalType": "uint216",
              "name": "_placeholder",
              "type": "uint216"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.TradeData",
          "name": "_tradeData",
          "type": "tuple"
        }
      ],
      "name": "setTradeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sl",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "created",
              "type": "uint32"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4_1.LastUpdated",
          "name": "_lastUpdated",
          "type": "tuple"
        }
      ],
      "name": "setTradeLastUpdated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sssFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract GNSStakingInterfaceV6_4_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeData",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "maxSlippageP",
          "type": "uint40"
        },
        {
          "internalType": "uint216",
          "name": "_placeholder",
          "type": "uint216"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum GNSTradingCallbacksV6_4_1.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeLastUpdated",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "sl",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "created",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a0a5b34add064e79a487c9cbb8838ee70da499f1b8e808e2b1aa1dd3ab47692",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0x01CeBc41CA749fD0063F25c007bF3F13818ad585",
    "transactionIndex": 0,
    "gasUsed": "5212486",
    "logsBloom": "0x
    "blockHash": "0x5bf9a76cacd6ade50f077bea428df3ed0dbef10d6b69af93556c83055ad2068e",
    "transactionHash": "0x4a0a5b34add064e79a487c9cbb8838ee70da499f1b8e808e2b1aa1dd3ab47692",
    "logs": [],
    "blockNumber": 36,
    "cumulativeGasUsed": "5212486",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fb75f1cdcd9c5ec1bc76c5298727b3d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeValueDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValueDai\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiVaultFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sssFeeP\",\"type\":\"uint256\"}],\"name\":\"ClosingFeeSharesPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"DaiVaultFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"distributed\",\"type\":\"bool\"}],\"name\":\"GovFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"GovFeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiSentToTrader\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exactExecution\",\"type\":\"bool\"}],\"name\":\"LimitExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4_1.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketCloseCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daiSentToTrader\",\"type\":\"uint256\"}],\"name\":\"MarketExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4_1.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketOpenCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4_1.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"NftOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"PairMaxLeverageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"ReferralFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"SssFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueDai\",\"type\":\"uint256\"}],\"name\":\"TriggerFeeCharged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canExecuteTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"closeTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiVaultFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftCloseOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftOpenOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairsMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govFeesDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract GNSStakingInterfaceV6_4_1\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultToApprove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daiVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"_borrowingFees\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GNSStakingInterfaceV6_4_1\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"_oracleRewards\",\"type\":\"address\"}],\"name\":\"initializeV4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"openTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daiVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"}],\"name\":\"setClosingFeeSharesP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setPairMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setPairMaxLeverageArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.TradeData\",\"name\":\"_tradeData\",\"type\":\"tuple\"}],\"name\":\"setTradeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4_1.LastUpdated\",\"name\":\"_lastUpdated\",\"type\":\"tuple\"}],\"name\":\"setTradeLastUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sssFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract GNSStakingInterfaceV6_4_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4_1.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeLastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GNSTradingCallbacksV6_4_1.sol\":\"GNSTradingCallbacksV6_4_1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/contracts/GNSTradingCallbacksV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"../interfaces/GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"../interfaces/GNSReferralsInterfaceV6_2.sol\\\";\\nimport \\\"../interfaces/GNSStakingInterfaceV6_4_1.sol\\\";\\nimport \\\"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\\\";\\nimport \\\"../interfaces/IGNSOracleRewardsV6_4_1.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\n\\ncontract GNSTradingCallbacksV6_4_1 is Initializable {\\n    // Contracts (constant)\\n    StorageInterfaceV5 public storageT;\\n    IGNSOracleRewardsV6_4_1 public nftRewards;\\n    GNSPairInfosInterfaceV6 public pairInfos;\\n    GNSReferralsInterfaceV6_2 public referrals;\\n    GNSStakingInterfaceV6_4_1 public staking;\\n\\n    // Params (constant)\\n    uint private constant PRECISION = 1e10; // 10 decimals\\n    uint private constant MAX_SL_P = 75; // -75% PNL\\n    uint private constant MAX_GAIN_P = 900; // 900% PnL (10x)\\n    uint private constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\\n\\n    // Params (adjustable)\\n    uint public daiVaultFeeP; // % of closing fee going to DAI vault (eg. 40)\\n    uint public lpFeeP; // % of closing fee going to GNS/DAI LPs (eg. 20)\\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable (DEPRECATED)\\n\\n    // Last Updated State\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated)))) public tradeLastUpdated; // Block numbers for last updated\\n\\n    // v6.3.2 Storage/State\\n    GNSBorrowingFeesInterfaceV6_4 public borrowingFees;\\n    mapping(uint => uint) public pairMaxLeverage;\\n\\n    // v6.4 Storage\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData)))) public tradeData; // More storage for trades / limit orders\\n\\n    // v6.4.1 State\\n    uint public govFeesDai; // 1e18\\n\\n    // Custom data types\\n    struct AggregatorAnswer {\\n        uint orderId;\\n        uint price;\\n        uint spreadP;\\n        uint open;\\n        uint high;\\n        uint low;\\n    }\\n\\n    // Useful to avoid stack too deep errors\\n    struct Values {\\n        uint posDai;\\n        uint levPosDai;\\n        uint tokenPriceDai;\\n        int profitP;\\n        uint price;\\n        uint liqPrice;\\n        uint daiSentToTrader;\\n        uint reward1;\\n        uint reward2;\\n        uint reward3;\\n        bool exactExecution;\\n    }\\n\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    struct OpenTradePrepInput {\\n        uint executionPrice;\\n        uint wantedPrice;\\n        uint marketPrice;\\n        uint spreadP;\\n        bool buy;\\n        uint pairIndex;\\n        uint positionSize;\\n        uint leverage;\\n        uint maxSlippageP;\\n        uint tp;\\n        uint sl;\\n    }\\n\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n\\n    enum CancelReason {\\n        NONE,\\n        PAUSED,\\n        MARKET_CLOSED,\\n        SLIPPAGE,\\n        TP_REACHED,\\n        SL_REACHED,\\n        EXPOSURE_LIMITS,\\n        PRICE_IMPACT,\\n        MAX_LEVERAGE,\\n        NO_TRADE,\\n        WRONG_TRADE,\\n        NOT_HIT\\n    }\\n\\n    // Events\\n    event MarketExecuted(\\n        uint indexed orderId,\\n        StorageInterfaceV5.Trade t,\\n        bool open,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeDai,\\n        int percentProfit, // before fees\\n        uint daiSentToTrader\\n    );\\n\\n    event LimitExecuted(\\n        uint indexed orderId,\\n        uint limitIndex,\\n        StorageInterfaceV5.Trade t,\\n        address indexed nftHolder,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeDai,\\n        int percentProfit,\\n        uint daiSentToTrader,\\n        bool exactExecution\\n    );\\n\\n    event MarketOpenCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        CancelReason cancelReason\\n    );\\n    event MarketCloseCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        CancelReason cancelReason\\n    );\\n    event NftOrderCanceled(\\n        uint indexed orderId,\\n        address indexed nftHolder,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        CancelReason cancelReason\\n    );\\n\\n    event ClosingFeeSharesPUpdated(uint daiVaultFeeP, uint lpFeeP, uint sssFeeP);\\n\\n    event Pause(bool paused);\\n    event Done(bool done);\\n    event GovFeesClaimed(uint valueDai);\\n\\n    event GovFeeCharged(address indexed trader, uint valueDai, bool distributed);\\n    event ReferralFeeCharged(address indexed trader, uint valueDai);\\n    event TriggerFeeCharged(address indexed trader, uint valueDai);\\n    event SssFeeCharged(address indexed trader, uint valueDai);\\n    event DaiVaultFeeCharged(address indexed trader, uint valueDai);\\n    event BorrowingFeeCharged(address indexed trader, uint tradeValueDai, uint feeValueDai);\\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\\n\\n    // Custom errors (save gas)\\n    error WrongParams();\\n    error Forbidden();\\n\\n    function initialize(\\n        StorageInterfaceV5 _storageT,\\n        IGNSOracleRewardsV6_4_1 _nftRewards,\\n        GNSPairInfosInterfaceV6 _pairInfos,\\n        GNSReferralsInterfaceV6_2 _referrals,\\n        GNSStakingInterfaceV6_4_1 _staking,\\n        address vaultToApprove,\\n        uint _daiVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP,\\n        uint _canExecuteTimeout\\n    ) external initializer {\\n        if (\\n            address(_storageT) == address(0) ||\\n            address(_nftRewards) == address(0) ||\\n            address(_pairInfos) == address(0) ||\\n            address(_referrals) == address(0) ||\\n            address(_staking) == address(0) ||\\n            vaultToApprove == address(0) ||\\n            _daiVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\\n        ) {\\n            revert WrongParams();\\n        }\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        staking = _staking;\\n\\n        daiVaultFeeP = _daiVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        canExecuteTimeout = _canExecuteTimeout;\\n\\n        // TokenInterfaceV5 t = storageT.dai();\\n        // t.approve(address(staking), type(uint256).max);\\n        // t.approve(vaultToApprove, type(uint256).max);\\n    }\\n\\n    function initializeV2(GNSBorrowingFeesInterfaceV6_4 _borrowingFees) external reinitializer(2) {\\n        if (address(_borrowingFees) == address(0)) {\\n            revert WrongParams();\\n        }\\n        borrowingFees = _borrowingFees;\\n    }\\n\\n    // skip v3 to be synced with testnet\\n    function initializeV4(\\n        GNSStakingInterfaceV6_4_1 _staking,\\n        IGNSOracleRewardsV6_4_1 _oracleRewards\\n    ) external reinitializer(4) {\\n        if (address(_staking) == address(0) || address(_oracleRewards) == address(0)) {\\n            revert WrongParams();\\n        }\\n\\n        TokenInterfaceV5 t = storageT.dai();\\n        t.approve(address(staking), 0); // revoke old staking contract\\n        t.approve(address(_staking), type(uint256).max); // approve new staking contract\\n\\n        staking = _staking;\\n        nftRewards = _oracleRewards;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        _isGov();\\n        _;\\n    }\\n    modifier onlyPriceAggregator() {\\n        _isPriceAggregator();\\n        _;\\n    }\\n    modifier notDone() {\\n        _isNotDone();\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        _isTrading();\\n        _;\\n    }\\n    modifier onlyManager() {\\n        _isManager();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function _isGov() private view {\\n        if (msg.sender != storageT.gov()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isPriceAggregator() private view {\\n        if (msg.sender != address(storageT.priceAggregator())) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isNotDone() private view {\\n        if (isDone) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isTrading() private view {\\n        if (msg.sender != storageT.trading()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function _isManager() private view {\\n        if (msg.sender != pairInfos.manager()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    // Manage params\\n    function setPairMaxLeverage(uint pairIndex, uint maxLeverage) external onlyManager {\\n        _setPairMaxLeverage(pairIndex, maxLeverage);\\n    }\\n\\n    function setPairMaxLeverageArray(uint[] calldata indices, uint[] calldata values) external onlyManager {\\n        uint len = indices.length;\\n\\n        if (len != values.length) {\\n            revert WrongParams();\\n        }\\n\\n        for (uint i; i < len; ) {\\n            _setPairMaxLeverage(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\\n        pairMaxLeverage[pairIndex] = maxLeverage;\\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\\n    }\\n\\n    function setClosingFeeSharesP(uint _daiVaultFeeP, uint _lpFeeP, uint _sssFeeP) external onlyGov {\\n        if (_daiVaultFeeP + _lpFeeP + _sssFeeP != 100) {\\n            revert WrongParams();\\n        }\\n\\n        daiVaultFeeP = _daiVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        emit ClosingFeeSharesPUpdated(_daiVaultFeeP, _lpFeeP, _sssFeeP);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n\\n        emit Pause(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n\\n        emit Done(isDone);\\n    }\\n\\n    // Claim fees\\n    function claimGovFees() external onlyGov {\\n        uint valueDai = govFeesDai;\\n        govFeesDai = 0;\\n\\n        _transferFromStorageToAddress(storageT.gov(), valueDai);\\n\\n        emit GovFeesClaimed(valueDai);\\n    }\\n\\n    // Callbacks\\n    function openTradeMarketCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingMarketOrder memory o = _getPendingMarketOrder(a.orderId);\\n\\n        if (o.block == 0) {\\n            return;\\n        }\\n\\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        (uint priceImpactP, uint priceAfterImpact, CancelReason cancelReason) = _openTradePrep(\\n            OpenTradePrepInput(\\n                a.price,\\n                o.wantedPrice,\\n                a.price,\\n                a.spreadP,\\n                t.buy,\\n                t.pairIndex,\\n                t.positionSizeDai,\\n                t.leverage,\\n                o.slippageP,\\n                t.tp,\\n                t.sl\\n            )\\n        );\\n\\n        t.openPrice = priceAfterImpact;\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            (StorageInterfaceV5.Trade memory finalTrade, uint tokenPriceDai) = _registerTrade(t, false, 0);\\n\\n            emit MarketExecuted(\\n                a.orderId,\\n                finalTrade,\\n                true,\\n                finalTrade.openPrice,\\n                priceImpactP,\\n                (finalTrade.initialPosToken * tokenPriceDai) / PRECISION,\\n                0,\\n                0\\n            );\\n        } else {\\n            // Gov fee to pay for oracle cost\\n            uint govFees = _handleGovFees(t.trader, t.pairIndex, t.positionSizeDai * t.leverage, true);\\n            _transferFromStorageToAddress(t.trader, t.positionSizeDai - govFees);\\n\\n            emit MarketOpenCanceled(a.orderId, t.trader, t.pairIndex, cancelReason);\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, true);\\n    }\\n\\n    function closeTradeMarketCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingMarketOrder memory o = _getPendingMarketOrder(a.orderId);\\n\\n        if (o.block == 0) {\\n            return;\\n        }\\n\\n        StorageInterfaceV5.Trade memory t = _getOpenTrade(o.trade.trader, o.trade.pairIndex, o.trade.index);\\n\\n        CancelReason cancelReason = t.leverage == 0\\n            ? CancelReason.NO_TRADE\\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\\n\\n        if (cancelReason != CancelReason.NO_TRADE) {\\n            StorageInterfaceV5.TradeInfo memory i = _getOpenTradeInfo(t.trader, t.pairIndex, t.index);\\n            AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n            Values memory v;\\n            v.levPosDai = (t.initialPosToken * i.tokenPriceDai * t.leverage) / PRECISION;\\n            v.tokenPriceDai = aggregator.tokenPriceDai();\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = _currentPercentProfit(t.openPrice, a.price, t.buy, t.leverage);\\n                v.posDai = v.levPosDai / t.leverage;\\n\\n                v.daiSentToTrader = _unregisterTrade(\\n                    t,\\n                    true,\\n                    v.profitP,\\n                    v.posDai,\\n                    i.openInterestDai,\\n                    (v.levPosDai * aggregator.pairsStorage().pairCloseFeeP(t.pairIndex)) / 100 / PRECISION,\\n                    (v.levPosDai * aggregator.pairsStorage().pairNftLimitOrderFeeP(t.pairIndex)) / 100 / PRECISION\\n                );\\n\\n                emit MarketExecuted(a.orderId, t, false, a.price, 0, v.posDai, v.profitP, v.daiSentToTrader);\\n            } else {\\n                // Gov fee to pay for oracle cost\\n                uint govFee = _handleGovFees(t.trader, t.pairIndex, v.levPosDai, t.positionSizeDai > 0);\\n                t.initialPosToken -= (govFee * PRECISION) / i.tokenPriceDai;\\n\\n                storageT.updateTrade(t);\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit MarketCloseCanceled(a.orderId, o.trade.trader, o.trade.pairIndex, o.trade.index, cancelReason);\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, false);\\n    }\\n\\n    function executeNftOpenOrderCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingNftOrder memory n = storageT.reqID_pendingNftOrder(a.orderId);\\n\\n        CancelReason cancelReason = !storageT.hasOpenLimitOrder(n.trader, n.pairIndex, n.index)\\n            ? CancelReason.NO_TRADE\\n            : CancelReason.NONE;\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(n.trader, n.pairIndex, n.index);\\n\\n            IGNSOracleRewardsV6_4_1.OpenLimitOrderType t = nftRewards.openLimitOrderTypes(\\n                n.trader,\\n                n.pairIndex,\\n                n.index\\n            );\\n\\n            cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice) ? CancelReason.NONE : CancelReason.NOT_HIT;\\n\\n            // Note: o.minPrice always equals o.maxPrice so can use either\\n            (uint priceImpactP, uint priceAfterImpact, CancelReason _cancelReason) = _openTradePrep(\\n                OpenTradePrepInput(\\n                    cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\\n                    o.maxPrice,\\n                    a.open,\\n                    a.spreadP,\\n                    o.buy,\\n                    o.pairIndex,\\n                    o.positionSize,\\n                    o.leverage,\\n                    tradeData[o.trader][o.pairIndex][o.index][TradeType.LIMIT].maxSlippageP,\\n                    o.tp,\\n                    o.sl\\n                )\\n            );\\n\\n            bool exactExecution = cancelReason == CancelReason.NONE;\\n\\n            cancelReason = !exactExecution &&\\n                (\\n                    o.maxPrice == 0 || t == IGNSOracleRewardsV6_4_1.OpenLimitOrderType.MOMENTUM\\n                        ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\\n                        : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\\n                )\\n                ? CancelReason.NOT_HIT\\n                : _cancelReason;\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                (StorageInterfaceV5.Trade memory finalTrade, uint tokenPriceDai) = _registerTrade(\\n                    StorageInterfaceV5.Trade(\\n                        o.trader,\\n                        o.pairIndex,\\n                        0,\\n                        0,\\n                        o.positionSize,\\n                        priceAfterImpact,\\n                        o.buy,\\n                        o.leverage,\\n                        o.tp,\\n                        o.sl\\n                    ),\\n                    true,\\n                    n.index\\n                );\\n\\n                storageT.unregisterOpenLimitOrder(o.trader, o.pairIndex, o.index);\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    n.index,\\n                    finalTrade,\\n                    n.nftHolder,\\n                    StorageInterfaceV5.LimitOrder.OPEN,\\n                    finalTrade.openPrice,\\n                    priceImpactP,\\n                    (finalTrade.initialPosToken * tokenPriceDai) / PRECISION,\\n                    0,\\n                    0,\\n                    exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(a.orderId, n.nftHolder, StorageInterfaceV5.LimitOrder.OPEN, cancelReason);\\n        }\\n\\n        nftRewards.unregisterTrigger(\\n            IGNSOracleRewardsV6_4_1.TriggeredLimitId(n.trader, n.pairIndex, n.index, n.orderType)\\n        );\\n\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    function executeNftCloseOrderCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingNftOrder memory o = storageT.reqID_pendingNftOrder(a.orderId);\\n        IGNSOracleRewardsV6_4_1.TriggeredLimitId memory triggeredLimitId = IGNSOracleRewardsV6_4_1.TriggeredLimitId(\\n            o.trader,\\n            o.pairIndex,\\n            o.index,\\n            o.orderType\\n        );\\n        StorageInterfaceV5.Trade memory t = _getOpenTrade(o.trader, o.pairIndex, o.index);\\n\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n        CancelReason cancelReason = a.open == 0\\n            ? CancelReason.MARKET_CLOSED\\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterfaceV5.TradeInfo memory i = _getOpenTradeInfo(t.trader, t.pairIndex, t.index);\\n\\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n            Values memory v;\\n            v.levPosDai = (t.initialPosToken * i.tokenPriceDai * t.leverage) / PRECISION;\\n            v.posDai = v.levPosDai / t.leverage;\\n\\n            if (o.orderType == StorageInterfaceV5.LimitOrder.LIQ) {\\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    GNSBorrowingFeesInterfaceV6_4.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        v.posDai,\\n                        t.leverage\\n                    )\\n                );\\n            }\\n\\n            v.price = o.orderType == StorageInterfaceV5.LimitOrder.TP\\n                ? t.tp\\n                : (o.orderType == StorageInterfaceV5.LimitOrder.SL ? t.sl : v.liqPrice);\\n\\n            v.exactExecution = v.price > 0 && a.low <= v.price && a.high >= v.price;\\n\\n            if (v.exactExecution) {\\n                v.reward1 = o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                    ? (v.posDai * 5) / 100\\n                    : (v.levPosDai * pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) / 100 / PRECISION;\\n            } else {\\n                v.price = a.open;\\n\\n                v.reward1 = o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                    ? ((t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice) ? (v.posDai * 5) / 100 : 0)\\n                    : (\\n                        ((o.orderType == StorageInterfaceV5.LimitOrder.TP &&\\n                            t.tp > 0 &&\\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\\n                            (o.orderType == StorageInterfaceV5.LimitOrder.SL &&\\n                                t.sl > 0 &&\\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\\n                            ? (v.levPosDai * pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) / 100 / PRECISION\\n                            : 0\\n                    );\\n            }\\n\\n            cancelReason = v.reward1 == 0 ? CancelReason.NOT_HIT : CancelReason.NONE;\\n\\n            // If can be triggered\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = _currentPercentProfit(t.openPrice, v.price, t.buy, t.leverage);\\n                v.tokenPriceDai = aggregator.tokenPriceDai();\\n\\n                v.daiSentToTrader = _unregisterTrade(\\n                    t,\\n                    false,\\n                    v.profitP,\\n                    v.posDai,\\n                    i.openInterestDai,\\n                    o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                        ? v.reward1\\n                        : (v.levPosDai * pairsStored.pairCloseFeeP(t.pairIndex)) / 100 / PRECISION,\\n                    v.reward1\\n                );\\n\\n                _handleOracleRewards(triggeredLimitId, t.trader, (v.reward1 * 2) / 10, v.tokenPriceDai);\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    o.index,\\n                    t,\\n                    o.nftHolder,\\n                    o.orderType,\\n                    v.price,\\n                    0,\\n                    v.posDai,\\n                    v.profitP,\\n                    v.daiSentToTrader,\\n                    v.exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(a.orderId, o.nftHolder, o.orderType, cancelReason);\\n        }\\n\\n        nftRewards.unregisterTrigger(triggeredLimitId);\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    // Shared code between market & limit callbacks\\n    function _registerTrade(\\n        StorageInterfaceV5.Trade memory trade,\\n        bool isLimitOrder,\\n        uint limitIndex\\n    ) private returns (StorageInterfaceV5.Trade memory, uint) {\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        Values memory v;\\n\\n        v.levPosDai = trade.positionSizeDai * trade.leverage;\\n        v.tokenPriceDai = aggregator.tokenPriceDai();\\n\\n        // 1. Charge referral fee (if applicable) and send DAI amount to vault\\n        if (referrals.getTraderReferrer(trade.trader) != address(0)) {\\n            // Use this variable to store lev pos dai for dev/gov fees after referral fees\\n            // and before volumeReferredDai increases\\n            v.posDai =\\n                (v.levPosDai * (100 * PRECISION - referrals.getPercentOfOpenFeeP(trade.trader))) /\\n                100 /\\n                PRECISION;\\n\\n            v.reward1 = referrals.distributePotentialReward(\\n                trade.trader,\\n                v.levPosDai,\\n                pairsStored.pairOpenFeeP(trade.pairIndex),\\n                v.tokenPriceDai\\n            );\\n\\n            _sendToVault(v.reward1, trade.trader);\\n            trade.positionSizeDai -= v.reward1;\\n\\n            emit ReferralFeeCharged(trade.trader, v.reward1);\\n        }\\n\\n        // 2. Calculate gov fee (- referral fee if applicable)\\n        uint govFee = _handleGovFees(trade.trader, trade.pairIndex, (v.posDai > 0 ? v.posDai : v.levPosDai), true);\\n        v.reward1 = govFee; // SSS fee (previously dev fee)\\n\\n        // 3. Calculate Market/Limit fee\\n        v.reward2 = (v.levPosDai * pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) / 100 / PRECISION;\\n\\n        // 3.1 Deduct gov fee, SSS fee (previously dev fee), Market/Limit fee\\n        trade.positionSizeDai -= govFee + v.reward1 + v.reward2;\\n\\n        // 3.2 Distribute Oracle fee and send DAI amount to vault if applicable\\n        if (isLimitOrder) {\\n            v.reward3 = (v.reward2 * 2) / 10; // 20% of limit fees\\n            _sendToVault(v.reward3, trade.trader);\\n\\n            _handleOracleRewards(\\n                IGNSOracleRewardsV6_4_1.TriggeredLimitId(\\n                    trade.trader,\\n                    trade.pairIndex,\\n                    limitIndex,\\n                    StorageInterfaceV5.LimitOrder.OPEN\\n                ),\\n                trade.trader,\\n                v.reward3,\\n                v.tokenPriceDai\\n            );\\n        }\\n\\n        // 3.3 Distribute SSS fee (previous dev fee + market/limit fee - oracle reward)\\n        _distributeStakingReward(trade.trader, v.reward1 + v.reward2 - v.reward3);\\n\\n        // 4. Set trade final details\\n        trade.index = storageT.firstEmptyTradeIndex(trade.trader, trade.pairIndex);\\n        trade.initialPosToken = (trade.positionSizeDai * PRECISION) / v.tokenPriceDai;\\n\\n        trade.tp = _correctTp(trade.openPrice, trade.leverage, trade.tp, trade.buy);\\n        trade.sl = _correctSl(trade.openPrice, trade.leverage, trade.sl, trade.buy);\\n\\n        // 5. Call other contracts\\n        pairInfos.storeTradeInitialAccFees(trade.trader, trade.pairIndex, trade.index, trade.buy);\\n        pairsStored.updateGroupCollateral(trade.pairIndex, trade.positionSizeDai, trade.buy, true);\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.positionSizeDai * trade.leverage,\\n            true,\\n            trade.buy\\n        );\\n\\n        // 6. Store final trade in storage contract\\n        storageT.storeTrade(\\n            trade,\\n            StorageInterfaceV5.TradeInfo(0, v.tokenPriceDai, trade.positionSizeDai * trade.leverage, 0, 0, false)\\n        );\\n\\n        // 7. Store tradeLastUpdated\\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][trade.pairIndex][trade.index][\\n            TradeType.MARKET\\n        ];\\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\\n        lastUpdated.tp = currBlock;\\n        lastUpdated.sl = currBlock;\\n        lastUpdated.created = currBlock;\\n\\n        return (trade, v.tokenPriceDai);\\n    }\\n\\n    function _unregisterTrade(\\n        StorageInterfaceV5.Trade memory trade,\\n        bool marketOrder,\\n        int percentProfit, // PRECISION\\n        uint currentDaiPos, // 1e18\\n        uint openInterestDai, // 1e18\\n        uint closingFeeDai, // 1e18\\n        uint nftFeeDai // 1e18 (= SSS reward if market order)\\n    ) private returns (uint daiSentToTrader) {\\n        IGToken vault = storageT.vault();\\n\\n        // 1. Calculate net PnL (after all closing and holding fees)\\n        (daiSentToTrader, ) = _getTradeValue(trade, currentDaiPos, percentProfit, closingFeeDai + nftFeeDai);\\n\\n        // 2. Calls to other contracts\\n        borrowingFees.handleTradeAction(trade.trader, trade.pairIndex, trade.index, openInterestDai, false, trade.buy);\\n        _getPairsStorage().updateGroupCollateral(trade.pairIndex, openInterestDai / trade.leverage, trade.buy, false);\\n\\n        // 3. Unregister trade from storage\\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\\n\\n        // 4.1 If collateral in storage\\n        if (trade.positionSizeDai > 0) {\\n            Values memory v;\\n\\n            // 5. DAI vault reward\\n            v.reward2 = (closingFeeDai * daiVaultFeeP) / 100;\\n            _transferFromStorageToAddress(address(this), v.reward2);\\n            vault.distributeReward(v.reward2);\\n\\n            emit DaiVaultFeeCharged(trade.trader, v.reward2);\\n\\n            // 6. SSS reward\\n            v.reward3 = (marketOrder ? nftFeeDai : (nftFeeDai * 8) / 10) + (closingFeeDai * sssFeeP) / 100;\\n            _distributeStakingReward(trade.trader, v.reward3);\\n\\n            // 7. Take DAI from vault if winning trade\\n            // or send DAI to vault if losing trade\\n            uint daiLeftInStorage = currentDaiPos - v.reward3 - v.reward2;\\n\\n            if (daiSentToTrader > daiLeftInStorage) {\\n                vault.sendAssets(daiSentToTrader - daiLeftInStorage, trade.trader);\\n                _transferFromStorageToAddress(trade.trader, daiLeftInStorage);\\n            } else {\\n                _sendToVault(daiLeftInStorage - daiSentToTrader, trade.trader);\\n                _transferFromStorageToAddress(trade.trader, daiSentToTrader);\\n            }\\n\\n            // 4.2 If collateral in vault, just send dai to trader from vault\\n        } else {\\n            vault.sendAssets(daiSentToTrader, trade.trader);\\n        }\\n    }\\n\\n    // Setters (external)\\n    function setTradeLastUpdated(SimplifiedTradeId calldata _id, LastUpdated memory _lastUpdated) external onlyTrading {\\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][_id.tradeType] = _lastUpdated;\\n    }\\n\\n    function setTradeData(SimplifiedTradeId calldata _id, TradeData memory _tradeData) external onlyTrading {\\n        tradeData[_id.trader][_id.pairIndex][_id.index][_id.tradeType] = _tradeData;\\n    }\\n\\n    // Getters (private)\\n    function _getTradeValue(\\n        StorageInterfaceV5.Trade memory trade,\\n        uint currentDaiPos, // 1e18\\n        int percentProfit, // PRECISION\\n        uint closingFees // 1e18\\n    ) private returns (uint value, uint borrowingFee) {\\n        int netProfitP;\\n\\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(trade, currentDaiPos, percentProfit);\\n        value = pairInfos.getTradeValue(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy,\\n            currentDaiPos,\\n            trade.leverage,\\n            netProfitP,\\n            closingFees\\n        );\\n\\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\\n    }\\n\\n    function _getBorrowingFeeAdjustedPercentProfit(\\n        StorageInterfaceV5.Trade memory trade,\\n        uint currentDaiPos, // 1e18\\n        int percentProfit // PRECISION\\n    ) private view returns (int netProfitP, uint borrowingFee) {\\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\\n            GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput(\\n                trade.trader,\\n                trade.pairIndex,\\n                trade.index,\\n                trade.buy,\\n                currentDaiPos,\\n                trade.leverage\\n            )\\n        );\\n        netProfitP = percentProfit - int((borrowingFee * 100 * PRECISION) / currentDaiPos);\\n    }\\n\\n    function _withinMaxLeverage(uint pairIndex, uint leverage) private view returns (bool) {\\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\\n        return pairMaxLev == 0 ? leverage <= _getPairsStorage().pairMaxLeverage(pairIndex) : leverage <= pairMaxLev;\\n    }\\n\\n    function _withinExposureLimits(\\n        uint pairIndex,\\n        bool buy,\\n        uint positionSizeDai,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint levPositionSizeDai = positionSizeDai * leverage;\\n\\n        return\\n            storageT.openInterestDai(pairIndex, buy ? 0 : 1) + levPositionSizeDai <=\\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeDai);\\n    }\\n\\n    function _currentPercentProfit(\\n        uint openPrice,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) private pure returns (int p) {\\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\\n\\n        p = openPrice > 0\\n            ? ((buy ? int(currentPrice) - int(openPrice) : int(openPrice) - int(currentPrice)) *\\n                100 *\\n                int(PRECISION) *\\n                int(leverage)) / int(openPrice)\\n            : int(0);\\n\\n        p = p > maxPnlP ? maxPnlP : p;\\n    }\\n\\n    function _correctTp(uint openPrice, uint leverage, uint tp, bool buy) private pure returns (uint) {\\n        if (tp == 0 || _currentPercentProfit(openPrice, tp, buy, leverage) == int(MAX_GAIN_P) * int(PRECISION)) {\\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\\n\\n            return buy ? openPrice + tpDiff : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\\n        }\\n\\n        return tp;\\n    }\\n\\n    function _correctSl(uint openPrice, uint leverage, uint sl, bool buy) private pure returns (uint) {\\n        if (sl > 0 && _currentPercentProfit(openPrice, sl, buy, leverage) < int(MAX_SL_P) * int(PRECISION) * -1) {\\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\\n\\n            return buy ? openPrice - slDiff : openPrice + slDiff;\\n        }\\n\\n        return sl;\\n    }\\n\\n    function _marketExecutionPrice(uint price, uint spreadP, bool long) private pure returns (uint) {\\n        uint priceDiff = (price * spreadP) / 100 / PRECISION;\\n\\n        return long ? price + priceDiff : price - priceDiff;\\n    }\\n\\n    function _openTradePrep(\\n        OpenTradePrepInput memory c\\n    ) private view returns (uint priceImpactP, uint priceAfterImpact, CancelReason cancelReason) {\\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\\n            _marketExecutionPrice(c.executionPrice, c.spreadP, c.buy),\\n            c.pairIndex,\\n            c.buy,\\n            c.positionSize * c.leverage\\n        );\\n\\n        uint maxSlippage = c.maxSlippageP > 0\\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\\n            : c.wantedPrice / 100; // 1% by default\\n\\n        cancelReason = isPaused\\n            ? CancelReason.PAUSED\\n            : (\\n                c.marketPrice == 0\\n                    ? CancelReason.MARKET_CLOSED\\n                    : (\\n                        c.buy\\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\\n                    )\\n                    ? CancelReason.SLIPPAGE\\n                    : (c.tp > 0 && (c.buy ? priceAfterImpact >= c.tp : priceAfterImpact <= c.tp))\\n                    ? CancelReason.TP_REACHED\\n                    : (c.sl > 0 && (c.buy ? priceAfterImpact <= c.sl : priceAfterImpact >= c.sl))\\n                    ? CancelReason.SL_REACHED\\n                    : !_withinExposureLimits(c.pairIndex, c.buy, c.positionSize, c.leverage)\\n                    ? CancelReason.EXPOSURE_LIMITS\\n                    : priceImpactP * c.leverage > pairInfos.maxNegativePnlOnOpenP()\\n                    ? CancelReason.PRICE_IMPACT\\n                    : !_withinMaxLeverage(c.pairIndex, c.leverage)\\n                    ? CancelReason.MAX_LEVERAGE\\n                    : CancelReason.NONE\\n            );\\n    }\\n\\n    function _getPendingMarketOrder(uint orderId) private view returns (StorageInterfaceV5.PendingMarketOrder memory) {\\n        return storageT.reqID_pendingMarketOrder(orderId);\\n    }\\n\\n    function _getPairsStorage() private view returns (PairsStorageInterfaceV6) {\\n        return storageT.priceAggregator().pairsStorage();\\n    }\\n\\n    function _getOpenTrade(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterfaceV5.Trade memory) {\\n        return storageT.openTrades(trader, pairIndex, index);\\n    }\\n\\n    function _getOpenTradeInfo(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterfaceV5.TradeInfo memory) {\\n        return storageT.openTradesInfo(trader, pairIndex, index);\\n    }\\n\\n    // Utils (private)\\n    function _distributeStakingReward(address trader, uint amountDai) private {\\n        _transferFromStorageToAddress(address(this), amountDai);\\n        staking.distributeRewardDai(amountDai);\\n        emit SssFeeCharged(trader, amountDai);\\n    }\\n\\n    function _sendToVault(uint amountDai, address trader) private {\\n        _transferFromStorageToAddress(address(this), amountDai);\\n        storageT.vault().receiveAssets(amountDai, trader);\\n    }\\n\\n    function _transferFromStorageToAddress(address to, uint amountDai) private {\\n        storageT.transferDai(address(storageT), to, amountDai);\\n    }\\n\\n    function _handleOracleRewards(\\n        IGNSOracleRewardsV6_4_1.TriggeredLimitId memory triggeredLimitId,\\n        address trader,\\n        uint oracleRewardDai,\\n        uint tokenPriceDai\\n    ) private {\\n        uint oracleRewardToken = ((oracleRewardDai * PRECISION) / tokenPriceDai);\\n        nftRewards.distributeOracleReward(triggeredLimitId, oracleRewardToken);\\n\\n        emit TriggerFeeCharged(trader, oracleRewardDai);\\n    }\\n\\n    function _handleGovFees(\\n        address trader,\\n        uint pairIndex,\\n        uint leveragedPositionSize,\\n        bool distribute\\n    ) private returns (uint govFee) {\\n        govFee = (leveragedPositionSize * storageT.priceAggregator().openFeeP(pairIndex)) / PRECISION / 100;\\n\\n        if (distribute) {\\n            govFeesDai += govFee;\\n        }\\n\\n        emit GovFeeCharged(trader, govFee, distribute);\\n    }\\n\\n    // Getters (public)\\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\\n        uint len = _getPairsStorage().pairsCount();\\n        uint[] memory lev = new uint[](len);\\n\\n        for (uint i; i < len; ) {\\n            lev[i] = pairMaxLeverage[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return lev;\\n    }\\n}\",\"keccak256\":\"0xf834e4e2b40d7f3aa83f565e008bc9933d52d7a2d001b3362d3f5a349c73cf77\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface ChainlinkFeedInterfaceV5{\\n    function latestRoundData() external view returns (uint80,int,uint,uint,uint80);\\n}\",\"keccak256\":\"0x4f39b41b3bdadfb7233fac30c60cedfd20d534ba536c0b016818dd01b47728b1\",\"license\":\"MIT\"},\"contracts/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface GNSBorrowingFeesInterfaceV6_4 {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(uint indexed pairIndex, uint16 indexed prevGroupIndex, uint16 indexed newGroupIndex);\\n    event GroupUpdated(uint16 indexed groupIndex, uint32 feePerBlock, uint72 maxOi, uint48 feeExponent);\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(uint indexed pairIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupAccFeesUpdated(uint16 indexed groupIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(LiqPriceInput calldata) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(BorrowingFeeInput memory) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(uint pairIndex, bool long, uint positionSizeDai) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\",\"keccak256\":\"0x45e49a29961376e50a705047ffcf736885fe69fa9be03e40140102544300cb2b\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface GNSPairInfosInterfaceV6 {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(address, uint, uint) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(address trader, uint pairIndex, uint index, bool long) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\",\"keccak256\":\"0x7f6341ee7fb757eba372d876035758b9f3ad043299353787ea9fd3964c53be4c\",\"license\":\"MIT\"},\"contracts/interfaces/GNSReferralsInterfaceV6_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface GNSReferralsInterfaceV6_2 {\\n    function registerPotentialReferrer(address trader, address referral) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeDai,\\n        uint pairOpenFeeP,\\n        uint tokenPriceDai\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(address trader) external view returns (address referrer);\\n}\",\"keccak256\":\"0xdb14be0f281b38f10b8a2a5e4bb58fd9290ac5580680e8d92cb717b61f38b962\",\"license\":\"MIT\"},\"contracts/interfaces/GNSStakingInterfaceV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface GNSStakingInterfaceV6_4_1 {\\n    // Structs\\n    struct User {\\n        uint128 stakedTokens; // 1e18\\n        uint128 debtDai; // 1e18\\n    }\\n\\n    struct UnlockSchedule {\\n        uint128 totalTokens;\\n        uint128 claimedTokens;\\n        uint128 debtDai;\\n        uint48 start; // block.timestamp (seconds)\\n        uint48 duration; // in seconds\\n        bool revocable;\\n        UnlockType unlockType;\\n        uint16 __placeholder;\\n    }\\n\\n    struct UnlockScheduleInput {\\n        uint128 totalTokens;\\n        uint48 start; // block.timestamp (seconds)\\n        uint48 duration; // in seconds\\n        bool revocable;\\n        UnlockType unlockType;\\n    }\\n\\n    enum UnlockType {\\n        LINEAR,\\n        CLIFF\\n    }\\n\\n    function govFund() external returns (address);\\n\\n    function distributeRewardDai(uint amount) external;\\n\\n    function createUnlockSchedule(UnlockScheduleInput memory schedule, address user) external;\\n\\n    function getUnlockSchedules(address user) external view returns (UnlockSchedule[] memory schedules);\\n\\n    function unlockedAmount(UnlockSchedule memory v, uint48 timestamp) external view returns (uint128 amount);\\n\\n    function releasable(UnlockSchedule memory v, uint48 timestamp) external view returns (uint128 amount);\\n}\",\"keccak256\":\"0x28ec94c92ad62566bd65dead4758a46579aa54f09f83209a15fa99d8741989e2\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IGNSOracleRewardsV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {StorageInterfaceV5} from \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface IGNSOracleRewardsV6_4_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeTrigger(TriggeredLimitId calldata) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeOracleReward(TriggeredLimitId calldata, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n}\",\"keccak256\":\"0xfecddbf188240437e0730d4dd7fd0b6306d5a07049e1fc59a2cc0d95a1399108\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xe1c4eac213e8cc146ef165a92ff5b652c250d2340d4954b7647eed73e601757f\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0x1aba6c110d3893750103e30bd9556f785887576264ba70aa2c4f719eda7de3c4\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(uint) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosDai(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\",\"keccak256\":\"0x664be7bcc46917987f32350f6bdb4e925679875f828e8aef07f0f14c7a4d43d2\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\\n\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n\\n    function openTrades(address, uint, uint) external view returns (Trade memory);\\n\\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n\\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\",\"keccak256\":\"0xb878c2794b85f554cd41e925a457e789e71b2512fdc0e39ce4552c1194094fab\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x0b1aef35747e180443d65683c29cebff6cc9eaaac364f29f1a619f68b8df9b82\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (block.chainid == ARBITRUM_MAINNET || block.chainid == ARBITRUM_GOERLI) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(uint blockNumber) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\",\"keccak256\":\"0x0dc4bd22d718155e7f7471ffb0776c8df4fa0e192999c08aa3572a2f839319d4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 513,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterfaceV5)5704"
      },
      {
        "astId": 516,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "nftRewards",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IGNSOracleRewardsV6_4_1)4922"
      },
      {
        "astId": 519,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "pairInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(GNSPairInfosInterfaceV6)4605"
      },
      {
        "astId": 522,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "referrals",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(GNSReferralsInterfaceV6_2)4642"
      },
      {
        "astId": 525,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "staking",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(GNSStakingInterfaceV6_4_1)4730"
      },
      {
        "astId": 539,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "daiVaultFeeP",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 541,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "lpFeeP",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 543,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "sssFeeP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 545,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "isPaused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 547,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "isDone",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 549,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "canExecuteTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 561,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "tradeLastUpdated",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(LastUpdated)637_storage))))"
      },
      {
        "astId": 564,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "borrowingFees",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(GNSBorrowingFeesInterfaceV6_4)4460"
      },
      {
        "astId": 568,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "pairMaxLeverage",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 580,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "tradeData",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(TradeData)642_storage))))"
      },
      {
        "astId": 582,
        "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
        "label": "govFeesDai",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GNSBorrowingFeesInterfaceV6_4)4460": {
        "encoding": "inplace",
        "label": "contract GNSBorrowingFeesInterfaceV6_4",
        "numberOfBytes": "20"
      },
      "t_contract(GNSPairInfosInterfaceV6)4605": {
        "encoding": "inplace",
        "label": "contract GNSPairInfosInterfaceV6",
        "numberOfBytes": "20"
      },
      "t_contract(GNSReferralsInterfaceV6_2)4642": {
        "encoding": "inplace",
        "label": "contract GNSReferralsInterfaceV6_2",
        "numberOfBytes": "20"
      },
      "t_contract(GNSStakingInterfaceV6_4_1)4730": {
        "encoding": "inplace",
        "label": "contract GNSStakingInterfaceV6_4_1",
        "numberOfBytes": "20"
      },
      "t_contract(IGNSOracleRewardsV6_4_1)4922": {
        "encoding": "inplace",
        "label": "contract IGNSOracleRewardsV6_4_1",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterfaceV5)5704": {
        "encoding": "inplace",
        "label": "contract StorageInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_enum(TradeType)668": {
        "encoding": "inplace",
        "label": "enum GNSTradingCallbacksV6_4_1.TradeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(LastUpdated)637_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(LastUpdated)637_storage)))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(TradeData)642_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(TradeData)642_storage)))"
      },
      "t_mapping(t_enum(TradeType)668,t_struct(LastUpdated)637_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)668",
        "label": "mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated)",
        "numberOfBytes": "32",
        "value": "t_struct(LastUpdated)637_storage"
      },
      "t_mapping(t_enum(TradeType)668,t_struct(TradeData)642_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)668",
        "label": "mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData)",
        "numberOfBytes": "32",
        "value": "t_struct(TradeData)642_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(LastUpdated)637_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)668,t_struct(LastUpdated)637_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(TradeData)642_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)668,t_struct(TradeData)642_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(LastUpdated)637_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.LastUpdated)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(LastUpdated)637_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(TradeData)642_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4_1.TradeType => struct GNSTradingCallbacksV6_4_1.TradeData)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)668,t_struct(TradeData)642_storage))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LastUpdated)637_storage": {
        "encoding": "inplace",
        "label": "struct GNSTradingCallbacksV6_4_1.LastUpdated",
        "members": [
          {
            "astId": 630,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 632,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "sl",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 634,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "limit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 636,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "created",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TradeData)642_storage": {
        "encoding": "inplace",
        "label": "struct GNSTradingCallbacksV6_4_1.TradeData",
        "members": [
          {
            "astId": 639,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "maxSlippageP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 641,
            "contract": "contracts/contracts/GNSTradingCallbacksV6_4_1.sol:GNSTradingCallbacksV6_4_1",
            "label": "_placeholder",
            "offset": 5,
            "slot": "0",
            "type": "t_uint216"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}