{
  "address": "0xC263035e73749eF838c73D3F05c12392fDA9aDA6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "valueLong",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "valueShort",
          "type": "int256"
        }
      ],
      "name": "AccFundingFeesStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "AccRolloverFeesStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rolloverFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFees",
          "type": "int256"
        }
      ],
      "name": "FeesCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FundingFeePerBlockPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "ManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "MaxNegativePnlOnOpenPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueAbove",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueBelow",
          "type": "uint256"
        }
      ],
      "name": "OnePercentDepthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "onePercentDepthAbove",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onePercentDepthBelow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rolloverFeePerBlockP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundingFeePerBlockP",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct GNSPairInfosV6_1.PairParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "PairParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RolloverFeePerBlockPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rollover",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "funding",
          "type": "int256"
        }
      ],
      "name": "TradeInitialAccFeesStored",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getAccFundingFeesLong",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getAccFundingFeesShort",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getAccFundingFeesUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getAccRolloverFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getAccRolloverFeesUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getFundingFeePerBlockP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getOnePercentDepthAbove",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getOnePercentDepthBelow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "name": "getPairInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "onePercentDepthAbove",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onePercentDepthBelow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rolloverFeePerBlockP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundingFeePerBlockP",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSPairInfosV6_1.PairParams[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accPerCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSPairInfosV6_1.PairRolloverFees[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "accPerOiLong",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accPerOiShort",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSPairInfosV6_1.PairFundingFees[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPendingAccFundingFees",
      "outputs": [
        {
          "internalType": "int256",
          "name": "valueLong",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "valueShort",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPendingAccRolloverFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getRolloverFeePerBlockP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        }
      ],
      "name": "getTradeFundingFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "accFundingFeesPerOi",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "endAccFundingFeesPerOi",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        }
      ],
      "name": "getTradeFundingFeePure",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradeInitialAccFundingFeesPerOi",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradeInitialAccRolloverFeesPerCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        }
      ],
      "name": "getTradeLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rolloverFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "getTradeLiquidationPricePure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradeOpenedAfterUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tradeOpenInterest",
          "type": "uint256"
        }
      ],
      "name": "getTradePriceImpact",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceAfterImpact",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "startOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradeOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "onePercentDepth",
          "type": "uint256"
        }
      ],
      "name": "getTradePriceImpactPure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceAfterImpact",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "getTradeRolloverFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accRolloverFeesPerCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endAccRolloverFeesPerCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "getTradeRolloverFeePure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "closingFee",
          "type": "uint256"
        }
      ],
      "name": "getTradeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "rolloverFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "closingFee",
          "type": "uint256"
        }
      ],
      "name": "getTradeValuePure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNegativePnlOnOpenP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairFundingFees",
      "outputs": [
        {
          "internalType": "int256",
          "name": "accPerOiLong",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "accPerOiShort",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "onePercentDepthAbove",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "onePercentDepthBelow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rolloverFeePerBlockP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundingFeePerBlockP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairRolloverFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accPerCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setFundingFeePerBlockP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "setFundingFeePerBlockPArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMaxNegativePnlOnOpenP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valueAbove",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valueBelow",
          "type": "uint256"
        }
      ],
      "name": "setOnePercentDepth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "valuesAbove",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "valuesBelow",
          "type": "uint256[]"
        }
      ],
      "name": "setOnePercentDepthArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "onePercentDepthAbove",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onePercentDepthBelow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rolloverFeePerBlockP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundingFeePerBlockP",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSPairInfosV6_1.PairParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPairParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "onePercentDepthAbove",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onePercentDepthBelow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rolloverFeePerBlockP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundingFeePerBlockP",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSPairInfosV6_1.PairParams[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "name": "setPairParamsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setRolloverFeePerBlockP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "setRolloverFeePerBlockPArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "storeTradeInitialAccFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tradeInitialAccFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rollover",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "funding",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "openedAfterUpdate",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3d654791147f957e2d5fc90362583dce03b42653855dfbaa1de9b7468def418",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0xC263035e73749eF838c73D3F05c12392fDA9aDA6",
    "transactionIndex": 1,
    "gasUsed": "2239324",
    "logsBloom": "0x
    "blockHash": "0xa014daea9d03e679028c6c1fc03d8ec1d386f428f7b4ebeece32454fae5dbd39",
    "transactionHash": "0xc3d654791147f957e2d5fc90362583dce03b42653855dfbaa1de9b7468def418",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 47277131,
        "transactionHash": "0xc3d654791147f957e2d5fc90362583dce03b42653855dfbaa1de9b7468def418",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d7d1dcba2c678ee7e049bd55176354e7c5bbdcca",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000011672ddae7e3d9c000000000000000000000000000000000000000000000000203256e566fd92a500000000000000000000000000000000000000000000242c83ecf6f188d9032e0000000000000000000000000000000000000000000000001f1be407b87f550900000000000000000000000000000000000000000000242c850369cf375740ca",
        "logIndex": 4,
        "blockHash": "0xa014daea9d03e679028c6c1fc03d8ec1d386f428f7b4ebeece32454fae5dbd39"
      }
    ],
    "blockNumber": 47277131,
    "cumulativeGasUsed": "3327910",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2B1Db581606F03b0C436C09E7905695378E16b9a"
  ],
  "numDeployments": 1,
  "solcInputHash": "ae11fa42ad9e3ddde36d59c43b13a5de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"valueLong\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"valueShort\",\"type\":\"int256\"}],\"name\":\"AccFundingFeesStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccRolloverFeesStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rolloverFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFees\",\"type\":\"int256\"}],\"name\":\"FeesCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundingFeePerBlockPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"ManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MaxNegativePnlOnOpenPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueAbove\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueBelow\",\"type\":\"uint256\"}],\"name\":\"OnePercentDepthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GNSPairInfosV6_1.PairParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"PairParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RolloverFeePerBlockPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rollover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"funding\",\"type\":\"int256\"}],\"name\":\"TradeInitialAccFeesStored\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccFundingFeesLong\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccFundingFeesShort\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccFundingFeesUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccRolloverFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccRolloverFeesUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getFundingFeePerBlockP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getOnePercentDepthAbove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getOnePercentDepthBelow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"getPairInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSPairInfosV6_1.PairParams[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSPairInfosV6_1.PairRolloverFees[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"accPerOiLong\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accPerOiShort\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSPairInfosV6_1.PairFundingFees[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPendingAccFundingFees\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"valueLong\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"valueShort\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPendingAccRolloverFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getRolloverFeePerBlockP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"getTradeFundingFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"accFundingFeesPerOi\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"endAccFundingFeesPerOi\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"getTradeFundingFeePure\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeInitialAccFundingFeesPerOi\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeInitialAccRolloverFeesPerCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"getTradeLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"getTradeLiquidationPricePure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeOpenedAfterUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tradeOpenInterest\",\"type\":\"uint256\"}],\"name\":\"getTradePriceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAfterImpact\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepth\",\"type\":\"uint256\"}],\"name\":\"getTradePriceImpactPure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAfterImpact\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"getTradeRolloverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accRolloverFeesPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAccRolloverFeesPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"getTradeRolloverFeePure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"getTradeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"getTradeValuePure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNegativePnlOnOpenP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairFundingFees\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"accPerOiLong\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accPerOiShort\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairRolloverFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFundingFeePerBlockP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setFundingFeePerBlockPArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxNegativePnlOnOpenP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueBelow\",\"type\":\"uint256\"}],\"name\":\"setOnePercentDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valuesAbove\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valuesBelow\",\"type\":\"uint256[]\"}],\"name\":\"setOnePercentDepthArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSPairInfosV6_1.PairParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPairParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSPairInfosV6_1.PairParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setPairParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRolloverFeePerBlockP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setRolloverFeePerBlockPArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"storeTradeInitialAccFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradeInitialAccFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rollover\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"funding\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"openedAfterUpdate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GNSPairInfosV6_1.sol\":\"GNSPairInfosV6_1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/contracts/GNSPairInfosV6_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\n\\ncontract GNSPairInfosV6_1 {\\n    // Addresses\\n    StorageInterfaceV5 immutable storageT;\\n    address public manager;\\n\\n    // Constant parameters\\n    uint constant PRECISION = 1e10;     // 10 decimals\\n    uint constant LIQ_THRESHOLD_P = 90; // -90% (of collateral)\\n\\n    // Adjustable parameters\\n    uint public maxNegativePnlOnOpenP = 40 * PRECISION; // PRECISION (%)\\n\\n    // Pair parameters\\n    struct PairParams{\\n        uint onePercentDepthAbove; // DAI\\n        uint onePercentDepthBelow; // DAI\\n        uint rolloverFeePerBlockP; // PRECISION (%)\\n        uint fundingFeePerBlockP;  // PRECISION (%)\\n    }\\n\\n    mapping(uint => PairParams) public pairParams;\\n\\n    // Pair acc funding fees\\n    struct PairFundingFees{\\n        int accPerOiLong;  // 1e18 (DAI)\\n        int accPerOiShort; // 1e18 (DAI)\\n        uint lastUpdateBlock;\\n    }\\n\\n    mapping(uint => PairFundingFees) public pairFundingFees;\\n\\n    // Pair acc rollover fees\\n    struct PairRolloverFees{\\n        uint accPerCollateral; // 1e18 (DAI)\\n        uint lastUpdateBlock;\\n    }\\n\\n    mapping(uint => PairRolloverFees) public pairRolloverFees;\\n\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees{\\n        uint rollover; // 1e18 (DAI)\\n        int funding;   // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    mapping(\\n        address => mapping(\\n            uint => mapping(\\n                uint => TradeInitialAccFees\\n            )\\n        )\\n    ) public tradeInitialAccFees;\\n\\n    // Events\\n    event ManagerUpdated(address value);\\n    event MaxNegativePnlOnOpenPUpdated(uint value);\\n    \\n    event PairParamsUpdated(uint pairIndex, PairParams value);\\n    event OnePercentDepthUpdated(uint pairIndex, uint valueAbove, uint valueBelow);\\n    event RolloverFeePerBlockPUpdated(uint pairIndex, uint value);\\n    event FundingFeePerBlockPUpdated(uint pairIndex, uint value);\\n\\n    event TradeInitialAccFeesStored(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint rollover,\\n        int funding\\n    );\\n\\n    event AccFundingFeesStored(uint pairIndex, int valueLong, int valueShort);\\n    event AccRolloverFeesStored(uint pairIndex, uint value);\\n\\n    event FeesCharged(\\n        uint pairIndex,\\n        bool long,\\n        uint collateral,   // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint rolloverFees, // 1e18 (DAI)\\n        int fundingFees    // 1e18 (DAI)\\n    );\\n\\n    constructor(StorageInterfaceV5 _storageT){\\n        storageT = _storageT;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov(){\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n        _;\\n    }\\n    modifier onlyManager(){\\n        require(msg.sender == manager, \\\"MANAGER_ONLY\\\");\\n        _;\\n    }\\n    modifier onlyCallbacks(){\\n        require(msg.sender == storageT.callbacks(), \\\"CALLBACKS_ONLY\\\");\\n        _;\\n    }\\n\\n    // Set manager address\\n    function setManager(address _manager) external onlyGov{\\n        manager = _manager;\\n\\n        emit ManagerUpdated(_manager);\\n    }\\n\\n    // Set max negative PnL % on trade opening\\n    function setMaxNegativePnlOnOpenP(uint value) external onlyManager{\\n        maxNegativePnlOnOpenP = value;\\n\\n        emit MaxNegativePnlOnOpenPUpdated(value);\\n    }\\n\\n    // Set parameters for pair\\n    function setPairParams(uint pairIndex, PairParams memory value) public onlyManager{\\n        storeAccRolloverFees(pairIndex);\\n        storeAccFundingFees(pairIndex);\\n\\n        pairParams[pairIndex] = value;\\n\\n        emit PairParamsUpdated(pairIndex, value);\\n    }\\n    function setPairParamsArray(\\n        uint[] memory indices,\\n        PairParams[] memory values\\n    ) external onlyManager{\\n        require(indices.length == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for(uint i = 0; i < indices.length; i++){\\n            setPairParams(indices[i], values[i]);\\n        }\\n    }\\n\\n    // Set one percent depth for pair\\n    function setOnePercentDepth(\\n        uint pairIndex,\\n        uint valueAbove,\\n        uint valueBelow\\n    ) public onlyManager{\\n        PairParams storage p = pairParams[pairIndex];\\n\\n        p.onePercentDepthAbove = valueAbove;\\n        p.onePercentDepthBelow = valueBelow;\\n        \\n        emit OnePercentDepthUpdated(pairIndex, valueAbove, valueBelow);\\n    }\\n    function setOnePercentDepthArray(\\n        uint[] memory indices,\\n        uint[] memory valuesAbove,\\n        uint[] memory valuesBelow\\n    ) external onlyManager{\\n        require(indices.length == valuesAbove.length\\n            && indices.length == valuesBelow.length, \\\"WRONG_LENGTH\\\");\\n\\n        for(uint i = 0; i < indices.length; i++){\\n            setOnePercentDepth(indices[i], valuesAbove[i], valuesBelow[i]);\\n        }\\n    }\\n\\n    // Set rollover fee for pair\\n    function setRolloverFeePerBlockP(uint pairIndex, uint value) public onlyManager{\\n        require(value <= 25000000, \\\"TOO_HIGH\\\"); // \\u2248 100% per day\\n\\n        storeAccRolloverFees(pairIndex);\\n\\n        pairParams[pairIndex].rolloverFeePerBlockP = value;\\n        \\n        emit RolloverFeePerBlockPUpdated(pairIndex, value);\\n    }\\n    function setRolloverFeePerBlockPArray(\\n        uint[] memory indices,\\n        uint[] memory values\\n    ) external onlyManager{\\n        require(indices.length == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for(uint i = 0; i < indices.length; i++){\\n            setRolloverFeePerBlockP(indices[i], values[i]);\\n        }\\n    }\\n\\n    // Set funding fee for pair\\n    function setFundingFeePerBlockP(uint pairIndex, uint value) public onlyManager{\\n        require(value <= 10000000, \\\"TOO_HIGH\\\"); // \\u2248 40% per day\\n\\n        storeAccFundingFees(pairIndex);\\n\\n        pairParams[pairIndex].fundingFeePerBlockP = value;\\n        \\n        emit FundingFeePerBlockPUpdated(pairIndex, value);\\n    }\\n    function setFundingFeePerBlockPArray(\\n        uint[] memory indices,\\n        uint[] memory values\\n    ) external onlyManager{\\n        require(indices.length == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for(uint i = 0; i < indices.length; i++){\\n            setFundingFeePerBlockP(indices[i], values[i]);\\n        }\\n    }\\n\\n    // Store trade details when opened (acc fee values)\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external {\\n        storeAccFundingFees(pairIndex);\\n\\n        TradeInitialAccFees storage t = tradeInitialAccFees[trader][pairIndex][index];\\n\\n        t.rollover = getPendingAccRolloverFees(pairIndex);\\n\\n        t.funding = long ? \\n            pairFundingFees[pairIndex].accPerOiLong :\\n            pairFundingFees[pairIndex].accPerOiShort;\\n\\n        t.openedAfterUpdate = true;\\n\\n        emit TradeInitialAccFeesStored(trader, pairIndex, index, t.rollover, t.funding);\\n    }\\n\\n    // Acc rollover fees (store right before fee % update)\\n    function storeAccRolloverFees(uint pairIndex) private{\\n        PairRolloverFees storage r = pairRolloverFees[pairIndex];\\n\\n        r.accPerCollateral = getPendingAccRolloverFees(pairIndex);\\n        r.lastUpdateBlock = block.number;\\n\\n        emit AccRolloverFeesStored(pairIndex, r.accPerCollateral);\\n    }\\n    function getPendingAccRolloverFees(\\n        uint pairIndex\\n    ) public view returns(uint){ // 1e18 (DAI)\\n        PairRolloverFees storage r = pairRolloverFees[pairIndex];\\n        \\n        return r.accPerCollateral +\\n            (block.number - r.lastUpdateBlock)\\n            * pairParams[pairIndex].rolloverFeePerBlockP\\n            * 1e18 / PRECISION / 100;\\n    }\\n\\n    // Acc funding fees (store right before trades opened / closed and fee % update)\\n    function storeAccFundingFees(uint pairIndex) private{\\n        PairFundingFees storage f = pairFundingFees[pairIndex];\\n\\n        (f.accPerOiLong, f.accPerOiShort) = getPendingAccFundingFees(pairIndex);\\n        f.lastUpdateBlock = block.number;\\n\\n        emit AccFundingFeesStored(pairIndex, f.accPerOiLong, f.accPerOiShort);\\n    }\\n    function getPendingAccFundingFees(uint pairIndex) public view returns(\\n        int valueLong,\\n        int valueShort\\n    ){\\n        PairFundingFees storage f = pairFundingFees[pairIndex];\\n\\n        valueLong = f.accPerOiLong;\\n        valueShort = f.accPerOiShort;\\n\\n        int openInterestDaiLong = int(storageT.openInterestDai(pairIndex, 0));\\n        int openInterestDaiShort = int(storageT.openInterestDai(pairIndex, 1));\\n\\n        int fundingFeesPaidByLongs = (openInterestDaiLong - openInterestDaiShort)\\n            * int(block.number - f.lastUpdateBlock)\\n            * int(pairParams[pairIndex].fundingFeePerBlockP)\\n            / int(PRECISION) / 100;\\n\\n        if(openInterestDaiLong > 0){\\n            valueLong += fundingFeesPaidByLongs * 1e18\\n                / openInterestDaiLong;\\n        }\\n\\n        if(openInterestDaiShort > 0){\\n            valueShort += fundingFeesPaidByLongs * 1e18 * (-1)\\n                / openInterestDaiShort;\\n        }\\n    }\\n\\n    // Dynamic price impact value on trade opening\\n    function getTradePriceImpact(\\n        uint openPrice,        // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint tradeOpenInterest // 1e18 (DAI)\\n    ) external view returns(\\n        uint priceImpactP,     // PRECISION (%)\\n        uint priceAfterImpact  // PRECISION\\n    ){\\n        (priceImpactP, priceAfterImpact) = getTradePriceImpactPure(\\n            openPrice,\\n            long,\\n            storageT.openInterestDai(pairIndex, long ? 0 : 1),\\n            tradeOpenInterest,\\n            long ?\\n                pairParams[pairIndex].onePercentDepthAbove :\\n                pairParams[pairIndex].onePercentDepthBelow\\n        );\\n    }\\n    function getTradePriceImpactPure(\\n        uint openPrice,         // PRECISION\\n        bool long,\\n        uint startOpenInterest, // 1e18 (DAI)\\n        uint tradeOpenInterest, // 1e18 (DAI)\\n        uint onePercentDepth\\n    ) public pure returns(\\n        uint priceImpactP,      // PRECISION (%)\\n        uint priceAfterImpact   // PRECISION\\n    ){\\n        if(onePercentDepth == 0){\\n            return (0, openPrice);\\n        }\\n\\n        priceImpactP = (startOpenInterest + tradeOpenInterest / 2)\\n            * PRECISION / 1e18 / onePercentDepth;\\n        \\n        uint priceImpact = priceImpactP * openPrice / PRECISION / 100;\\n\\n        priceAfterImpact = long ? openPrice + priceImpact : openPrice - priceImpact;\\n    }\\n\\n    // Rollover fee value\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) public view returns(uint){ // 1e18 (DAI)\\n        TradeInitialAccFees memory t = tradeInitialAccFees[trader][pairIndex][index];\\n\\n        if(!t.openedAfterUpdate){\\n            return 0;\\n        }\\n\\n        return getTradeRolloverFeePure(\\n            t.rollover,\\n            getPendingAccRolloverFees(pairIndex),\\n            collateral\\n        );\\n    }\\n    function getTradeRolloverFeePure(\\n        uint accRolloverFeesPerCollateral,\\n        uint endAccRolloverFeesPerCollateral,\\n        uint collateral // 1e18 (DAI)\\n    ) public pure returns(uint){ // 1e18 (DAI)\\n        return (endAccRolloverFeesPerCollateral - accRolloverFeesPerCollateral)\\n            * collateral / 1e18;\\n    }\\n\\n    // Funding fee value\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) public view returns(\\n        int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n    ){\\n        TradeInitialAccFees memory t = tradeInitialAccFees[trader][pairIndex][index];\\n\\n        if(!t.openedAfterUpdate){\\n            return 0;\\n        }\\n\\n        (int pendingLong, int pendingShort) = getPendingAccFundingFees(pairIndex);\\n\\n        return getTradeFundingFeePure(\\n            t.funding,\\n            long ? pendingLong : pendingShort,\\n            collateral,\\n            leverage\\n        );\\n    }\\n    function getTradeFundingFeePure(\\n        int accFundingFeesPerOi,\\n        int endAccFundingFeesPerOi,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) public pure returns(\\n        int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n    ){\\n        return (endAccFundingFeesPerOi - accFundingFeesPerOi)\\n            * int(collateral) * int(leverage) / 1e18;\\n    }\\n\\n    // Liquidation price value after rollover and funding fees\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice,  // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns(uint){ // PRECISION\\n        return getTradeLiquidationPricePure(\\n            openPrice,\\n            long,\\n            collateral,\\n            leverage,\\n            getTradeRolloverFee(trader, pairIndex, index, collateral),\\n            getTradeFundingFee(trader, pairIndex, index, long, collateral, leverage)\\n        );\\n    }\\n    function getTradeLiquidationPricePure(\\n        uint openPrice,   // PRECISION\\n        bool long,\\n        uint collateral,  // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee    // 1e18 (DAI)\\n    ) public pure returns(uint){ // PRECISION\\n        int liqPriceDistance = int(openPrice) * (\\n                int(collateral * LIQ_THRESHOLD_P / 100)\\n                - int(rolloverFee) - fundingFee\\n            ) / int(collateral) / int(leverage);\\n\\n        int liqPrice = long ?\\n            int(openPrice) - liqPriceDistance :\\n            int(openPrice) + liqPriceDistance;\\n\\n        return liqPrice > 0 ? uint(liqPrice) : 0;\\n    }\\n\\n    // Dai sent to trader after PnL and fees\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral,   // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee    // 1e18 (DAI)\\n    ) external onlyCallbacks returns(uint amount){ // 1e18 (DAI)\\n        storeAccFundingFees(pairIndex);\\n\\n        uint r = getTradeRolloverFee(trader, pairIndex, index, collateral);\\n        int f = getTradeFundingFee(trader, pairIndex, index, long, collateral, leverage);\\n\\n        amount = getTradeValuePure(collateral, percentProfit, r, f, closingFee);\\n\\n        emit FeesCharged(pairIndex, long, collateral, leverage, percentProfit, r, f);\\n    }\\n    function getTradeValuePure(\\n        uint collateral,   // 1e18 (DAI)\\n        int percentProfit, // PRECISION (%)\\n        uint rolloverFee,  // 1e18 (DAI)\\n        int fundingFee,    // 1e18 (DAI)\\n        uint closingFee    // 1e18 (DAI)\\n    ) public pure returns(uint){ // 1e18 (DAI)\\n        int value = int(collateral)\\n            + int(collateral) * percentProfit / int(PRECISION) / 100\\n            - int(rolloverFee) - fundingFee;\\n\\n        if(value <= int(collateral) * int(100 - LIQ_THRESHOLD_P) / 100){\\n            return 0;\\n        }\\n\\n        value -= int(closingFee);\\n\\n        return value > 0 ? uint(value) : 0;\\n    }\\n\\n    // Useful getters\\n    function getPairInfos(uint[] memory indices) external view returns(\\n        PairParams[] memory,\\n        PairRolloverFees[] memory,\\n        PairFundingFees[] memory\\n    ){\\n        PairParams[] memory params = new PairParams[](indices.length);\\n        PairRolloverFees[] memory rolloverFees = new PairRolloverFees[](indices.length);\\n        PairFundingFees[] memory fundingFees = new PairFundingFees[](indices.length);\\n\\n        for(uint i = 0; i < indices.length; i++){\\n            uint index = indices[i];\\n\\n            params[i] = pairParams[index];\\n            rolloverFees[i] = pairRolloverFees[index];\\n            fundingFees[i] = pairFundingFees[index];\\n        }\\n\\n        return (params, rolloverFees, fundingFees);\\n    }\\n    function getOnePercentDepthAbove(uint pairIndex) external view returns(uint){\\n        return pairParams[pairIndex].onePercentDepthAbove;\\n    }\\n    function getOnePercentDepthBelow(uint pairIndex) external view returns(uint){\\n        return pairParams[pairIndex].onePercentDepthBelow;\\n    }\\n    function getRolloverFeePerBlockP(uint pairIndex) external view returns(uint){\\n        return pairParams[pairIndex].rolloverFeePerBlockP;\\n    }\\n    function getFundingFeePerBlockP(uint pairIndex) external view returns(uint){\\n        return pairParams[pairIndex].fundingFeePerBlockP;\\n    }\\n    function getAccRolloverFees(uint pairIndex) external view returns(uint){\\n        return pairRolloverFees[pairIndex].accPerCollateral;\\n    }\\n    function getAccRolloverFeesUpdateBlock(uint pairIndex) external view returns(uint){\\n        return pairRolloverFees[pairIndex].lastUpdateBlock;\\n    }\\n    function getAccFundingFeesLong(uint pairIndex) external view returns(int){\\n        return pairFundingFees[pairIndex].accPerOiLong;\\n    }\\n    function getAccFundingFeesShort(uint pairIndex) external view returns(int){\\n        return pairFundingFees[pairIndex].accPerOiShort;\\n    }\\n    function getAccFundingFeesUpdateBlock(uint pairIndex) external view returns(uint){\\n        return pairFundingFees[pairIndex].lastUpdateBlock;\\n    }\\n    function getTradeInitialAccRolloverFeesPerCollateral(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns(uint){\\n        return tradeInitialAccFees[trader][pairIndex][index].rollover;\\n    }\\n    function getTradeInitialAccFundingFeesPerOi(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns(int){\\n        return tradeInitialAccFees[trader][pairIndex][index].funding;\\n    }\\n    function getTradeOpenedAfterUpdate(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns(bool){\\n        return tradeInitialAccFees[trader][pairIndex][index].openedAfterUpdate;\\n    }\\n}\",\"keccak256\":\"0x0c4ac8a8d1c4a151229e8550806ec6576d9f1731548130112c698978c775461f\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface ChainlinkFeedInterfaceV5{\\n    function latestRoundData() external view returns (uint80,int,uint,uint,uint80);\\n}\",\"keccak256\":\"0x4f39b41b3bdadfb7233fac30c60cedfd20d534ba536c0b016818dd01b47728b1\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xe1c4eac213e8cc146ef165a92ff5b652c250d2340d4954b7647eed73e601757f\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0x1aba6c110d3893750103e30bd9556f785887576264ba70aa2c4f719eda7de3c4\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(uint) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosDai(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\",\"keccak256\":\"0x664be7bcc46917987f32350f6bdb4e925679875f828e8aef07f0f14c7a4d43d2\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\\n\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n\\n    function openTrades(address, uint, uint) external view returns (Trade memory);\\n\\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n\\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\",\"keccak256\":\"0xb878c2794b85f554cd41e925a457e789e71b2512fdc0e39ce4552c1194094fab\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x0b1aef35747e180443d65683c29cebff6cc9eaaac364f29f1a619f68b8df9b82\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052620000166402540be400602862000091565b6001553480156200002657600080fd5b50604051620028143803806200281483398101604081905262000049916200005f565b60601b6001600160601b031916608052620000bf565b6000602082840312156200007257600080fd5b81516001600160a01b03811681146200008a57600080fd5b9392505050565b6000816000190483118215151615620000ba57634e487b7160e01b600052601160045260246000fd5b500290565b60805160601c61271a620000fa60003960008181610f910152818161122c015281816116bd0152818161193e01526119eb015261271a6000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80636f6af69711610146578063bf1db1f6116100c3578063ee52e5fe11610087578063ee52e5fe146106de578063f0270f33146106fe578063f696065414610721578063f6c50efe14610734578063fcc37c8714610747578063fe3cfd8c1461075a57600080fd5b8063bf1db1f61461065e578063c22ff7bf14610685578063c2cc670d14610698578063cfc23e9e146106ab578063d0ebdbe7146106cb57600080fd5b80639cf9c9391161010a5780639cf9c939146105c8578063a49e878814610612578063a77e8e2a14610625578063ab21a05c14610638578063b74243ba1461064b57600080fd5b80636f6af697146105735780637884274f146105865780637ea95f321461059957806380f6cfc2146105ac5780639c625e1e146105b557600080fd5b8063338139ad116101df578063481c6a75116101a3578063481c6a751461049c57806358f796bc146104c75780635ed5804e146104da5780636bc84d591461053a5780636bcbe8601461054d5780636ceaca671461056057600080fd5b8063338139ad146103b7578063351533e7146103db5780633df7fd72146103ee57806342dee1ad1461040157806346dbab361461045857600080fd5b806312fdefd91161022657806312fdefd91461031357806321adc48f1461033b5780632b180a7d1461035e5780632d15e4e01461038157806331556d2f146103a457600080fd5b80630dd34f57146102635780630e0052fc1461028b5780630e6bc39a146102bc5780630ea77770146102d157806312b6566e146102f3575b600080fd5b610276610271366004611d28565b61079b565b60405190151581526020015b60405180910390f35b6102ae610299366004612129565b60009081526004602052604090206001015490565b604051908152602001610282565b6102cf6102ca366004611d5d565b6107d5565b005b6102e46102df366004611f0b565b6108ba565b60405161028293929190612333565b6102ae610301366004612129565b60009081526004602052604090205490565b61032661032136600461215b565b610b69565b60408051928352602083019190915201610282565b6102ae610349366004612129565b60009081526003602052604090206001015490565b6102ae61036c366004612129565b60009081526002602052604090206001015490565b6102ae61038f366004612129565b60009081526003602052604090206002015490565b6102cf6103b2366004611f40565b610c17565b6102ae6103c5366004612129565b6000908152600260208190526040909120015490565b6102cf6103e936600461206f565b610cca565b6102cf6103fc36600461222a565b610d9c565b61043861040f366004612129565b600260208190526000918252604090912080546001820154928201546003909201549092919084565b604080519485526020850193909352918301526060820152608001610282565b6102ae610466366004611d28565b6001600160a01b038316600090815260056020908152604080832085845282528083208484529091529020600101549392505050565b6000546104af906001600160a01b031681565b6040516001600160a01b039091168152602001610282565b6102ae6104d5366004611e6b565b610e49565b61051d6104e8366004611d28565b600560209081526000938452604080852082529284528284209052825290208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610282565b6102ae610548366004611ea6565b610eca565b6102ae61055b3660046121a1565b610ef9565b6102ae61056e366004611dff565b610f8d565b6102cf61058136600461200b565b611117565b6102cf610594366004612129565b6111bc565b6103266105a7366004612279565b611222565b6102ae60015481565b6102ae6105c33660046122b6565b61131e565b6105f76105d6366004612129565b60036020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610282565b6102cf61062036600461200b565b611348565b6102ae6106333660046120f7565b6113ed565b6102ae610646366004612129565b61142b565b6102cf610659366004612257565b61149e565b61032661066c366004612129565b6004602052600090815260409020805460019091015482565b6102ae6106933660046121ef565b61155b565b6102cf6106a6366004612257565b6115ff565b6102ae6106b9366004612129565b60009081526002602052604090205490565b6102cf6106d9366004611cee565b6116bb565b6102ae6106ec366004612129565b60009081526003602052604090205490565b6102ae61070c366004612129565b60009081526002602052604090206003015490565b6102cf61072f3660046122b6565b6117e5565b6102ae610742366004611da5565b61186f565b610326610755366004612129565b611909565b6102ae610768366004611d28565b6001600160a01b038316600090815260056020908152604080832085845282528083208484529091529020549392505050565b6001600160a01b0383166000908152600560209081526040808320858452825280832084845290915290206002015460ff165b9392505050565b6107de83611b47565b6001600160a01b0384166000908152600560209081526040808320868452825280832085845290915290206108128461142b565b81558161083057600084815260036020526040902060010154610840565b6000848152600360205260409020545b600182810182905560028301805460ff191690911790558154604080516001600160a01b038916815260208101889052908101869052606081019190915260808101919091527f4e58eed9e01cebfd4256725d6d1ce9fa694faa7ac5312e75af02360f453d048e9060a00160405180910390a15050505050565b60608060606000845167ffffffffffffffff8111156108db576108db6126b6565b60405190808252806020026020018201604052801561093757816020015b6109246040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816108f95790505b5090506000855167ffffffffffffffff811115610956576109566126b6565b60405190808252806020026020018201604052801561099b57816020015b60408051808201909152600080825260208201528152602001906001900390816109745790505b5090506000865167ffffffffffffffff8111156109ba576109ba6126b6565b604051908082528060200260200182016040528015610a0f57816020015b6109fc60405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816109d85790505b50905060005b8751811015610b5b576000888281518110610a3257610a326126a0565b6020026020010151905060026000828152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050858381518110610a9457610a946126a0565b60200260200101819052506004600082815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050848381518110610ae357610ae36126a0565b6020026020010181905250600360008281526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050838381518110610b3c57610b3c6126a0565b6020026020010181905250508080610b5390612659565b915050610a15565b509196909550909350915050565b60008082610b7c57506000905085610c0d565b82670de0b6b3a76400006402540be400610b9760028861254b565b610ba19089612505565b610bab91906125e4565b610bb5919061254b565b610bbf919061254b565b9150600060646402540be400610bd58a866125e4565b610bdf919061254b565b610be9919061254b565b905086610bff57610bfa8189612642565b610c09565b610c098189612505565b9150505b9550959350505050565b6000546001600160a01b03163314610c4a5760405162461bcd60e51b8152600401610c4190612414565b60405180910390fd5b8051825114610c6b5760405162461bcd60e51b8152600401610c41906123ee565b60005b8251811015610cc557610cb3838281518110610c8c57610c8c6126a0565b6020026020010151838381518110610ca657610ca66126a0565b6020026020010151610d9c565b80610cbd81612659565b915050610c6e565b505050565b6000546001600160a01b03163314610cf45760405162461bcd60e51b8152600401610c4190612414565b81518351148015610d06575080518351145b610d225760405162461bcd60e51b8152600401610c41906123ee565b60005b8351811015610d9657610d84848281518110610d4357610d436126a0565b6020026020010151848381518110610d5d57610d5d6126a0565b6020026020010151848481518110610d7757610d776126a0565b60200260200101516117e5565b80610d8e81612659565b915050610d25565b50505050565b6000546001600160a01b03163314610dc65760405162461bcd60e51b8152600401610c4190612414565b610dcf82611baa565b610dd882611b47565b6000828152600260208181526040928390208451815590840151600182015582840151918101919091556060830151600390910155517f901e66575b0aecca6e394d488bfe990ff28995f6da67ef2fe1d6c900b6573a0390610e3d908490849061243a565b60405180910390a15050565b6001600160a01b0384166000908152600560209081526040808320868452825280832085845282528083208151606081018352815481526001820154938101939093526002015460ff161515908201819052610ea9576000915050610ec2565b8051610ebe90610eb88761142b565b8561131e565b9150505b949350505050565b6000610eed85858585610edf8d8d8d8b610e49565b61055b8e8e8e8d8d8d61186f565b98975050505050505050565b600080848684866064610f0d605a856125e4565b610f17919061254b565b610f219190612603565b610f2b9190612603565b610f35908b61255f565b610f3f919061251d565b610f49919061251d565b9050600087610f6157610f5c828a6124c4565b610f6b565b610f6b828a612603565b905060008113610f7c576000610f7e565b805b925050505b9695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe757600080fd5b505afa158015610ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101f9190611d0b565b6001600160a01b0316336001600160a01b0316146110705760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610c41565b61107988611b47565b60006110878a8a8a89610e49565b905060006110998b8b8b8b8b8b61186f565b90506110a8878684848861155b565b604080518c81528a15156020820152908101899052606081018890526080810187905260a0810184905260c081018390529093507f3a484d35e7358ad950e494938ebbac2c1319c2b76d162112f51d66752244dde39060e00160405180910390a1505098975050505050505050565b6000546001600160a01b031633146111415760405162461bcd60e51b8152600401610c4190612414565b80518251146111625760405162461bcd60e51b8152600401610c41906123ee565b60005b8251811015610cc5576111aa838281518110611183576111836126a0565b602002602001015183838151811061119d5761119d6126a0565b602002602001015161149e565b806111b481612659565b915050611165565b6000546001600160a01b031633146111e65760405162461bcd60e51b8152600401610c4190612414565b60018190556040518181527f5ba729b89796f40d260b117b8654dc301b1d9f7ec17a1e378ae31e4c70b6d2c0906020015b60405180910390a150565b60008061131186857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166328daca218989611266576001611269565b60005b6040516001600160e01b031960e085901b168152600481019290925260ff16602482015260440160206040518083038186803b1580156112a857600080fd5b505afa1580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190612142565b86886112fd5760008a815260026020526040902060010154610b69565b60008a815260026020526040902054610b69565b9097909650945050505050565b6000670de0b6b3a7640000826113348686612642565b61133e91906125e4565b610ec2919061254b565b6000546001600160a01b031633146113725760405162461bcd60e51b8152600401610c4190612414565b80518251146113935760405162461bcd60e51b8152600401610c41906123ee565b60005b8251811015610cc5576113db8382815181106113b4576113b46126a0565b60200260200101518383815181106113ce576113ce6126a0565b60200260200101516115ff565b806113e581612659565b915050611396565b6000670de0b6b3a764000082846114048888612603565b61140e919061255f565b611418919061255f565b611422919061251d565b95945050505050565b60008181526004602090815260408083206002928390529083209091015460018201546064916402540be400916114629043612642565b61146c91906125e4565b61147e90670de0b6b3a76400006125e4565b611488919061254b565b611492919061254b565b81546107ce9190612505565b6000546001600160a01b031633146114c85760405162461bcd60e51b8152600401610c4190612414565b63017d78408111156115075760405162461bcd60e51b81526020600482015260086024820152670a89e9ebe90928e960c31b6044820152606401610c41565b61151082611baa565b60008281526002602081815260409283902090910183905581518481529081018390527f048ce436ab4f2632f2aac62af26be3383ebdf5efc9a63f0bbeb6d6c9762d70899101610e3d565b600080838560646402540be4006115728a8c61255f565b61157c919061251d565b611586919061251d565b611590908a6124c4565b61159a9190612603565b6115a49190612603565b905060646115b3605a82612642565b6115bd908961255f565b6115c7919061251d565b81136115d7576000915050611422565b6115e18382612603565b9050600081136115f25760006115f4565b805b979650505050505050565b6000546001600160a01b031633146116295760405162461bcd60e51b8152600401610c4190612414565b629896808111156116675760405162461bcd60e51b81526020600482015260086024820152670a89e9ebe90928e960c31b6044820152606401610c41565b61167082611b47565b60008281526002602090815260409182902060030183905581518481529081018390527fbe762e88e6ff669d272010f163dfb3c6d389b16831c73e10f95860b2e4f152989101610e3d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b15801561171457600080fd5b505afa158015611728573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174c9190611d0b565b6001600160a01b0316336001600160a01b0316146117975760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610c41565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2c1c11af44aa5608f1dca38c00275c30ea091e02417d36e70e9a1538689c433d90602001611217565b6000546001600160a01b0316331461180f5760405162461bcd60e51b8152600401610c4190612414565b6000838152600260209081526040918290208481556001810184905582518681529182018590529181018390527f1daeaff85d4d7cfda495ef83720a04b81df77e38711ca570061e16efa6ffa2759060600160405180910390a150505050565b6001600160a01b0386166000908152600560209081526040808320888452825280832087845282528083208151606081018352815481526001820154938101939093526002015460ff1615159082018190526118cf576000915050610f83565b6000806118db89611909565b915091506118fb8360200151886118f257826118f4565b835b88886113ed565b9a9950505050505050505050565b6000818152600360205260408082208054600182015492516328daca2160e01b815260048101869052602481018590529093907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906328daca219060440160206040518083038186803b15801561198857600080fd5b505afa15801561199c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c09190612142565b6040516328daca2160e01b815260048101879052600160248201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906328daca219060440160206040518083038186803b158015611a2d57600080fd5b505afa158015611a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a659190612142565b9050600060646402540be400600260008a815260200190815260200160002060030154866002015443611a989190612642565b611aa28688612603565b611aac919061255f565b611ab6919061255f565b611ac0919061251d565b611aca919061251d565b90506000831315611aff5782611ae882670de0b6b3a764000061255f565b611af2919061251d565b611afc90876124c4565b95505b6000821315611b3e5781611b1b82670de0b6b3a764000061255f565b611b279060001961255f565b611b31919061251d565b611b3b90866124c4565b94505b50505050915091565b6000818152600360205260409020611b5e82611909565b600183018190558183554360028401556040805185815260208101939093528201527fc08ace100a8e3b7186ad5fcb68a0b9e7e0bd60aa466cdba34932fa0513353c6490606001610e3d565b6000818152600460205260409020611bc18261142b565b8082554360018301556040805184815260208101929092527f66ae41afb9d1762b0b5f1a431a9e5c767128a1bec9ecb20e1ef9dba7dc3663d69101610e3d565b600082601f830112611c1257600080fd5b81356020611c27611c22836124a0565b61246f565b80838252828201915082860187848660051b8901011115611c4757600080fd5b60005b85811015611c6657813584529284019290840190600101611c4a565b5090979650505050505050565b80358015158114611c8357600080fd5b919050565b600060808284031215611c9a57600080fd5b6040516080810181811067ffffffffffffffff82111715611cbd57611cbd6126b6565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600060208284031215611d0057600080fd5b81356107ce816126cc565b600060208284031215611d1d57600080fd5b81516107ce816126cc565b600080600060608486031215611d3d57600080fd5b8335611d48816126cc565b95602085013595506040909401359392505050565b60008060008060808587031215611d7357600080fd5b8435611d7e816126cc565b93506020850135925060408501359150611d9a60608601611c73565b905092959194509250565b60008060008060008060c08789031215611dbe57600080fd5b8635611dc9816126cc565b95506020870135945060408701359350611de560608801611c73565b92506080870135915060a087013590509295509295509295565b600080600080600080600080610100898b031215611e1c57600080fd5b8835611e27816126cc565b97506020890135965060408901359550611e4360608a01611c73565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b60008060008060808587031215611e8157600080fd5b8435611e8c816126cc565b966020860135965060408601359560600135945092505050565b600080600080600080600060e0888a031215611ec157600080fd5b8735611ecc816126cc565b9650602088013595506040880135945060608801359350611eef60808901611c73565b925060a0880135915060c0880135905092959891949750929550565b600060208284031215611f1d57600080fd5b813567ffffffffffffffff811115611f3457600080fd5b610ec284828501611c01565b60008060408385031215611f5357600080fd5b823567ffffffffffffffff80821115611f6b57600080fd5b611f7786838701611c01565b9350602091508185013581811115611f8e57600080fd5b85019050601f81018613611fa157600080fd5b8035611faf611c22826124a0565b80828252848201915084840189868560071b8701011115611fcf57600080fd5b600094505b83851015611ffb57611fe68a82611c88565b83526001949094019391850191608001611fd4565b5080955050505050509250929050565b6000806040838503121561201e57600080fd5b823567ffffffffffffffff8082111561203657600080fd5b61204286838701611c01565b9350602085013591508082111561205857600080fd5b5061206585828601611c01565b9150509250929050565b60008060006060848603121561208457600080fd5b833567ffffffffffffffff8082111561209c57600080fd5b6120a887838801611c01565b945060208601359150808211156120be57600080fd5b6120ca87838801611c01565b935060408601359150808211156120e057600080fd5b506120ed86828701611c01565b9150509250925092565b6000806000806080858703121561210d57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561213b57600080fd5b5035919050565b60006020828403121561215457600080fd5b5051919050565b600080600080600060a0868803121561217357600080fd5b8535945061218360208701611c73565b94979496505050506040830135926060810135926080909101359150565b60008060008060008060c087890312156121ba57600080fd5b863595506121ca60208801611c73565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600080600060a0868803121561220757600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060a0838503121561223d57600080fd5b8235915061224e8460208501611c88565b90509250929050565b6000806040838503121561226a57600080fd5b50508035926020909101359150565b6000806000806080858703121561228f57600080fd5b84359350602085013592506122a660408601611c73565b9396929550929360600135925050565b6000806000606084860312156122cb57600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b8381101561232857815180518852838101518489015260409081015190880152606090960195908201906001016122f6565b509495945050505050565b60608082528451908201819052600090608090818401906020808901855b8381101561239557612385858351805182526020810151602083015260408101516040830152606081015160608301525050565b9385019390820190600101612351565b5050858303818701528751808452928101935087810192915060005b828110156123d85783518051865282015182860152604090940193928101926001016123b1565b505050508281036040840152610ebe81856122e2565b6020808252600c908201526b0aea49e9c8ebe988a9c8ea8960a31b604082015260600190565b6020808252600c908201526b4d414e414745525f4f4e4c5960a01b604082015260600190565b82815260a081016107ce6020830184805182526020810151602083015260408101516040830152606081015160608301525050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612498576124986126b6565b604052919050565b600067ffffffffffffffff8211156124ba576124ba6126b6565b5060051b60200190565b600080821280156001600160ff1b03849003851316156124e6576124e6612674565b600160ff1b83900384128116156124ff576124ff612674565b50500190565b6000821982111561251857612518612674565b500190565b60008261252c5761252c61268a565b600160ff1b82146000198414161561254657612546612674565b500590565b60008261255a5761255a61268a565b500490565b60006001600160ff1b038184138284138082168684048611161561258557612585612674565b600160ff1b60008712828116878305891216156125a4576125a4612674565b600087129250878205871284841616156125c0576125c0612674565b878505871281841616156125d6576125d6612674565b505050929093029392505050565b60008160001904831182151516156125fe576125fe612674565b500290565b60008083128015600160ff1b85018412161561262157612621612674565b6001600160ff1b038401831381161561263c5761263c612674565b50500390565b60008282101561265457612654612674565b500390565b600060001982141561266d5761266d612674565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146126e157600080fd5b5056fea2646970667358221220ed6073e69d07579f96a0368ba4d5acdbef43919fb23e3bc58f636309375e274864736f6c63430008070033",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1788,
        "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
        "label": "manager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1799,
        "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
        "label": "maxNegativePnlOnOpenP",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1813,
        "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
        "label": "pairParams",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(PairParams)1808_storage)"
      },
      {
        "astId": 1825,
        "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
        "label": "pairFundingFees",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(PairFundingFees)1820_storage)"
      },
      {
        "astId": 1835,
        "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
        "label": "pairRolloverFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(PairRolloverFees)1830_storage)"
      },
      {
        "astId": 1851,
        "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
        "label": "tradeInitialAccFees",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInitialAccFees)1842_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInitialAccFees)1842_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct GNSPairInfosV6_1.TradeInitialAccFees)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInitialAccFees)1842_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInitialAccFees)1842_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct GNSPairInfosV6_1.TradeInitialAccFees))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TradeInitialAccFees)1842_storage)"
      },
      "t_mapping(t_uint256,t_struct(PairFundingFees)1820_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSPairInfosV6_1.PairFundingFees)",
        "numberOfBytes": "32",
        "value": "t_struct(PairFundingFees)1820_storage"
      },
      "t_mapping(t_uint256,t_struct(PairParams)1808_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSPairInfosV6_1.PairParams)",
        "numberOfBytes": "32",
        "value": "t_struct(PairParams)1808_storage"
      },
      "t_mapping(t_uint256,t_struct(PairRolloverFees)1830_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSPairInfosV6_1.PairRolloverFees)",
        "numberOfBytes": "32",
        "value": "t_struct(PairRolloverFees)1830_storage"
      },
      "t_mapping(t_uint256,t_struct(TradeInitialAccFees)1842_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSPairInfosV6_1.TradeInitialAccFees)",
        "numberOfBytes": "32",
        "value": "t_struct(TradeInitialAccFees)1842_storage"
      },
      "t_struct(PairFundingFees)1820_storage": {
        "encoding": "inplace",
        "label": "struct GNSPairInfosV6_1.PairFundingFees",
        "members": [
          {
            "astId": 1815,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "accPerOiLong",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 1817,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "accPerOiShort",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 1819,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "lastUpdateBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PairParams)1808_storage": {
        "encoding": "inplace",
        "label": "struct GNSPairInfosV6_1.PairParams",
        "members": [
          {
            "astId": 1801,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "onePercentDepthAbove",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1803,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "onePercentDepthBelow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1805,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "rolloverFeePerBlockP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1807,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "fundingFeePerBlockP",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PairRolloverFees)1830_storage": {
        "encoding": "inplace",
        "label": "struct GNSPairInfosV6_1.PairRolloverFees",
        "members": [
          {
            "astId": 1827,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "accPerCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1829,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "lastUpdateBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TradeInitialAccFees)1842_storage": {
        "encoding": "inplace",
        "label": "struct GNSPairInfosV6_1.TradeInitialAccFees",
        "members": [
          {
            "astId": 1837,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "rollover",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1839,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "funding",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 1841,
            "contract": "contracts/contracts/GNSPairInfosV6_1.sol:GNSPairInfosV6_1",
            "label": "openedAfterUpdate",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}