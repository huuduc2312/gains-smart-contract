{
  "language": "Solidity",
  "sources": {
    "contracts/contracts/GFarmTradingStorageV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"../interfaces/TokenInterfaceV5.sol\";\nimport \"../interfaces/AggregatorInterfaceV5.sol\";\nimport \"../interfaces/PoolInterfaceV5.sol\";\nimport \"../interfaces/PausableInterfaceV5.sol\";\nimport \"../interfaces/NftInterfaceV5.sol\";\n\ncontract GFarmTradingStorageV5 {\n\n    // Constants\n    uint public constant PRECISION = 1e10;\n    bytes32 public constant MINTER_ROLE = 0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6;\n    TokenInterfaceV5 public constant dai = TokenInterfaceV5(0x04B2A6E51272c82932ecaB31A5Ab5aC32AE168C3);\n    TokenInterfaceV5 public constant linkErc677 = TokenInterfaceV5(0x326C977E6efc84E512bB9C30f76E30c160eD06FB);\n\n    // Contracts (updatable)\n    AggregatorInterfaceV5 public priceAggregator;\n    PoolInterfaceV5 public pool;\n    PausableInterfaceV5 public trading;\n    PausableInterfaceV5 public callbacks;\n    TokenInterfaceV5 public token = TokenInterfaceV5(0x469Cd2AE37BC3d579eE2c4F0B5e31eA212Fa405E);\n    NftInterfaceV5[5] public nfts = [\n        NftInterfaceV5(0xF9A4c522E327935BD1F5a338c121E14e4cc1f898),\n        NftInterfaceV5(0x77cd42B925e1A82f41d852D6BE727CFc88fddBbC),\n        NftInterfaceV5(0x3378AD81D09DE23725Ee9B9270635c97Ed601921),\n        NftInterfaceV5(0x02e2c5825C1a3b69C0417706DbE1327C2Af3e6C2),\n        NftInterfaceV5(0x2D266A94469d05C9e06D52A4D0d9C23b157767c2)\n    ];\n    address public vault;\n    address public tokenDaiRouter;\n\n    // Trading variables\n    uint public maxTradesPerPair = 3;\n    uint public maxTradesPerBlock = 5;\n    uint public maxPendingMarketOrders = 5;\n    uint public maxGainP = 900;                          // %\n    uint public maxSlP = 80;                             // %\n    uint public defaultLeverageUnlocked = 50;            // x\n    uint public nftSuccessTimelock = 50;                 // 50 blocks\n    uint[5] public spreadReductionsP = [15,20,25,30,35]; // %\n\n    // Gov & dev addresses (updatable)\n    address public gov = 0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA;\n    address public dev = 0xd39A38bD2D2d552f3908ff698a5530aa397fb92d;\n\n    // Gov & dev fees\n    uint public devFeesToken;   // 1e18\n    uint public devFeesDai;     // 1e18\n    uint public govFeesToken;   // 1e18\n    uint public govFeesDai;     // 1e18\n\n    // Stats\n    uint public tokensBurned;   // 1e18\n    uint public tokensMinted;   // 1e18\n    uint public nftRewards;     // 1e18\n\n    // Enums\n    enum LimitOrder { TP, SL, LIQ, OPEN }\n\n    // Structs\n    struct Trader{\n        uint leverageUnlocked;\n        address referral;\n        uint referralRewardsTotal;  // 1e18\n    }\n    struct Trade{\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken;       // 1e18\n        uint positionSizeDai;       // 1e18\n        uint openPrice;             // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp;                    // PRECISION\n        uint sl;                    // PRECISION\n    }\n    struct TradeInfo{\n        uint tokenId;\n        uint tokenPriceDai;         // PRECISION\n        uint openInterestDai;       // 1e18\n        uint tpLastUpdated;\n        uint slLastUpdated;\n        bool beingMarketClosed;\n    }\n    struct OpenLimitOrder{\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint positionSize;          // 1e18 (DAI or GFARM2)\n        uint spreadReductionP;\n        bool buy;\n        uint leverage;\n        uint tp;                    // PRECISION (%)\n        uint sl;                    // PRECISION (%)\n        uint minPrice;              // PRECISION\n        uint maxPrice;              // PRECISION\n        uint block;\n        uint tokenId;               // index in supportedTokens\n    }\n    struct PendingMarketOrder{\n        Trade trade;\n        uint block;\n        uint wantedPrice;           // PRECISION\n        uint slippageP;             // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId;               // index in supportedTokens\n    }\n    struct PendingNftOrder{\n        address nftHolder;\n        uint nftId;\n        address trader;\n        uint pairIndex;\n        uint index;\n        LimitOrder orderType;\n    }\n\n    // Supported tokens to open trades with\n    address[] public supportedTokens;\n\n    // User info mapping\n    mapping(address => Trader) public traders;\n\n    // Trades mappings\n    mapping(address => mapping(uint => mapping(uint => Trade))) public openTrades;\n    mapping(address => mapping(uint => mapping(uint => TradeInfo))) public openTradesInfo;\n    mapping(address => mapping(uint => uint)) public openTradesCount;\n\n    // Limit orders mappings\n    mapping(address => mapping(uint => mapping(uint => uint))) public openLimitOrderIds;\n    mapping(address => mapping(uint => uint)) public openLimitOrdersCount;\n    OpenLimitOrder[] public openLimitOrders;\n\n    // Pending orders mappings\n    mapping(uint => PendingMarketOrder) public reqID_pendingMarketOrder;\n    mapping(uint => PendingNftOrder) public reqID_pendingNftOrder;\n    mapping(address => uint[]) public pendingOrderIds;\n    mapping(address => mapping(uint => uint)) public pendingMarketOpenCount;\n    mapping(address => mapping(uint => uint)) public pendingMarketCloseCount;\n\n    // List of open trades & limit orders\n    mapping(uint => address[]) public pairTraders;\n    mapping(address => mapping(uint => uint)) public pairTradersId;\n\n    // Current and max open interests for each pair\n    mapping(uint => uint[3]) public openInterestDai; // 1e18 [long,short,max]\n\n    // Restrictions & Timelocks\n    mapping(uint => uint) public tradesPerBlock;\n    mapping(uint => uint) public nftLastSuccess;\n\n    // List of allowed contracts => can update storage + mint/burn tokens\n    mapping(address => bool) public isTradingContract;\n\n    // Events\n    event SupportedTokenAdded(address a);\n    event TradingContractAdded(address a);\n    event TradingContractRemoved(address a);\n    event AddressUpdated(string name, address a);\n    event NftsUpdated(NftInterfaceV5[5] nfts);\n    event NumberUpdated(string name,uint value);\n    event NumberUpdatedPair(string name,uint pairIndex,uint value);\n    event SpreadReductionsUpdated(uint[5]);\n\n    constructor() { }\n\n    // Modifiers\n    modifier onlyGov(){ require(msg.sender == gov); _; }\n    modifier onlyTrading(){ require(isTradingContract[msg.sender] && token.hasRole(MINTER_ROLE, msg.sender)); _; }\n\n    // Manage addresses\n    function setGov(address _gov) external onlyGov{\n        require(_gov != address(0));\n        gov = _gov;\n        emit AddressUpdated(\"gov\", _gov);\n    }\n    function setDev(address _dev) external onlyGov{\n        require(_dev != address(0));\n        dev = _dev;\n        emit AddressUpdated(\"dev\", _dev);\n    }\n    function updateToken(TokenInterfaceV5 _newToken) external onlyGov{\n        require(trading.isPaused() && callbacks.isPaused(), \"NOT_PAUSED\");\n        require(address(_newToken) != address(0));\n        token = _newToken;\n        emit AddressUpdated(\"token\", address(_newToken));\n    }\n    function updateNfts(NftInterfaceV5[5] memory _nfts) external onlyGov{\n        require(address(_nfts[0]) != address(0));\n        nfts = _nfts;\n        emit NftsUpdated(_nfts);\n    }\n    // Trading + callbacks contracts\n    function addTradingContract(address _trading) external onlyGov{\n        require(token.hasRole(MINTER_ROLE, _trading), \"NOT_MINTER\");\n        require(_trading != address(0));\n        isTradingContract[_trading] = true;\n        emit TradingContractAdded(_trading);\n    }\n    function removeTradingContract(address _trading) external onlyGov{\n        require(_trading != address(0));\n        isTradingContract[_trading] = false;\n        emit TradingContractRemoved(_trading);\n    }\n    function addSupportedToken(address _token) external onlyGov{\n        require(_token != address(0));\n        supportedTokens.push(_token);\n        emit SupportedTokenAdded(_token);\n    }\n    function setPriceAggregator(address _aggregator) external onlyGov{\n        require(_aggregator != address(0));\n        priceAggregator = AggregatorInterfaceV5(_aggregator);\n        emit AddressUpdated(\"priceAggregator\", _aggregator);\n    }\n    function setPool(address _pool) external onlyGov{\n        require(_pool != address(0));\n        pool = PoolInterfaceV5(_pool);\n        emit AddressUpdated(\"pool\", _pool);\n    }\n    function setVault(address _vault) external onlyGov{\n        require(_vault != address(0));\n        vault = _vault;\n        emit AddressUpdated(\"vault\", _vault);\n    }\n    function setTrading(address _trading) external onlyGov{\n        require(_trading != address(0));\n        trading = PausableInterfaceV5(_trading);\n        emit AddressUpdated(\"trading\", _trading);\n    }\n    function setCallbacks(address _callbacks) external onlyGov{\n        require(_callbacks != address(0));\n        callbacks = PausableInterfaceV5(_callbacks);\n        emit AddressUpdated(\"callbacks\", _callbacks);\n    }\n    function setTokenDaiRouter(address _tokenDaiRouter) external onlyGov{\n        require(_tokenDaiRouter != address(0));\n        tokenDaiRouter = _tokenDaiRouter;\n        emit AddressUpdated(\"tokenDaiRouter\", _tokenDaiRouter);\n    }\n\n    // Manage trading variables\n    function setMaxTradesPerBlock(uint _maxTradesPerBlock) external onlyGov{\n        require(_maxTradesPerBlock > 0);\n        maxTradesPerBlock = _maxTradesPerBlock;\n        emit NumberUpdated(\"maxTradesPerBlock\", _maxTradesPerBlock);\n    }\n    function setMaxTradesPerPair(uint _maxTradesPerPair) external onlyGov{\n        require(_maxTradesPerPair > 0);\n        maxTradesPerPair = _maxTradesPerPair;\n        emit NumberUpdated(\"maxTradesPerPair\", _maxTradesPerPair);\n    }\n    function setMaxPendingMarketOrders(uint _maxPendingMarketOrders) external onlyGov{\n        require(_maxPendingMarketOrders > 0);\n        maxPendingMarketOrders = _maxPendingMarketOrders;\n        emit NumberUpdated(\"maxPendingMarketOrders\", _maxPendingMarketOrders);\n    }\n    function setMaxGainP(uint _max) external onlyGov{\n        require(_max >= 300);\n        maxGainP = _max;\n        emit NumberUpdated(\"maxGainP\", _max);\n    }\n    function setDefaultLeverageUnlocked(uint _lev) external onlyGov{\n        require(_lev > 0);\n        defaultLeverageUnlocked = _lev;\n        emit NumberUpdated(\"defaultLeverageUnlocked\", _lev);\n    }\n    function setMaxSlP(uint _max) external onlyGov{\n        require(_max >= 50);\n        maxSlP = _max;\n        emit NumberUpdated(\"maxSlP\", _max);\n    }\n    function setNftSuccessTimelock(uint _blocks) external onlyGov{\n        nftSuccessTimelock = _blocks;\n        emit NumberUpdated(\"nftSuccessTimelock\", _blocks);\n    }\n    function setSpreadReductionsP(uint[5] calldata _r) external onlyGov{\n        require(_r[0] > 0 && _r[1] > _r[0] && _r[2] > _r[1] && _r[3] > _r[2] && _r[4] > _r[3]);\n        spreadReductionsP = _r;\n        emit SpreadReductionsUpdated(_r);\n    }\n    function setMaxOpenInterestDai(uint _pairIndex, uint _newMaxOpenInterest) external onlyGov{\n        // Can set max open interest to 0 to pause trading on this pair only\n        openInterestDai[_pairIndex][2] = _newMaxOpenInterest;\n        emit NumberUpdatedPair(\"maxOpenInterestDai\", _pairIndex, _newMaxOpenInterest);\n    }\n\n    // Manage stored trades\n    function storeTrade(Trade memory _trade, TradeInfo memory _tradeInfo) external onlyTrading{\n        _trade.index = firstEmptyTradeIndex(_trade.trader, _trade.pairIndex);\n        openTrades[_trade.trader][_trade.pairIndex][_trade.index] = _trade;\n\n        openTradesCount[_trade.trader][_trade.pairIndex]++;\n        tradesPerBlock[block.number]++;\n\n        if(openTradesCount[_trade.trader][_trade.pairIndex] == 1){\n            pairTradersId[_trade.trader][_trade.pairIndex] = pairTraders[_trade.pairIndex].length;\n            pairTraders[_trade.pairIndex].push(_trade.trader); \n        }\n\n        _tradeInfo.beingMarketClosed = false;\n        openTradesInfo[_trade.trader][_trade.pairIndex][_trade.index] = _tradeInfo;\n\n        updateOpenInterestDai(_trade.pairIndex, _tradeInfo.openInterestDai, true, _trade.buy);\n    }\n    function unregisterTrade(address trader, uint pairIndex, uint index) external onlyTrading{\n        Trade storage t = openTrades[trader][pairIndex][index];\n        TradeInfo storage i = openTradesInfo[trader][pairIndex][index];\n        if(t.leverage == 0){ return; }\n\n        updateOpenInterestDai(pairIndex, i.openInterestDai, false, t.buy);\n\n        if(openTradesCount[trader][pairIndex] == 1){\n            uint _pairTradersId = pairTradersId[trader][pairIndex];\n            address[] storage p = pairTraders[pairIndex];\n\n            p[_pairTradersId] = p[p.length-1];\n            pairTradersId[p[_pairTradersId]][pairIndex] = _pairTradersId;\n            \n            delete pairTradersId[trader][pairIndex];\n            p.pop();\n        }\n\n        delete openTrades[trader][pairIndex][index];\n        delete openTradesInfo[trader][pairIndex][index];\n\n        openTradesCount[trader][pairIndex]--;\n        tradesPerBlock[block.number]++;\n    }\n\n    // Manage pending market orders\n    function storePendingMarketOrder(PendingMarketOrder memory _order, uint _id, bool _open) external onlyTrading{\n        pendingOrderIds[_order.trade.trader].push(_id);\n\n        reqID_pendingMarketOrder[_id] = _order;\n        reqID_pendingMarketOrder[_id].block = block.number;\n        \n        if(_open){\n            pendingMarketOpenCount[_order.trade.trader][_order.trade.pairIndex]++;\n        }else{\n            pendingMarketCloseCount[_order.trade.trader][_order.trade.pairIndex]++;\n            openTradesInfo[_order.trade.trader][_order.trade.pairIndex][_order.trade.index].beingMarketClosed = true;\n        }\n    }\n    function unregisterPendingMarketOrder(uint _id, bool _open) external onlyTrading{\n        PendingMarketOrder memory _order = reqID_pendingMarketOrder[_id];\n        uint[] storage orderIds = pendingOrderIds[_order.trade.trader];\n\n        for(uint i = 0; i < orderIds.length; i++){\n            if(orderIds[i] == _id){\n                if(_open){ \n                    pendingMarketOpenCount[_order.trade.trader][_order.trade.pairIndex]--;\n                }else{\n                    pendingMarketCloseCount[_order.trade.trader][_order.trade.pairIndex]--;\n                    openTradesInfo[_order.trade.trader][_order.trade.pairIndex][_order.trade.index].beingMarketClosed = false;\n                }\n\n                orderIds[i] = orderIds[orderIds.length-1];\n                orderIds.pop();\n\n                delete reqID_pendingMarketOrder[_id];\n                return;\n            }\n        }\n    }\n\n    // Manage open interest\n    function updateOpenInterestDai(uint _pairIndex, uint _leveragedPosDai, bool _open, bool _long) private{\n        uint index = _long ? 0 : 1;\n        uint[3] storage o = openInterestDai[_pairIndex];\n        o[index] = _open ? o[index] + _leveragedPosDai : o[index] - _leveragedPosDai;\n    }\n\n    // Manage open limit orders\n    function storeOpenLimitOrder(OpenLimitOrder memory o) external onlyTrading{\n        o.index = firstEmptyOpenLimitIndex(o.trader, o.pairIndex);\n        o.block = block.number;\n        openLimitOrders.push(o);\n        openLimitOrderIds[o.trader][o.pairIndex][o.index] = openLimitOrders.length-1;\n        openLimitOrdersCount[o.trader][o.pairIndex]++;\n    }\n    function updateOpenLimitOrder(OpenLimitOrder calldata _o) external onlyTrading{\n        if(!hasOpenLimitOrder(_o.trader, _o.pairIndex, _o.index)){ return; }\n        OpenLimitOrder storage o = openLimitOrders[openLimitOrderIds[_o.trader][_o.pairIndex][_o.index]];\n        o.positionSize = _o.positionSize;\n        o.buy = _o.buy;\n        o.leverage = _o.leverage;\n        o.tp = _o.tp;\n        o.sl = _o.sl;\n        o.minPrice = _o.minPrice;\n        o.maxPrice = _o.maxPrice;\n        o.block = block.number;\n    }\n    function unregisterOpenLimitOrder(address _trader, uint _pairIndex, uint _index) external onlyTrading{\n        if(!hasOpenLimitOrder(_trader, _pairIndex, _index)){ return; }\n\n        // Copy last order to deleted order => update id of this limit order\n        uint id = openLimitOrderIds[_trader][_pairIndex][_index];\n        openLimitOrders[id] = openLimitOrders[openLimitOrders.length-1];\n        openLimitOrderIds[openLimitOrders[id].trader][openLimitOrders[id].pairIndex][openLimitOrders[id].index] = id;\n\n        // Remove\n        delete openLimitOrderIds[_trader][_pairIndex][_index];\n        openLimitOrders.pop();\n\n        openLimitOrdersCount[_trader][_pairIndex]--;\n    }\n\n    // Manage NFT orders\n    function storePendingNftOrder(PendingNftOrder memory _nftOrder, uint _orderId) external onlyTrading{\n        reqID_pendingNftOrder[_orderId] = _nftOrder;\n    }\n    function unregisterPendingNftOrder(uint _order) external onlyTrading{\n        delete reqID_pendingNftOrder[_order];\n    }\n\n    // Manage open trade\n    function updateSl(address _trader, uint _pairIndex, uint _index, uint _newSl) external onlyTrading{\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\n        if(t.leverage == 0){ return; }\n        t.sl = _newSl;\n        i.slLastUpdated = block.number;\n    }\n    function updateTp(address _trader, uint _pairIndex, uint _index, uint _newTp) external onlyTrading{\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\n        if(t.leverage == 0){ return; }\n        t.tp = _newTp;\n        i.tpLastUpdated = block.number;\n    }\n    function updateTrade(Trade memory _t) external onlyTrading{ // useful when partial adding/closing\n        Trade storage t = openTrades[_t.trader][_t.pairIndex][_t.index];\n        if(t.leverage == 0){ return; }\n        t.initialPosToken = _t.initialPosToken;\n        t.positionSizeDai = _t.positionSizeDai;\n        t.openPrice = _t.openPrice;\n        t.leverage = _t.leverage;\n    }\n\n    // Manage referrals\n    function storeReferral(address _trader, address _referral) external onlyTrading{\n        Trader storage trader = traders[_trader];\n        trader.referral = _referral != address(0) && trader.referral == address(0) && _referral != _trader \n                        ? _referral : trader.referral;\n    }\n    function increaseReferralRewards(address _referral, uint _amount) external onlyTrading{ \n        traders[_referral].referralRewardsTotal += _amount; \n    }\n\n    // Manage rewards\n    function distributeLpRewards(uint _amount) external onlyTrading{ pool.increaseAccTokensPerLp(_amount); }\n    function increaseNftRewards(uint _nftId, uint _amount) external onlyTrading{\n        nftLastSuccess[_nftId] = block.number; \n        nftRewards += _amount; \n    }\n\n    // Unlock next leverage\n    function setLeverageUnlocked(address _trader, uint _newLeverage) external onlyTrading{\n        traders[_trader].leverageUnlocked = _newLeverage;\n    }\n\n    // Manage dev & gov fees\n    function handleDevGovFees(uint _pairIndex, uint _leveragedPositionSize, bool _dai, bool _fullFee) external onlyTrading returns(uint fee){\n        fee = _leveragedPositionSize * priceAggregator.openFeeP(_pairIndex) / PRECISION / 100;\n        if(!_fullFee){ fee /= 2; }\n\n        if(_dai){\n            govFeesDai += fee;\n            devFeesDai += fee;\n        }else{\n            govFeesToken += fee;\n            devFeesToken += fee;\n        }\n\n        fee *= 2;\n    }\n    function claimFees() external onlyGov{\n        token.mint(dev, devFeesToken);\n        token.mint(gov, govFeesToken);\n\n        tokensMinted += devFeesToken + govFeesToken;\n\n        dai.transfer(gov, govFeesDai);\n        dai.transfer(dev, devFeesDai);\n\n        devFeesToken = 0;\n        govFeesToken = 0;\n        devFeesDai = 0;\n        govFeesDai = 0;\n    }\n\n    // Manage tokens\n    function handleTokens(address _a, uint _amount, bool _mint) external onlyTrading{ \n        if(_mint){ token.mint(_a, _amount); tokensMinted += _amount; } \n        else { token.burn(_a, _amount); tokensBurned += _amount; } \n    }\n    function transferDai(address _from, address _to, uint _amount) external onlyTrading{ \n        if(_from == address(this)){\n            dai.transfer(_to, _amount); \n        }else{\n            dai.transferFrom(_from, _to, _amount); \n        }\n    }\n    function transferLinkToAggregator(address _from, uint _pairIndex, uint _leveragedPosDai) external onlyTrading{ \n        linkErc677.transferFrom(_from, address(priceAggregator), priceAggregator.linkFee(_pairIndex, _leveragedPosDai)); \n    }\n\n    // View utils functions\n    function firstEmptyTradeIndex(address trader, uint pairIndex) public view returns(uint index){\n        for(uint i = 0; i < maxTradesPerPair; i++){\n            if(openTrades[trader][pairIndex][i].leverage == 0){ index = i; break; }\n        }\n    }\n    function firstEmptyOpenLimitIndex(address trader, uint pairIndex) public view returns(uint index){\n        for(uint i = 0; i < maxTradesPerPair; i++){\n            if(!hasOpenLimitOrder(trader, pairIndex, i)){ index = i; break; }\n        }\n    }\n    function hasOpenLimitOrder(address trader, uint pairIndex, uint index) public view returns(bool){\n        if(openLimitOrders.length == 0){ return false; }\n        OpenLimitOrder storage o = openLimitOrders[openLimitOrderIds[trader][pairIndex][index]];\n        return o.trader == trader && o.pairIndex == pairIndex && o.index == index;\n    }\n\n    // Additional getters\n    function getReferral(address _trader) external view returns(address){ \n        return traders[_trader].referral; \n    }\n    function getLeverageUnlocked(address _trader) external view returns(uint){ \n        return traders[_trader].leverageUnlocked; \n    }\n    function pairTradersArray(uint _pairIndex) external view returns(address[] memory){ \n        return pairTraders[_pairIndex]; \n    }\n    function getPendingOrderIds(address _trader) external view returns(uint[] memory){ \n        return pendingOrderIds[_trader]; \n    }\n    function pendingOrderIdsCount(address _trader) external view returns(uint){ \n        return pendingOrderIds[_trader].length; \n    }\n    function getOpenLimitOrder(\n        address _trader, \n        uint _pairIndex,\n        uint _index\n    ) external view returns(OpenLimitOrder memory){ \n        require(hasOpenLimitOrder(_trader, _pairIndex, _index), \"23\");\n        return openLimitOrders[openLimitOrderIds[_trader][_pairIndex][_index]]; \n    }\n    function getOpenLimitOrders() external view returns(OpenLimitOrder[] memory){ \n        return openLimitOrders; \n    }\n    function getSupportedTokens() external view returns(address[] memory){ \n        return supportedTokens; \n    }\n    function getSpreadReductionsArray() external view returns(uint[5] memory){\n        return spreadReductionsP;\n    }\n}"
    },
    "contracts/contracts/GNSBorrowingFeesV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"../libraries/Initializable.sol\";\n\nimport \"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\";\nimport \"../interfaces/StorageInterfaceV5.sol\";\nimport \"../interfaces/GNSPairInfosInterfaceV6.sol\";\nimport \"../libraries/ChainUtils.sol\";\n\ncontract GNSBorrowingFeesV6_4 is Initializable, GNSBorrowingFeesInterfaceV6_4 {\n    // Constants\n    uint constant P_1 = 1e10;\n    uint constant P_2 = 1e40;\n\n    // Addresses\n    StorageInterfaceV5 public storageT;\n    GNSPairInfosInterfaceV6 public pairInfos;\n\n    // State\n    mapping(uint16 => Group) public groups;\n    mapping(uint => Pair) public pairs;\n    mapping(address => mapping(uint => mapping(uint => InitialAccFees))) public initialAccFees;\n    mapping(uint => PairOi) public pairOis;\n    mapping(uint => uint48) public groupFeeExponents;\n\n    function initialize(StorageInterfaceV5 _storageT, GNSPairInfosInterfaceV6 _pairInfos) external initializer {\n        require(address(_storageT) != address(0) && address(_pairInfos) != address(0), \"WRONG_PARAMS\");\n\n        storageT = _storageT;\n        pairInfos = _pairInfos;\n    }\n\n    // Modifiers\n    modifier onlyManager() {\n        require(msg.sender == pairInfos.manager(), \"MANAGER_ONLY\");\n        _;\n    }\n\n    modifier onlyCallbacks() {\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Manage pair params\n    function setPairParams(uint pairIndex, PairParams calldata value) external onlyManager {\n        _setPairParams(pairIndex, value);\n    }\n\n    function setPairParamsArray(uint[] calldata indices, PairParams[] calldata values) external onlyManager {\n        uint len = indices.length;\n        require(len == values.length, \"WRONG_LENGTH\");\n\n        for (uint i; i < len; ) {\n            _setPairParams(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setPairParams(uint pairIndex, PairParams calldata value) private {\n        require(value.feeExponent >= 1 && value.feeExponent <= 3, \"WRONG_EXPONENT\");\n\n        Pair storage p = pairs[pairIndex];\n\n        uint16 prevGroupIndex = getPairGroupIndex(pairIndex);\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        _setPairPendingAccFees(pairIndex, currentBlock);\n\n        if (value.groupIndex != prevGroupIndex) {\n            _setGroupPendingAccFees(prevGroupIndex, currentBlock);\n            _setGroupPendingAccFees(value.groupIndex, currentBlock);\n\n            (uint oiLong, uint oiShort) = getPairOpenInterestDai(pairIndex);\n\n            // Only remove OI from old group if old group is not 0\n            _setGroupOi(prevGroupIndex, true, false, oiLong);\n            _setGroupOi(prevGroupIndex, false, false, oiShort);\n\n            // Add OI to new group if it's not group 0 (even if old group is 0)\n            // So when we assign a pair to a group, it takes into account its OI\n            // And group 0 OI will always be 0 but it doesn't matter since it's not used\n            _setGroupOi(value.groupIndex, true, true, oiLong);\n            _setGroupOi(value.groupIndex, false, true, oiShort);\n\n            Group memory newGroup = groups[value.groupIndex];\n            Group memory prevGroup = groups[prevGroupIndex];\n\n            p.groups.push(\n                PairGroup(\n                    value.groupIndex,\n                    ChainUtils.getUint48BlockNumber(currentBlock),\n                    newGroup.accFeeLong,\n                    newGroup.accFeeShort,\n                    prevGroup.accFeeLong,\n                    prevGroup.accFeeShort,\n                    p.accFeeLong,\n                    p.accFeeShort,\n                    0 // placeholder\n                )\n            );\n\n            emit PairGroupUpdated(pairIndex, prevGroupIndex, value.groupIndex);\n        }\n\n        p.feePerBlock = value.feePerBlock;\n        p.feeExponent = value.feeExponent;\n        pairOis[pairIndex].max = value.maxOi;\n\n        emit PairParamsUpdated(pairIndex, value.groupIndex, value.feePerBlock, value.feeExponent, value.maxOi);\n    }\n\n    // Manage group params\n    function setGroupParams(uint16 groupIndex, GroupParams calldata value) external onlyManager {\n        _setGroupParams(groupIndex, value);\n    }\n\n    function setGroupParamsArray(uint16[] calldata indices, GroupParams[] calldata values) external onlyManager {\n        uint len = indices.length;\n        require(len == values.length, \"WRONG_LENGTH\");\n\n        for (uint i; i < len; ) {\n            _setGroupParams(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setGroupParams(uint16 groupIndex, GroupParams calldata value) private {\n        require(groupIndex > 0, \"GROUP_0\");\n        require(value.feeExponent >= 1 && value.feeExponent <= 3, \"WRONG_EXPONENT\");\n\n        _setGroupPendingAccFees(groupIndex, ChainUtils.getBlockNumber());\n\n        Group storage g = groups[groupIndex];\n        g.feePerBlock = value.feePerBlock;\n        g.maxOi = uint80(value.maxOi);\n        groupFeeExponents[groupIndex] = value.feeExponent;\n\n        emit GroupUpdated(groupIndex, value.feePerBlock, value.maxOi, value.feeExponent);\n    }\n\n    // Group OI setter\n    function _setGroupOi(\n        uint16 groupIndex,\n        bool long,\n        bool increase,\n        uint amount // 1e18\n    ) private {\n        Group storage group = groups[groupIndex];\n        uint112 amountFinal;\n\n        if (groupIndex > 0) {\n            amount = (amount * P_1) / 1e18; // 1e10\n            require(amount <= type(uint112).max, \"OVERFLOW\");\n\n            amountFinal = uint112(amount);\n\n            if (long) {\n                group.oiLong = increase\n                    ? group.oiLong + amountFinal\n                    : group.oiLong - (group.oiLong > amountFinal ? amountFinal : group.oiLong);\n            } else {\n                group.oiShort = increase\n                    ? group.oiShort + amountFinal\n                    : group.oiShort - (group.oiShort > amountFinal ? amountFinal : group.oiShort);\n            }\n        }\n\n        emit GroupOiUpdated(groupIndex, long, increase, amountFinal, group.oiLong, group.oiShort);\n    }\n\n    // Acc fees getters for pairs and groups\n    function getPendingAccFees(\n        PendingAccFeesInput memory input\n    ) public pure returns (uint64 newAccFeeLong, uint64 newAccFeeShort, uint64 delta) {\n        require(input.currentBlock >= input.accLastUpdatedBlock, \"BLOCK_ORDER\");\n\n        bool moreShorts = input.oiLong < input.oiShort;\n        uint netOi = moreShorts ? input.oiShort - input.oiLong : input.oiLong - input.oiShort;\n\n        uint _delta = input.maxOi > 0 && input.feeExponent > 0\n            ? ((input.currentBlock - input.accLastUpdatedBlock) *\n                input.feePerBlock *\n                ((netOi * 1e10) / input.maxOi) ** input.feeExponent) / (1e18 ** input.feeExponent)\n            : 0; // 1e10 (%)\n\n        require(_delta <= type(uint64).max, \"OVERFLOW\");\n        delta = uint64(_delta);\n\n        newAccFeeLong = moreShorts ? input.accFeeLong : input.accFeeLong + delta;\n        newAccFeeShort = moreShorts ? input.accFeeShort + delta : input.accFeeShort;\n    }\n\n    function getPairGroupAccFeesDeltas(\n        uint i,\n        PairGroup[] memory pairGroups,\n        InitialAccFees memory initialFees,\n        uint pairIndex,\n        bool long,\n        uint currentBlock\n    ) public view returns (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen) {\n        PairGroup memory group = pairGroups[i];\n\n        beforeTradeOpen = group.block < initialFees.block;\n\n        if (i == pairGroups.length - 1) {\n            // Last active group\n            deltaGroup = getGroupPendingAccFee(group.groupIndex, currentBlock, long);\n            deltaPair = getPairPendingAccFee(pairIndex, currentBlock, long);\n        } else {\n            // Previous groups\n            PairGroup memory nextGroup = pairGroups[i + 1];\n\n            // If it's not the first group to be before the trade was opened then fee is 0\n            if (beforeTradeOpen && nextGroup.block <= initialFees.block) {\n                return (0, 0, beforeTradeOpen);\n            }\n\n            deltaGroup = long ? nextGroup.prevGroupAccFeeLong : nextGroup.prevGroupAccFeeShort;\n            deltaPair = long ? nextGroup.pairAccFeeLong : nextGroup.pairAccFeeShort;\n        }\n\n        if (beforeTradeOpen) {\n            deltaGroup -= initialFees.accGroupFee;\n            deltaPair -= initialFees.accPairFee;\n        } else {\n            deltaGroup -= (long ? group.initialAccFeeLong : group.initialAccFeeShort);\n            deltaPair -= (long ? group.pairAccFeeLong : group.pairAccFeeShort);\n        }\n    }\n\n    // Pair acc fees helpers\n    function getPairPendingAccFees(\n        uint pairIndex,\n        uint currentBlock\n    ) public view returns (uint64 accFeeLong, uint64 accFeeShort, uint64 pairAccFeeDelta) {\n        Pair memory pair = pairs[pairIndex];\n\n        (uint pairOiLong, uint pairOiShort) = getPairOpenInterestDai(pairIndex);\n\n        (accFeeLong, accFeeShort, pairAccFeeDelta) = getPendingAccFees(\n            PendingAccFeesInput(\n                pair.accFeeLong,\n                pair.accFeeShort,\n                pairOiLong,\n                pairOiShort,\n                pair.feePerBlock,\n                currentBlock,\n                pair.accLastUpdatedBlock,\n                pairOis[pairIndex].max,\n                pair.feeExponent\n            )\n        );\n    }\n\n    function getPairPendingAccFee(uint pairIndex, uint currentBlock, bool long) public view returns (uint64 accFee) {\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getPairPendingAccFees(pairIndex, currentBlock);\n        return long ? accFeeLong : accFeeShort;\n    }\n\n    function _setPairPendingAccFees(\n        uint pairIndex,\n        uint currentBlock\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\n        (accFeeLong, accFeeShort, ) = getPairPendingAccFees(pairIndex, currentBlock);\n\n        Pair storage pair = pairs[pairIndex];\n\n        (pair.accFeeLong, pair.accFeeShort) = (accFeeLong, accFeeShort);\n        pair.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(currentBlock);\n\n        emit PairAccFeesUpdated(pairIndex, currentBlock, pair.accFeeLong, pair.accFeeShort);\n    }\n\n    // Group acc fees helpers\n    function getGroupPendingAccFees(\n        uint16 groupIndex,\n        uint currentBlock\n    ) public view returns (uint64 accFeeLong, uint64 accFeeShort, uint64 groupAccFeeDelta) {\n        Group memory group = groups[groupIndex];\n\n        (accFeeLong, accFeeShort, groupAccFeeDelta) = getPendingAccFees(\n            PendingAccFeesInput(\n                group.accFeeLong,\n                group.accFeeShort,\n                (uint(group.oiLong) * 1e18) / P_1,\n                (uint(group.oiShort) * 1e18) / P_1,\n                group.feePerBlock,\n                currentBlock,\n                group.accLastUpdatedBlock,\n                uint72(group.maxOi),\n                groupFeeExponents[groupIndex]\n            )\n        );\n    }\n\n    function getGroupPendingAccFee(\n        uint16 groupIndex,\n        uint currentBlock,\n        bool long\n    ) public view returns (uint64 accFee) {\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getGroupPendingAccFees(groupIndex, currentBlock);\n        return long ? accFeeLong : accFeeShort;\n    }\n\n    function _setGroupPendingAccFees(\n        uint16 groupIndex,\n        uint currentBlock\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\n        (accFeeLong, accFeeShort, ) = getGroupPendingAccFees(groupIndex, currentBlock);\n\n        Group storage group = groups[groupIndex];\n\n        (group.accFeeLong, group.accFeeShort) = (accFeeLong, accFeeShort);\n        group.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(currentBlock);\n\n        emit GroupAccFeesUpdated(groupIndex, currentBlock, group.accFeeLong, group.accFeeShort);\n    }\n\n    // Interaction with callbacks\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeDai, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external override onlyCallbacks {\n        uint16 groupIndex = getPairGroupIndex(pairIndex);\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        (uint64 pairAccFeeLong, uint64 pairAccFeeShort) = _setPairPendingAccFees(pairIndex, currentBlock);\n        (uint64 groupAccFeeLong, uint64 groupAccFeeShort) = _setGroupPendingAccFees(groupIndex, currentBlock);\n\n        _setGroupOi(groupIndex, long, open, positionSizeDai);\n\n        if (open) {\n            InitialAccFees memory initialFees = InitialAccFees(\n                long ? pairAccFeeLong : pairAccFeeShort,\n                long ? groupAccFeeLong : groupAccFeeShort,\n                ChainUtils.getUint48BlockNumber(currentBlock),\n                0 // placeholder\n            );\n\n            initialAccFees[trader][pairIndex][index] = initialFees;\n\n            emit TradeInitialAccFeesStored(trader, pairIndex, index, initialFees.accPairFee, initialFees.accGroupFee);\n        }\n\n        emit TradeActionHandled(trader, pairIndex, index, open, long, positionSizeDai);\n    }\n\n    // Important trade getters\n    function getTradeBorrowingFee(BorrowingFeeInput memory input) public view override returns (uint fee) {\n        InitialAccFees memory initialFees = initialAccFees[input.trader][input.pairIndex][input.index];\n        PairGroup[] memory pairGroups = pairs[input.pairIndex].groups;\n\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        PairGroup memory firstPairGroup;\n        if (pairGroups.length > 0) {\n            firstPairGroup = pairGroups[0];\n        }\n\n        // If pair has had no group after trade was opened, initialize with pair borrowing fee\n        if (pairGroups.length == 0 || firstPairGroup.block > initialFees.block) {\n            fee = ((\n                pairGroups.length == 0\n                    ? getPairPendingAccFee(input.pairIndex, currentBlock, input.long)\n                    : (input.long ? firstPairGroup.pairAccFeeLong : firstPairGroup.pairAccFeeShort)\n            ) - initialFees.accPairFee);\n        }\n\n        // Sum of max(pair fee, group fee) for all groups the pair was in while trade was open\n        for (uint i = pairGroups.length; i > 0; ) {\n            (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen) = getPairGroupAccFeesDeltas(\n                i - 1,\n                pairGroups,\n                initialFees,\n                input.pairIndex,\n                input.long,\n                currentBlock\n            );\n\n            fee += (deltaGroup > deltaPair ? deltaGroup : deltaPair);\n\n            // Exit loop at first group before trade was open\n            if (beforeTradeOpen) break;\n            unchecked {\n                --i;\n            }\n        }\n\n        fee = (input.collateral * input.leverage * fee) / P_1 / 100; // 1e18 (DAI)\n    }\n\n    function getTradeLiquidationPrice(LiqPriceInput calldata input) external view override returns (uint)  {\n        return\n            pairInfos.getTradeLiquidationPricePure(\n                input.openPrice,\n                input.long,\n                input.collateral,\n                input.leverage,\n                pairInfos.getTradeRolloverFee(input.trader, input.pairIndex, input.index, input.collateral) +\n                    getTradeBorrowingFee(\n                        BorrowingFeeInput(\n                            input.trader,\n                            input.pairIndex,\n                            input.index,\n                            input.long,\n                            input.collateral,\n                            input.leverage\n                        )\n                    ),\n                pairInfos.getTradeFundingFee(\n                    input.trader,\n                    input.pairIndex,\n                    input.index,\n                    input.long,\n                    input.collateral,\n                    input.leverage\n                )\n            );\n    }\n\n    // Public getters\n    function getPairOpenInterestDai(uint pairIndex) public view returns (uint, uint) {\n        return (storageT.openInterestDai(pairIndex, 0), storageT.openInterestDai(pairIndex, 1));\n    }\n\n    function getPairGroupIndex(uint pairIndex) public view returns (uint16 groupIndex) {\n        PairGroup[] memory pairGroups = pairs[pairIndex].groups;\n        return pairGroups.length == 0 ? 0 : pairGroups[pairGroups.length - 1].groupIndex;\n    }\n\n    // External getters\n    function withinMaxGroupOi(\n        uint pairIndex,\n        bool long,\n        uint positionSizeDai // 1e18\n    ) external view override returns (bool) {\n        Group memory g = groups[getPairGroupIndex(pairIndex)];\n        return (g.maxOi == 0) || ((long ? g.oiLong : g.oiShort) + (positionSizeDai * P_1) / 1e18 <= g.maxOi);\n    }\n\n    function getGroup(uint16 groupIndex) external view returns (Group memory, uint48) {\n        return (groups[groupIndex], groupFeeExponents[groupIndex]);\n    }\n\n    function getPair(uint pairIndex) external view returns (Pair memory, PairOi memory) {\n        return (pairs[pairIndex], pairOis[pairIndex]);\n    }\n\n    // TODO\n    // function getAllPairs() external view returns (Pair[] memory, PairOi[] memory) {\n    //     uint len = storageT.priceAggregator().pairsStorage().pairsCount();\n    //     Pair[] memory p = new Pair[](len);\n    //     PairOi[] memory pairOi = new PairOi[](len);\n\n    //     for (uint i; i < len; ) {\n    //         p[i] = pairs[i];\n    //         pairOi[i] = pairOis[i];\n    //         unchecked {\n    //             ++i;\n    //         }\n    //     }\n\n    //     return (p, pairOi);\n    // }\n\n    function getGroups(uint16[] calldata indices) external view returns (Group[] memory, uint48[] memory) {\n        Group[] memory g = new Group[](indices.length);\n        uint48[] memory e = new uint48[](indices.length);\n        uint len = indices.length;\n\n        for (uint i; i < len; ) {\n            g[i] = groups[indices[i]];\n            e[i] = groupFeeExponents[indices[i]];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (g, e);\n    }\n\n    function getTradeInitialAccFees(\n        address trader,\n        uint pairIndex,\n        uint index\n    )\n        external\n        view\n        returns (InitialAccFees memory borrowingFees, GNSPairInfosInterfaceV6.TradeInitialAccFees memory otherFees)\n    {\n        borrowingFees = initialAccFees[trader][pairIndex][index];\n        otherFees = pairInfos.tradeInitialAccFees(trader, pairIndex, index);\n    }\n\n    function getPairMaxOi(uint pairIndex) external view override returns (uint)  {\n        return pairOis[pairIndex].max;\n    }\n}"
    },
    "contracts/interfaces/AggregatorInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface AggregatorInterfaceV5{\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE }\n    function getPrice(uint,OrderType,uint) external returns(uint);\n    function tokenPriceDai() external view returns(uint);\n    function pairMinOpenLimitSlippageP(uint) external view returns(uint);\n    function closeFeeP(uint) external view returns(uint);\n    function linkFee(uint,uint) external view returns(uint);\n    function openFeeP(uint) external view returns(uint);\n    function pairMinLeverage(uint) external view returns(uint);\n    function pairMaxLeverage(uint) external view returns(uint);\n    function pairsCount() external view returns(uint);\n    function tokenDaiReservesLp() external view returns(uint, uint);\n    function referralP(uint) external view returns(uint);\n    function nftLimitOrderFeeP(uint) external view returns(uint);\n}"
    },
    "contracts/interfaces/ChainlinkFeedInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface ChainlinkFeedInterfaceV5{\n    function latestRoundData() external view returns (uint80,int,uint,uint,uint80);\n}"
    },
    "contracts/interfaces/GNSBorrowingFeesInterfaceV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface GNSBorrowingFeesInterfaceV6_4 {\n    // Structs\n    struct PairGroup {\n        uint16 groupIndex;\n        uint48 block;\n        uint64 initialAccFeeLong; // 1e10 (%)\n        uint64 initialAccFeeShort; // 1e10 (%)\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\n        uint64 pairAccFeeLong; // 1e10 (%)\n        uint64 pairAccFeeShort; // 1e10 (%)\n        uint64 _placeholder; // might be useful later\n    }\n    struct Pair {\n        PairGroup[] groups;\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint48 feeExponent;\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct PairOi {\n        uint72 long; // 1e10 (DAI)\n        uint72 short; // 1e10 (DAI)\n        uint72 max; // 1e10 (DAI)\n        uint40 _placeholder; // might be useful later\n    }\n    struct Group {\n        uint112 oiLong; // 1e10\n        uint112 oiShort; // 1e10\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint80 maxOi; // 1e10\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct InitialAccFees {\n        uint64 accPairFee; // 1e10 (%)\n        uint64 accGroupFee; // 1e10 (%)\n        uint48 block;\n        uint80 _placeholder; // might be useful later\n    }\n    struct PairParams {\n        uint16 groupIndex;\n        uint32 feePerBlock; // 1e10 (%)\n        uint48 feeExponent;\n        uint72 maxOi;\n    }\n    struct GroupParams {\n        uint32 feePerBlock; // 1e10 (%)\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n    struct BorrowingFeeInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct LiqPriceInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint openPrice; // 1e10\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct PendingAccFeesInput {\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint oiLong; // 1e18\n        uint oiShort; // 1e18\n        uint32 feePerBlock; // 1e10\n        uint currentBlock;\n        uint accLastUpdatedBlock;\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n\n    // Events\n    event PairParamsUpdated(\n        uint indexed pairIndex,\n        uint16 indexed groupIndex,\n        uint32 feePerBlock,\n        uint48 feeExponent,\n        uint72 maxOi\n    );\n    event PairGroupUpdated(uint indexed pairIndex, uint16 indexed prevGroupIndex, uint16 indexed newGroupIndex);\n    event GroupUpdated(uint16 indexed groupIndex, uint32 feePerBlock, uint72 maxOi, uint48 feeExponent);\n    event TradeInitialAccFeesStored(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint64 initialPairAccFee,\n        uint64 initialGroupAccFee\n    );\n    event TradeActionHandled(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        bool open,\n        bool long,\n        uint positionSizeDai // 1e18\n    );\n    event PairAccFeesUpdated(uint indexed pairIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\n    event GroupAccFeesUpdated(uint16 indexed groupIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\n    event GroupOiUpdated(\n        uint16 indexed groupIndex,\n        bool indexed long,\n        bool indexed increase,\n        uint112 amount,\n        uint112 oiLong,\n        uint112 oiShort\n    );\n\n    // Functions\n    function getTradeLiquidationPrice(LiqPriceInput calldata) external view returns (uint); // PRECISION\n\n    function getTradeBorrowingFee(BorrowingFeeInput memory) external view returns (uint); // 1e18 (DAI)\n\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeDai, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external;\n\n    function withinMaxGroupOi(uint pairIndex, bool long, uint positionSizeDai) external view returns (bool);\n\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\n}"
    },
    "contracts/interfaces/GNSPairInfosInterfaceV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface GNSPairInfosInterfaceV6 {\n    // Trade initial acc fees\n    struct TradeInitialAccFees {\n        uint rollover; // 1e18 (DAI)\n        int funding; // 1e18 (DAI)\n        bool openedAfterUpdate;\n    }\n\n    function tradeInitialAccFees(address, uint, uint) external view returns (TradeInitialAccFees memory);\n\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\n\n    function storeTradeInitialAccFees(address trader, uint pairIndex, uint index, bool long) external;\n\n    function getTradePriceImpact(\n        uint openPrice, // PRECISION\n        uint pairIndex,\n        bool long,\n        uint openInterest // 1e18 (DAI)\n    )\n        external\n        view\n        returns (\n            uint priceImpactP, // PRECISION (%)\n            uint priceAfterImpact // PRECISION\n        );\n\n    function getTradeRolloverFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint collateral // 1e18 (DAI)\n    ) external view returns (uint);\n\n    function getTradeFundingFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    )\n        external\n        view\n        returns (\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\n        );\n\n    function getTradeLiquidationPricePure(\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        uint rolloverFee, // 1e18 (DAI)\n        int fundingFee // 1e18 (DAI)\n    ) external pure returns (uint);\n\n    function getTradeLiquidationPrice(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    ) external view returns (uint); // PRECISION\n\n    function getTradeValue(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        int percentProfit, // PRECISION (%)\n        uint closingFee // 1e18 (DAI)\n    ) external returns (uint); // 1e18 (DAI)\n\n    function manager() external view returns (address);\n}"
    },
    "contracts/interfaces/IArbSys.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.21 <0.9.0;\n\n/**\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\n */\ninterface IArbSys {\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external pure returns (uint);\n\n    function arbChainID() external view returns (uint);\n\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint);\n\n    /**\n     * @notice Send a transaction to L1\n     * @param destination recipient address on L1\n     * @param calldataForL1 (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\n\n    /**\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\n     * @param account target account\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\n     */\n    function getTransactionCount(address account) external view returns (uint256);\n\n    /**\n     * @notice get the value of target L2 storage slot\n     * This function is only callable from address 0 to prevent contracts from being able to call it\n     * @param account target account\n     * @param index target index of storage slot\n     * @return stotage value for the given account at the given index\n     */\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\n\n    /**\n     * @notice check if current call is coming from l1\n     * @return true if the caller of this was called directly from L1\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param dest destination address\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\n\n    /**\n     * @notice get the caller's amount of available storage gas\n     * @return amount of storage gas available to the caller\n     */\n    function getStorageGasAvailable() external view returns (uint);\n\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint indexed uniqueId,\n        uint indexed batchNumber,\n        uint indexInBatch,\n        uint arbBlockNum,\n        uint ethBlockNum,\n        uint timestamp,\n        uint callvalue,\n        bytes data\n    );\n}"
    },
    "contracts/interfaces/IGToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\npragma abicoder v2;\n\ninterface IGToken {\n    function manager() external view returns (address);\n\n    function admin() external view returns (address);\n\n    function currentEpoch() external view returns (uint);\n\n    function currentEpochStart() external view returns (uint);\n\n    function currentEpochPositiveOpenPnl() external view returns (uint);\n\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\n\n    struct LockedDeposit {\n        address owner;\n        uint shares; // 1e18\n        uint assetsDeposited; // 1e18\n        uint assetsDiscount; // 1e18\n        uint atTimestamp; // timestamp\n        uint lockDuration; // timestamp\n    }\n\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\n\n    function sendAssets(uint assets, address receiver) external;\n\n    function receiveAssets(uint assets, address user) external;\n\n    function distributeReward(uint assets) external;\n\n    function currentBalanceDai() external view returns (uint);\n\n    function tvl() external view returns (uint);\n\n    function marketCap() external view returns (uint);\n\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\n}"
    },
    "contracts/interfaces/NftInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface NftInterfaceV5{\n    function balanceOf(address) external view returns (uint);\n    function ownerOf(uint) external view returns (address);\n    function transferFrom(address, address, uint) external;\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\n}"
    },
    "contracts/interfaces/PairsStorageInterfaceV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface PairsStorageInterfaceV6 {\n    enum FeedCalculation {\n        DEFAULT,\n        INVERT,\n        COMBINE\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\n    struct Feed {\n        address feed1;\n        address feed2;\n        FeedCalculation feedCalculation;\n        uint maxDeviationP;\n    } // PRECISION (%)\n\n    function incrementCurrentOrderId() external returns (uint);\n\n    function updateGroupCollateral(uint, uint, bool, bool) external;\n\n    function pairJob(uint) external returns (string memory, string memory, bytes32, uint);\n\n    function pairFeed(uint) external view returns (Feed memory);\n\n    function pairSpreadP(uint) external view returns (uint);\n\n    function pairMinLeverage(uint) external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n\n    function groupMaxCollateral(uint) external view returns (uint);\n\n    function groupCollateral(uint, bool) external view returns (uint);\n\n    function guaranteedSlEnabled(uint) external view returns (bool);\n\n    function pairOpenFeeP(uint) external view returns (uint);\n\n    function pairCloseFeeP(uint) external view returns (uint);\n\n    function pairOracleFeeP(uint) external view returns (uint);\n\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\n\n    function pairReferralFeeP(uint) external view returns (uint);\n\n    function pairMinLevPosDai(uint) external view returns (uint);\n\n    function pairsCount() external view returns (uint);\n}"
    },
    "contracts/interfaces/PausableInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface PausableInterfaceV5{\n    function isPaused() external view returns (bool);\n}"
    },
    "contracts/interfaces/PoolInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface PoolInterfaceV5{\n    function increaseAccTokensPerLp(uint) external;\n}"
    },
    "contracts/interfaces/StorageInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"./TokenInterfaceV5.sol\";\nimport \"./NftInterfaceV5.sol\";\nimport \"./IGToken.sol\";\nimport \"./PairsStorageInterfaceV6.sol\";\nimport \"./ChainlinkFeedInterfaceV5.sol\";\n\npragma solidity 0.8.7;\npragma abicoder v2;\n\ninterface PoolInterfaceV5 {\n    function increaseAccTokensPerLp(uint) external;\n}\n\ninterface PausableInterfaceV5 {\n    function isPaused() external view returns (bool);\n}\n\ninterface StorageInterfaceV5 {\n    enum LimitOrder {\n        TP,\n        SL,\n        LIQ,\n        OPEN\n    }\n    struct Trade {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken; // 1e18\n        uint positionSizeDai; // 1e18\n        uint openPrice; // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION\n        uint sl; // PRECISION\n    }\n    struct TradeInfo {\n        uint tokenId;\n        uint tokenPriceDai; // PRECISION\n        uint openInterestDai; // 1e18\n        uint tpLastUpdated;\n        uint slLastUpdated;\n        bool beingMarketClosed;\n    }\n    struct OpenLimitOrder {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint positionSize; // 1e18 (DAI or GFARM2)\n        uint spreadReductionP;\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION (%)\n        uint sl; // PRECISION (%)\n        uint minPrice; // PRECISION\n        uint maxPrice; // PRECISION\n        uint block;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingMarketOrder {\n        Trade trade;\n        uint block;\n        uint wantedPrice; // PRECISION\n        uint slippageP; // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingNftOrder {\n        address nftHolder;\n        uint nftId;\n        address trader;\n        uint pairIndex;\n        uint index;\n        LimitOrder orderType;\n    }\n\n    function PRECISION() external pure returns (uint);\n\n    function gov() external view returns (address);\n\n    function dev() external view returns (address);\n\n    function dai() external view returns (TokenInterfaceV5);\n\n    function token() external view returns (TokenInterfaceV5);\n\n    function linkErc677() external view returns (TokenInterfaceV5);\n\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\n\n    function vault() external view returns (IGToken);\n\n    function trading() external view returns (address);\n\n    function callbacks() external view returns (address);\n\n    function handleTokens(address, uint, bool) external;\n\n    function transferDai(address, address, uint) external;\n\n    function transferLinkToAggregator(address, uint, uint) external;\n\n    function unregisterTrade(address, uint, uint) external;\n\n    function unregisterPendingMarketOrder(uint, bool) external;\n\n    function unregisterOpenLimitOrder(address, uint, uint) external;\n\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\n\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\n\n    function openTrades(address, uint, uint) external view returns (Trade memory);\n\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\n\n    function updateSl(address, uint, uint, uint) external;\n\n    function updateTp(address, uint, uint, uint) external;\n\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\n\n    function spreadReductionsP(uint) external view returns (uint);\n\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\n\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\n\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\n\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\n\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\n\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\n\n    function increaseNftRewards(uint, uint) external;\n\n    function nftSuccessTimelock() external view returns (uint);\n\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\n\n    function updateTrade(Trade memory) external;\n\n    function nftLastSuccess(uint) external view returns (uint);\n\n    function unregisterPendingNftOrder(uint) external;\n\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\n\n    function distributeLpRewards(uint) external;\n\n    function storeTrade(Trade memory, TradeInfo memory) external;\n\n    function openLimitOrdersCount(address, uint) external view returns (uint);\n\n    function openTradesCount(address, uint) external view returns (uint);\n\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\n\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\n\n    function maxTradesPerPair() external view returns (uint);\n\n    function pendingOrderIdsCount(address) external view returns (uint);\n\n    function maxPendingMarketOrders() external view returns (uint);\n\n    function openInterestDai(uint, uint) external view returns (uint);\n\n    function getPendingOrderIds(address) external view returns (uint[] memory);\n\n    function nfts(uint) external view returns (NftInterfaceV5);\n\n    function fakeBlockNumber() external view returns (uint); // Testing\n}\n\ninterface IStateCopyUtils {\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\n\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\n}\n\ninterface NftRewardsInterfaceV6_3_1 {\n    struct TriggeredLimitId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        StorageInterfaceV5.LimitOrder order;\n    }\n    enum OpenLimitOrderType {\n        LEGACY,\n        REVERSAL,\n        MOMENTUM\n    }\n\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\n\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\n\n    function unregisterTrigger(TriggeredLimitId calldata) external;\n\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\n\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\n\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\n\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\n\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\n\n    function botInUse(bytes32) external view returns (bool);\n\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\n\n    function setNftBotInUse(bytes32, bytes32) external;\n\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\n\n    function linkToTokenRewards(uint, uint) external view returns (uint);\n}\n\ninterface AggregatorInterfaceV6_4 {\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE\n    }\n\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\n\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\n\n    function tokenPriceDai() external returns (uint);\n\n    function linkFee(uint, uint) external view returns (uint);\n\n    function openFeeP(uint) external view returns (uint);\n\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\n\n    function nodes(uint index) external view returns (address);\n}\n\ninterface TradingCallbacksV6_4 {\n    enum TradeType {\n        MARKET,\n        LIMIT\n    }\n    struct SimplifiedTradeId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        TradeType tradeType;\n    }\n    struct LastUpdated {\n        uint32 tp;\n        uint32 sl;\n        uint32 limit;\n        uint32 created;\n    }\n    struct TradeData {\n        uint40 maxSlippageP; // 1e10 (%)\n        uint216 _placeholder; // for potential future data\n    }\n\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\n\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\n\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\n\n    function canExecuteTimeout() external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n}"
    },
    "contracts/interfaces/TokenInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface TokenInterfaceV5{\n    function burn(address, uint256) external;\n    function mint(address, uint256) external;\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns(bool);\n    function balanceOf(address) external view returns(uint256);\n    function hasRole(bytes32, address) external view returns (bool);\n    function approve(address, uint256) external returns (bool);\n    function allowance(address, address) external view returns (uint256);\n}"
    },
    "contracts/libraries/ChainUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport \"../interfaces/IArbSys.sol\";\n\nlibrary ChainUtils {\n    uint256 public constant ARBITRUM_MAINNET = 42161;\n    uint256 public constant ARBITRUM_GOERLI = 421613;\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\n\n    function getBlockNumber() internal view returns (uint) {\n        if (block.chainid == ARBITRUM_MAINNET || block.chainid == ARBITRUM_GOERLI) {\n            return ARB_SYS.arbBlockNumber();\n        }\n\n        return block.number;\n    }\n\n    function getUint48BlockNumber(uint blockNumber) internal pure returns (uint48) {\n        require(blockNumber <= type(uint48).max, \"OVERFLOW\");\n        return uint48(blockNumber);\n    }\n}"
    },
    "contracts/libraries/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.7;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}"
    },
    "contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.7;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}