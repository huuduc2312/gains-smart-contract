{
  "address": "0xbF07a7d378ED86B61B49C9c6029e9D7c4DB90a16",
  "abi": [],
  "transactionHash": "0x8aee3ac2960be3c76c7885fbee6b804da85ef09c308488857bdd79fb29f51661",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0xbF07a7d378ED86B61B49C9c6029e9D7c4DB90a16",
    "transactionIndex": 0,
    "gasUsed": "452881",
    "logsBloom": "0x
    "blockHash": "0xc9ce425a0004b0bf6646422683e5adc48c2415576a7051dad647c2f58024b020",
    "transactionHash": "0x8aee3ac2960be3c76c7885fbee6b804da85ef09c308488857bdd79fb29f51661",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 47277247,
        "transactionHash": "0x8aee3ac2960be3c76c7885fbee6b804da85ef09c308488857bdd79fb29f51661",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d7d1dcba2c678ee7e049bd55176354e7c5bbdcca",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000e5ba12ec85d9400000000000000000000000000000000000000000000000017405a9b7e0148ae00000000000000000000000000000000000000000000242c9d905e70dd463b9c0000000000000000000000000000000000000000000000001731fefa4f38eb1a00000000000000000000000000000000000000000000242c9d9eba120c0e9930",
        "logIndex": 0,
        "blockHash": "0xc9ce425a0004b0bf6646422683e5adc48c2415576a7051dad647c2f58024b020"
      }
    ],
    "blockNumber": 47277247,
    "cumulativeGasUsed": "452881",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7b2b4c0d65516b524667a4840d5fe435",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TradeUtils.sol\":\"TradeUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface ChainlinkFeedInterfaceV5{\\n    function latestRoundData() external view returns (uint80,int,uint,uint,uint80);\\n}\",\"keccak256\":\"0x4f39b41b3bdadfb7233fac30c60cedfd20d534ba536c0b016818dd01b47728b1\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xe1c4eac213e8cc146ef165a92ff5b652c250d2340d4954b7647eed73e601757f\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0x1aba6c110d3893750103e30bd9556f785887576264ba70aa2c4f719eda7de3c4\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(uint) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosDai(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\",\"keccak256\":\"0x664be7bcc46917987f32350f6bdb4e925679875f828e8aef07f0f14c7a4d43d2\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\\n\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n\\n    function openTrades(address, uint, uint) external view returns (Trade memory);\\n\\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n\\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\",\"keccak256\":\"0xb878c2794b85f554cd41e925a457e789e71b2512fdc0e39ce4552c1194094fab\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x0b1aef35747e180443d65683c29cebff6cc9eaaac364f29f1a619f68b8df9b82\",\"license\":\"MIT\"},\"contracts/libraries/TradeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\n\\nlibrary TradeUtils {\\n    function _getTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type\\n    )\\n        internal\\n        view\\n        returns (\\n            TradingCallbacksV6_4,\\n            TradingCallbacksV6_4.LastUpdated memory,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory\\n        )\\n    {\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        TradingCallbacksV6_4.LastUpdated memory l = callbacks.tradeLastUpdated(trader, pairIndex, index, _type);\\n\\n        return (callbacks, l, TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type));\\n    }\\n\\n    function setTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        uint32 b = uint32(blockNumber);\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        callbacks.setTradeLastUpdated(\\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\\n            TradingCallbacksV6_4.LastUpdated(b, b, b, b)\\n        );\\n    }\\n\\n    function setSlLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksV6_4 callbacks,\\n            TradingCallbacksV6_4.LastUpdated memory l,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.sl = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTpLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksV6_4 callbacks,\\n            TradingCallbacksV6_4.LastUpdated memory l,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.tp = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTradeData(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint maxSlippageP\\n    ) external {\\n        require(maxSlippageP <= type(uint40).max, \\\"OVERFLOW\\\");\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        callbacks.setTradeData(\\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\\n            TradingCallbacksV6_4.TradeData(uint40(maxSlippageP), 0)\\n        );\\n    }\\n}\",\"keccak256\":\"0x92d3284521659bf0fcd6c4f19405deea55167883384af672ca7f335c092c5da7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61073a61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806325f40ef91461005b57806339e765e41461007d57806395ecbbea1461009d578063a6b8633d146100bd575b600080fd5b81801561006757600080fd5b5061007b6100763660046104f0565b6100dd565b005b81801561008957600080fd5b5061007b6100983660046104f0565b6101e5565b8180156100a957600080fd5b5061007b6100b83660046104f0565b610273565b8180156100c957600080fd5b5061007b6100d83660046104f0565b610349565b64ffffffffff8111156101215760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640160405180910390fd5b6000869050806001600160a01b03166321c861966040518060800160405280896001600160a01b0316815260200188815260200187815260200186600181111561016d5761016d6106ee565b905260408051808201825264ffffffffff871681526000602082015290516001600160e01b031960e085901b1681526101aa9291906004016106b8565b600060405180830381600087803b1580156101c457600080fd5b505af11580156101d8573d6000803e3d6000fd5b5050505050505050505050565b60008060006101f7898989898961039d565b63ffffffff87168252604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a90610236908490869060040161066f565b600060405180830381600087803b15801561025057600080fd5b505af1158015610264573d6000803e3d6000fd5b50505050505050505050505050565b60008190506000879050806001600160a01b0316637e09ae8a60405180608001604052808a6001600160a01b031681526020018981526020018881526020018760018111156102c4576102c46106ee565b90526040805160808101825263ffffffff871680825260208201819052818301819052606082015290516001600160e01b031960e085901b16815261030d92919060040161066f565b600060405180830381600087803b15801561032757600080fd5b505af115801561033b573d6000803e3d6000fd5b505050505050505050505050565b600080600061035b898989898961039d565b63ffffffff87166020830152604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a90610236908490869060040161066f565b60408051608081018252600080825260208201819052918101829052606081018290526103e86040805160808101825260008082526020820181905291810182905290606082015290565b604051639bd24d8360e01b815288906000906001600160a01b03831690639bd24d839061041f908c908c908c908c9060040161063b565b60806040518083038186803b15801561043757600080fd5b505afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190610557565b9050818160405180608001604052808c6001600160a01b031681526020018b81526020018a81526020018960018111156104ab576104ab6106ee565b9052919c909b50909950975050505050505050565b80356001600160a01b03811681146104d757600080fd5b919050565b805163ffffffff811681146104d757600080fd5b60008060008060008060c0878903121561050957600080fd5b610512876104c0565b9550610520602088016104c0565b9450604087013593506060870135925060808701356002811061054257600080fd5b8092505060a087013590509295509295509295565b60006080828403121561056957600080fd5b6040516080810181811067ffffffffffffffff8211171561059a57634e487b7160e01b600052604160045260246000fd5b6040526105a6836104dc565b81526105b4602084016104dc565b60208201526105c5604084016104dc565b60408201526105d6606084016104dc565b60608201529392505050565b6002811061060057634e487b7160e01b600052602160045260246000fd5b9052565b60018060a01b0381511682526020810151602083015260408101516040830152606081015161063660608401826105e2565b505050565b6001600160a01b038516815260208101849052604081018390526080810161066660608301846105e2565b95945050505050565b610100810161067e8285610604565b63ffffffff8084511660808401528060208501511660a08401528060408501511660c08401528060608501511660e0840152509392505050565b60c081016106c68285610604565b825164ffffffffff1660808301526020909201516001600160d81b031660a090910152919050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122083a5e69f146ea358c7598b02dddedff55a1f25b5c47554322dcb1b4a453503d664736f6c63430008070033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806325f40ef91461005b57806339e765e41461007d57806395ecbbea1461009d578063a6b8633d146100bd575b600080fd5b81801561006757600080fd5b5061007b6100763660046104f0565b6100dd565b005b81801561008957600080fd5b5061007b6100983660046104f0565b6101e5565b8180156100a957600080fd5b5061007b6100b83660046104f0565b610273565b8180156100c957600080fd5b5061007b6100d83660046104f0565b610349565b64ffffffffff8111156101215760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640160405180910390fd5b6000869050806001600160a01b03166321c861966040518060800160405280896001600160a01b0316815260200188815260200187815260200186600181111561016d5761016d6106ee565b905260408051808201825264ffffffffff871681526000602082015290516001600160e01b031960e085901b1681526101aa9291906004016106b8565b600060405180830381600087803b1580156101c457600080fd5b505af11580156101d8573d6000803e3d6000fd5b5050505050505050505050565b60008060006101f7898989898961039d565b63ffffffff87168252604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a90610236908490869060040161066f565b600060405180830381600087803b15801561025057600080fd5b505af1158015610264573d6000803e3d6000fd5b50505050505050505050505050565b60008190506000879050806001600160a01b0316637e09ae8a60405180608001604052808a6001600160a01b031681526020018981526020018881526020018760018111156102c4576102c46106ee565b90526040805160808101825263ffffffff871680825260208201819052818301819052606082015290516001600160e01b031960e085901b16815261030d92919060040161066f565b600060405180830381600087803b15801561032757600080fd5b505af115801561033b573d6000803e3d6000fd5b505050505050505050505050565b600080600061035b898989898961039d565b63ffffffff87166020830152604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a90610236908490869060040161066f565b60408051608081018252600080825260208201819052918101829052606081018290526103e86040805160808101825260008082526020820181905291810182905290606082015290565b604051639bd24d8360e01b815288906000906001600160a01b03831690639bd24d839061041f908c908c908c908c9060040161063b565b60806040518083038186803b15801561043757600080fd5b505afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190610557565b9050818160405180608001604052808c6001600160a01b031681526020018b81526020018a81526020018960018111156104ab576104ab6106ee565b9052919c909b50909950975050505050505050565b80356001600160a01b03811681146104d757600080fd5b919050565b805163ffffffff811681146104d757600080fd5b60008060008060008060c0878903121561050957600080fd5b610512876104c0565b9550610520602088016104c0565b9450604087013593506060870135925060808701356002811061054257600080fd5b8092505060a087013590509295509295509295565b60006080828403121561056957600080fd5b6040516080810181811067ffffffffffffffff8211171561059a57634e487b7160e01b600052604160045260246000fd5b6040526105a6836104dc565b81526105b4602084016104dc565b60208201526105c5604084016104dc565b60408201526105d6606084016104dc565b60608201529392505050565b6002811061060057634e487b7160e01b600052602160045260246000fd5b9052565b60018060a01b0381511682526020810151602083015260408101516040830152606081015161063660608401826105e2565b505050565b6001600160a01b038516815260208101849052604081018390526080810161066660608301846105e2565b95945050505050565b610100810161067e8285610604565b63ffffffff8084511660808401528060208501511660a08401528060408501511660c08401528060608501511660e0840152509392505050565b60c081016106c68285610604565b825164ffffffffff1660808301526020909201516001600160d81b031660a090910152919050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122083a5e69f146ea358c7598b02dddedff55a1f25b5c47554322dcb1b4a453503d664736f6c63430008070033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}