{
  "address": "0xacE1F775d3CC135D918Fb6a1DFa3C143678C1078",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_LINK_FEE_BALANCE_DIVIDER",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "contract IGToken",
          "name": "_gToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        },
        {
          "internalType": "bytes32",
          "name": "_job",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_minAnswers",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newValue",
          "type": "bytes32"
        }
      ],
      "name": "JobUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "epochMedianValues",
          "type": "int256[]"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "epochAverageValue",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochPositiveOpenPnl",
          "type": "uint256"
        }
      ],
      "name": "NewEpoch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newEpoch",
          "type": "uint256"
        }
      ],
      "name": "NewEpochForced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "job",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oraclesCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "linkFeePerNode",
          "type": "uint256"
        }
      ],
      "name": "NextEpochValueRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestsResetCount",
          "type": "uint256"
        }
      ],
      "name": "NextEpochValuesReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "NumberParamUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "newValues",
          "type": "address[]"
        }
      ],
      "name": "OraclesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "requestValues",
          "type": "int256[]"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "medianValue",
          "type": "int256"
        }
      ],
      "name": "RequestMedianValueSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLate",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "oracleRequestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "requestValue",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "linkFee",
          "type": "uint256"
        }
      ],
      "name": "RequestValueReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK_FEE_BALANCE_DIVIDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceNewEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gToken",
      "outputs": [
        {
          "internalType": "contract IGToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "job",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAnswers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newOpenPnlRequestOrEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nextEpochValues",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochValuesLastRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochValuesRequestCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestAnswers",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initiated",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "linkFeePerNode",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsEvery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetNextEpochValueRequests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newValue",
          "type": "bytes32"
        }
      ],
      "name": "updateJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinAnswers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newValues",
          "type": "address[]"
        }
      ],
      "name": "updateOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateRequestsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateRequestsEvery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRequestsStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequestsEvery",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequestsCount",
          "type": "uint256"
        }
      ],
      "name": "updateRequestsInfoBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateRequestsStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8084f6914d83c98da1ab1c06cda61bb4b660293ebcaa30dd6e677a3d94606fe",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0xacE1F775d3CC135D918Fb6a1DFa3C143678C1078",
    "transactionIndex": 4,
    "gasUsed": "2510390",
    "logsBloom": "0x
    "blockHash": "0xb5ab77c8eb837d48f848af5218d79b3de57a6806f5bd7adcb44dacd07b5d2d54",
    "transactionHash": "0xc8084f6914d83c98da1ab1c06cda61bb4b660293ebcaa30dd6e677a3d94606fe",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 47432285,
        "transactionHash": "0xc8084f6914d83c98da1ab1c06cda61bb4b660293ebcaa30dd6e677a3d94606fe",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d7d1dcba2c678ee7e049bd55176354e7c5bbdcca",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000d60c7944bea000000000000000000000000000000000000000000000000002fe723c60706bb6e0000000000000000000000000000000000000000000014be3abaecd046f84b2b0000000000000000000000000000000000000000000000002fd9c2fe72bad16e0000000000000000000000000000000000000000000014be3ac84d97db44352b",
        "logIndex": 8,
        "blockHash": "0xb5ab77c8eb837d48f848af5218d79b3de57a6806f5bd7adcb44dacd07b5d2d54"
      }
    ],
    "blockNumber": 47432285,
    "cumulativeGasUsed": "2933520",
    "status": 1,
    "byzantium": true
  },
  "args": [
    100,
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    "0x82Ba5ca892c6F200e2fa2CADBc827CF079EC5424",
    [
      "0x495F8ed5925a0d1Dbb96e306799E60FDE2B5FF70",
      "0x495F8ed5925a0d1Dbb96e306799E60FDE2B5FF70"
    ],
    "0x3236323335663431613834383465356439393537393466383665646534656163",
    1
  ],
  "numDeployments": 1,
  "solcInputHash": "cfd0f41f4c604c6294d3b03c77fa9ec0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_LINK_FEE_BALANCE_DIVIDER\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"contract IGToken\",\"name\":\"_gToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"_job\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minAnswers\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newValue\",\"type\":\"bytes32\"}],\"name\":\"JobUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"epochMedianValues\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"epochAverageValue\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochPositiveOpenPnl\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"}],\"name\":\"NewEpochForced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"job\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"linkFeePerNode\",\"type\":\"uint256\"}],\"name\":\"NextEpochValueRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestsResetCount\",\"type\":\"uint256\"}],\"name\":\"NextEpochValuesReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"NumberParamUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newValues\",\"type\":\"address[]\"}],\"name\":\"OraclesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"requestValues\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"medianValue\",\"type\":\"int256\"}],\"name\":\"RequestMedianValueSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLate\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"oracleRequestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"requestValue\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"linkFee\",\"type\":\"uint256\"}],\"name\":\"RequestValueReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK_FEE_BALANCE_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gToken\",\"outputs\":[{\"internalType\":\"contract IGToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"job\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAnswers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOpenPnlRequestOrEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nextEpochValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochValuesLastRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochValuesRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestAnswers\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initiated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"linkFeePerNode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsEvery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetNextEpochValueRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newValue\",\"type\":\"bytes32\"}],\"name\":\"updateJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinAnswers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newValues\",\"type\":\"address[]\"}],\"name\":\"updateOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateRequestsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateRequestsEvery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRequestsStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequestsEvery\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequestsCount\",\"type\":\"uint256\"}],\"name\":\"updateRequestsInfoBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateRequestsStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GTokenOpenPnlFeed.sol\":\"GTokenOpenPnlFeed\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(Request memory self, string memory key, string memory value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(Request memory self, string memory key, bytes memory value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(Request memory self, string memory key, int256 value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(Request memory self, string memory key, uint256 value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(Request memory self, string memory key, string[] memory values) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0xd948e1b24126d8c4acd5578d8f403c23c6fdf5f98f403eedc2587cf874cfe0d1\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10 ** 18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(\\n    bytes32 specId,\\n    bytes4 callbackFunctionSignature\\n  ) internal view returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(\\n    bytes32 requestId\\n  )\\n    internal\\n    recordChainlinkFulfillment(requestId) // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x3ede49735636eb1ac60706164b9c02f5aae31da54c8920a07ffc11efdbc45e79\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd8d9f0bfa3c4a0d4f4ab3450b623521029623b2a347ffcacc06d016eab9628d6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x3dc245e626e56be2131954e11792bf4b84a20c83110a63b028254aa8909b8fae\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/contracts/GTokenOpenPnlFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport '@chainlink/contracts/src/v0.8/ChainlinkClient.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../interfaces/IGToken.sol';\\nimport '../interfaces/IOwnable.sol';\\nimport '../interfaces/IOpenTradesPnlFeed.sol';\\n\\npragma solidity 0.8.7;\\n\\ncontract GTokenOpenPnlFeed is ChainlinkClient, IOpenTradesPnlFeed{\\n    using Chainlink for Chainlink.Request;\\n    \\n    // Constants\\n    uint public immutable LINK_FEE_BALANCE_DIVIDER;\\n    uint constant MIN_ANSWERS = 1;\\n    uint constant MIN_REQUESTS_START = 1 hours;\\n    uint constant MAX_REQUESTS_START = 1 weeks;\\n    uint constant MIN_REQUESTS_EVERY = 1 hours;\\n    uint constant MAX_REQUESTS_EVERY = 1 days;\\n    uint constant MIN_REQUESTS_COUNT = 3;\\n    uint constant MAX_REQUESTS_COUNT = 10;\\n    \\n    // Params\\n    IGToken public immutable gToken;\\n\\n    uint public requestsStart = 2 days;\\n    uint public requestsEvery = 6 hours;\\n    uint public requestsCount = 4;\\n\\n    address[] public oracles;\\n    bytes32 public job;\\n    uint public minAnswers;\\n\\n    // State\\n    int[] public nextEpochValues;\\n    uint public override nextEpochValuesRequestCount;\\n    uint public nextEpochValuesLastRequest;\\n\\n    uint public lastRequestId;\\n    mapping(bytes32 => uint) public requestIds;   // chainlink request id => requestId\\n    mapping(uint => Request) public requests;     // requestId => request\\n    mapping(uint => int[]) public requestAnswers; // requestId => open pnl (1e18)\\n\\n    struct Request{\\n        bool initiated;\\n        bool active;\\n        uint linkFeePerNode;\\n    }\\n\\n    // Events\\n    event NumberParamUpdated(string name, uint newValue);\\n    event OracleUpdated(uint index, address newValue);\\n    event OraclesUpdated(address[] newValues);\\n    event JobUpdated(bytes32 newValue);\\n\\n    event NextEpochValuesReset(\\n        uint indexed currEpoch,\\n        uint requestsResetCount\\n    );\\n\\n    event NewEpochForced(uint indexed newEpoch);\\n\\n    event NextEpochValueRequested(\\n        uint indexed currEpoch,\\n        uint indexed requestId,\\n        bytes32 job,\\n        uint oraclesCount,\\n        uint linkFeePerNode\\n    );\\n\\n    event NewEpoch(\\n        uint indexed newEpoch,\\n        uint indexed requestId,\\n        int[] epochMedianValues,\\n        int epochAverageValue,\\n        uint newEpochPositiveOpenPnl\\n    );\\n\\n    event RequestValueReceived(\\n        bool isLate,\\n        uint indexed currEpoch,\\n        uint indexed requestId,\\n        bytes32 oracleRequestId,\\n        address indexed oracle,\\n        int requestValue,\\n        uint linkFee\\n    );\\n\\n    event RequestMedianValueSet(\\n        uint indexed currEpoch,\\n        uint indexed requestId,\\n        int[] requestValues,\\n        int medianValue\\n    );\\n\\n    constructor(\\n        uint _LINK_FEE_BALANCE_DIVIDER,\\n        address _linkToken,\\n        IGToken _gToken,\\n        address[] memory _oracles,\\n        bytes32 _job,\\n        uint _minAnswers\\n    ){\\n        require(_LINK_FEE_BALANCE_DIVIDER > 0\\n            && _linkToken != address(0)\\n            && address(_gToken) != address(0)\\n            && _oracles.length > 0\\n            && _job != bytes32(0)\\n            && _minAnswers >= MIN_ANSWERS\\n            && _minAnswers % 2 == 1\\n            && _minAnswers <= _oracles.length / 2, \\\"WRONG_PARAMS\\\");\\n        \\n        LINK_FEE_BALANCE_DIVIDER = _LINK_FEE_BALANCE_DIVIDER;\\n        \\n        setChainlinkToken(_linkToken);\\n\\n        gToken = _gToken;\\n        oracles = _oracles;\\n        job = _job;\\n        minAnswers = _minAnswers;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGTokenOwner { // 2-week timelock\\n        require(msg.sender == IOwnable(address(gToken)).owner(), \\\"ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    modifier onlyGTokenManager { // 3-day timelock\\n        require(msg.sender == gToken.manager(), \\\"ONLY_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyGTokenAdmin { // bypasses timelock, emergency functions only\\n        require(msg.sender == gToken.admin(), \\\"ONLY_ADMIN\\\");\\n        _;\\n    }\\n\\n    // Manage parameters\\n    function updateRequestsStart(uint newValue) public onlyGTokenOwner{\\n        require(newValue >= MIN_REQUESTS_START, \\\"BELOW_MIN\\\");\\n        require(newValue <= MAX_REQUESTS_START, \\\"ABOVE_MAX\\\");\\n        requestsStart = newValue;\\n        emit NumberParamUpdated(\\\"requestsStart\\\", newValue);\\n    }\\n\\n    function updateRequestsEvery(uint newValue) public onlyGTokenOwner{\\n        require(newValue >= MIN_REQUESTS_EVERY, \\\"BELOW_MIN\\\");\\n        require(newValue <= MAX_REQUESTS_EVERY, \\\"ABOVE_MAX\\\");\\n        requestsEvery = newValue;\\n        emit NumberParamUpdated(\\\"requestsEvery\\\", newValue);\\n    }\\n\\n    function updateRequestsCount(uint newValue) public onlyGTokenOwner{\\n        require(newValue >= MIN_REQUESTS_COUNT, \\\"BELOW_MIN\\\");\\n        require(newValue <= MAX_REQUESTS_COUNT, \\\"ABOVE_MAX\\\");\\n        requestsCount = newValue;\\n        emit NumberParamUpdated(\\\"requestsCount\\\", newValue);\\n    }\\n\\n    function updateRequestsInfoBatch(\\n        uint newRequestsStart,\\n        uint newRequestsEvery,\\n        uint newRequestsCount\\n    ) external onlyGTokenOwner{\\n        updateRequestsStart(newRequestsStart);\\n        updateRequestsEvery(newRequestsEvery);\\n        updateRequestsCount(newRequestsCount);\\n    }\\n\\n    function updateMinAnswers(uint newValue) external onlyGTokenManager{\\n        require(newValue >= MIN_ANSWERS, \\\"BELOW_MIN\\\");\\n        require(newValue % 2 == 1, \\\"EVEN\\\");\\n        require(newValue <= oracles.length / 2, \\\"ABOVE_MAX\\\");\\n        minAnswers = newValue;\\n        emit NumberParamUpdated(\\\"minAnswers\\\", newValue);\\n    }\\n\\n    function updateOracle(uint _index, address newValue) external onlyGTokenOwner{\\n        require(_index < oracles.length, \\\"INDEX_TOO_BIG\\\");\\n        require(newValue != address(0), \\\"VALUE_0\\\");\\n        oracles[_index] = newValue;\\n        emit OracleUpdated(_index, newValue);\\n    }\\n\\n    function updateOracles(address[] memory newValues) external onlyGTokenOwner{\\n        require(newValues.length >= minAnswers * 2, \\\"ARRAY_TOO_SMALL\\\");\\n        oracles = newValues;\\n        emit OraclesUpdated(newValues);\\n    }\\n\\n    function updateJob(bytes32 newValue) external onlyGTokenManager{\\n        require(newValue != bytes32(0), \\\"VALUE_0\\\");\\n        job = newValue;\\n        emit JobUpdated(newValue);\\n    }\\n\\n    // Emergency function in case of oracle manipulation\\n    function resetNextEpochValueRequests() external onlyGTokenAdmin{\\n        uint reqToResetCount = nextEpochValuesRequestCount;\\n        require(reqToResetCount > 0, \\\"NO_REQUEST_TO_RESET\\\");\\n\\n        delete nextEpochValues;\\n\\n        nextEpochValuesRequestCount = 0;\\n        nextEpochValuesLastRequest = 0;\\n\\n        for(uint i; i < reqToResetCount; i++){\\n            requests[lastRequestId - i].active = false;\\n        }\\n\\n        emit NextEpochValuesReset(\\n            gToken.currentEpoch(),\\n            reqToResetCount\\n        );\\n    }\\n\\n    // Safety function that anyone can call in case the function above is used in an abusive manner,\\n    // which could theoretically delay withdrawals indefinitely since it prevents new epochs\\n    function forceNewEpoch() external{\\n        require(block.timestamp - gToken.currentEpochStart()\\n            >= requestsStart + requestsEvery * requestsCount,\\\"TOO_EARLY\\\");\\n        uint newEpoch = startNewEpoch();\\n        emit NewEpochForced(newEpoch);\\n    }\\n\\n    // Called by gToken contract\\n    function newOpenPnlRequestOrEpoch() external override {\\n        bool firstRequest = nextEpochValuesLastRequest == 0;\\n\\n        if(firstRequest\\n            && block.timestamp - gToken.currentEpochStart() >= requestsStart){\\n            makeOpenPnlRequest();\\n\\n        }else if(!firstRequest\\n            && block.timestamp - nextEpochValuesLastRequest >= requestsEvery){\\n            if(nextEpochValuesRequestCount < requestsCount){\\n                makeOpenPnlRequest();\\n                \\n            }else if(nextEpochValues.length >= requestsCount){\\n                startNewEpoch();\\n            }\\n        }\\n    }\\n\\n    // Create requests\\n    function makeOpenPnlRequest() private{\\n        Chainlink.Request memory linkRequest = buildChainlinkRequest(\\n            job,\\n            address(this),\\n            this.fulfill.selector\\n        );\\n\\n        uint linkFeePerNode = IERC20(chainlinkTokenAddress())\\n            .balanceOf(address(this))\\n            / LINK_FEE_BALANCE_DIVIDER\\n            / oracles.length;\\n\\n        requests[++lastRequestId] = Request({\\n            initiated: true,\\n            active: true,\\n            linkFeePerNode: linkFeePerNode\\n        });\\n\\n        nextEpochValuesRequestCount++;\\n        nextEpochValuesLastRequest = block.timestamp;\\n        \\n        for(uint i; i < oracles.length; i ++){\\n            requestIds[sendChainlinkRequestTo(\\n                oracles[i],\\n                linkRequest,\\n                linkFeePerNode\\n            )] = lastRequestId;\\n        }\\n\\n        emit NextEpochValueRequested(\\n            gToken.currentEpoch(),\\n            lastRequestId,\\n            job,\\n            oracles.length,\\n            linkFeePerNode\\n        );\\n    }\\n\\n    // Handle answers\\n    function fulfill(\\n        bytes32 requestId,\\n        int value // 1e18\\n    ) external recordChainlinkFulfillment(requestId){\\n\\n        uint reqId = requestIds[requestId];\\n        delete requestIds[requestId];\\n\\n        Request memory r = requests[reqId];\\n        uint currentEpoch = gToken.currentEpoch();\\n\\n        emit RequestValueReceived(\\n            !r.active,\\n            currentEpoch,\\n            reqId,\\n            requestId,\\n            msg.sender,\\n            value,\\n            r.linkFeePerNode\\n        );\\n\\n        if(!r.active){\\n            return;\\n        }\\n\\n        int[] storage answers = requestAnswers[reqId];\\n        answers.push(value);\\n\\n        if(answers.length == minAnswers){\\n            int medianValue = median(answers);\\n            nextEpochValues.push(medianValue);\\n\\n            emit RequestMedianValueSet(\\n                currentEpoch,\\n                reqId,\\n                answers,\\n                medianValue\\n            );\\n\\n            requests[reqId].active = false;\\n            delete requestAnswers[reqId];\\n        }\\n    }\\n\\n    // Increment epoch and update feed value\\n    function startNewEpoch() private returns(uint newEpoch){\\n        nextEpochValuesRequestCount = 0;\\n        nextEpochValuesLastRequest = 0;\\n\\n        uint currentEpochPositiveOpenPnl = gToken.currentEpochPositiveOpenPnl();\\n\\n        // If all responses arrived, use mean, otherwise it means we forced a new epoch,\\n        // so as a safety we use the last epoch value\\n        int newEpochOpenPnl = nextEpochValues.length >= requestsCount ?\\n            average(nextEpochValues) : int(currentEpochPositiveOpenPnl);\\n\\n        uint finalNewEpochPositiveOpenPnl = gToken.updateAccPnlPerTokenUsed(\\n            currentEpochPositiveOpenPnl,\\n            newEpochOpenPnl > 0 ? uint(newEpochOpenPnl) : 0\\n        );\\n\\n        newEpoch = gToken.currentEpoch();\\n\\n        emit NewEpoch(\\n            newEpoch,\\n            lastRequestId,\\n            nextEpochValues,\\n            newEpochOpenPnl,\\n            finalNewEpochPositiveOpenPnl\\n        );\\n\\n        delete nextEpochValues;\\n    }\\n\\n    // Median function\\n    function swap(int[] memory array, uint i, uint j) private pure{\\n        (array[i], array[j]) = (array[j], array[i]);\\n    }\\n    \\n    function sort(int[] memory array, uint begin, uint end) private pure{\\n        if (begin >= end) { return; }\\n\\n        uint j = begin;\\n        int pivot = array[j];\\n\\n        for (uint i = begin + 1; i < end; ++i) {\\n            if (array[i] < pivot) {\\n                swap(array, i, ++j);\\n            }\\n        }\\n\\n        swap(array, begin, j);\\n        sort(array, begin, j);\\n        sort(array, j + 1, end);\\n    }\\n    \\n    function median(int[] memory array) private pure returns(int){\\n        sort(array, 0, array.length);\\n\\n        return array.length % 2 == 0 ?\\n            (array[array.length / 2 - 1] + array[array.length / 2]) / 2 :\\n            array[array.length / 2];\\n    }\\n\\n    // Average function\\n    function average(int[] memory array) private pure returns(int){\\n        int sum;\\n        for(uint i; i < array.length; i++){\\n            sum += array[i];\\n        }\\n\\n        return sum / int(array.length);\\n    }\\n}\",\"keccak256\":\"0xf602b2741cb3deab8992d696b536c6e35ff3baca296dea3f26320dc305c66d40\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xe1c4eac213e8cc146ef165a92ff5b652c250d2340d4954b7647eed73e601757f\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenTradesPnlFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IOpenTradesPnlFeed {\\n    function nextEpochValuesRequestCount() external view returns (uint);\\n\\n    function newOpenPnlRequestOrEpoch() external;\\n}\",\"keccak256\":\"0xf90041d1880327966b959b367c37ed039024003bb3bb28570b10af4da2d8b9e0\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IOwnable{\\n    function owner() external view returns(address);\\n}\",\"keccak256\":\"0xdfb820fbb94d5cb280c46f0e4c9fad4668cdb0bc65224ba459635cc4937e55ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260016004556202a30060065561546060075560046008553480156200002857600080fd5b5060405162002c7238038062002c728339810160408190526200004b9162000205565b6000861180156200006457506001600160a01b03851615155b80156200007957506001600160a01b03841615155b801562000087575060008351115b80156200009357508115155b8015620000a1575060018110155b8015620000ba5750620000b66002826200033e565b6001145b8015620000d6575060028351620000d2919062000327565b8111155b620001165760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b604482015260640160405180910390fd5b6080869052600280546001600160a01b0319166001600160a01b0387161790556001600160601b0319606085901b1660a05282516200015d90600990602086019062000172565b50600a91909155600b55506200039a92505050565b828054828255906000526020600020908101928215620001ca579160200282015b82811115620001ca57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000193565b50620001d8929150620001dc565b5090565b5b80821115620001d85760008155600101620001dd565b8051620002008162000381565b919050565b60008060008060008060c087890312156200021f57600080fd5b86519550602080880151620002348162000381565b6040890151909650620002478162000381565b60608901519095506001600160401b03808211156200026557600080fd5b818a0191508a601f8301126200027a57600080fd5b8151818111156200028f576200028f6200036b565b8060051b604051601f19603f83011681018181108582111715620002b757620002b76200036b565b604052828152858101935084860182860187018f1015620002d757600080fd5b600095505b838610156200030557620002f081620001f3565b855260019590950194938601938601620002dc565b508098505050505050506080870151915060a087015190509295509295509295565b60008262000339576200033962000355565b500490565b60008262000350576200035062000355565b500690565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200039757600080fd5b50565b60805160a05160601c6128316200044160003960008181610234015281816103e001528181610540015281816106b7015281816108490152818161091001528181610a5c01528181610bb001528181610e45015281816110720152818161116c015281816112790152818161145201528181611562015281816119c301528181611ab201528181611bb80152611c7101526000818161038f01526117fe01526128316000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063a90d67a1116100f9578063cb9945a111610097578063e704fc5111610071578063e704fc51146103b1578063f5ed447c146103b9578063fbfa4b7f146103cc578063fc2a88c3146103d557600080fd5b8063cb9945a114610364578063ce43963214610377578063d5a28da31461038a57600080fd5b8063bda71d04116100d3578063bda71d041461032d578063bea1675814610340578063bef35b7914610349578063c591ff4c1461035157600080fd5b8063a90d67a114610308578063b006812c14610311578063b8feee641461032457600080fd5b806376ffb9bd1161016657806392c3c58b1161014057806392c3c58b146102c75780639496f9e3146102cf5780639dbc2686146102e2578063a5c2aafd146102f557600080fd5b806376ffb9bd1461022f57806381d12c58146102565780638645f7a8146102a757600080fd5b80632eb64ec4146101ae57806334fa54a1146101ca578063473d2f21146101df5780635614a211146101e857806358e7ec3c146101fb5780635b69a7d814610204575b600080fd5b6101b760065481565b6040519081526020015b60405180910390f35b6101dd6101d83660046123a4565b6103de565b005b6101b7600e5481565b6101dd6101f63660046123a4565b61053e565b6101b7600a5481565b6102176102123660046123a4565b61068b565b6040516001600160a01b0390911681526020016101c1565b6102177f000000000000000000000000000000000000000000000000000000000000000081565b61028a6102643660046123a4565b6011602052600090815260409020805460019091015460ff808316926101009004169083565b6040805193151584529115156020840152908201526060016101c1565b6101b76102b53660046123a4565b60106020526000908152604090205481565b6101dd6106b5565b6101dd6102dd3660046123a4565b61090e565b6101dd6102f03660046122b6565b610a5a565b6101dd6103033660046123a4565b610bae565b6101b760075481565b6101b761031f3660046123a4565b610cfe565b6101b7600d5481565b6101dd61033b3660046123bd565b610d1f565b6101b7600b5481565b6101dd611061565b6101dd61035f366004612428565b61116a565b6101b76103723660046123bd565b611246565b6101dd6103853660046123f8565b611277565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b6101dd611433565b6101dd6103c73660046123a4565b611560565b6101b760085481565b6101b7600f5481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043757600080fd5b505afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190612299565b6001600160a01b0316336001600160a01b0316146104a85760405162461bcd60e51b815260040161049f9061264a565b60405180910390fd5b610e108110156104ca5760405162461bcd60e51b815260040161049f90612627565b620151808111156104ed5760405162461bcd60e51b815260040161049f90612604565b600781905560408051818152600d918101919091526c7265717565737473457665727960981b6060820152602081018290526000805160206127dc833981519152906080015b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561059757600080fd5b505afa1580156105ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cf9190612299565b6001600160a01b0316336001600160a01b0316146105ff5760405162461bcd60e51b815260040161049f9061264a565b60038110156106205760405162461bcd60e51b815260040161049f90612627565b600a8111156106415760405162461bcd60e51b815260040161049f90612604565b600881905560408051818152600d918101919091526c1c995c5d595cdd1cd0dbdd5b9d609a1b6060820152602081018290526000805160206127dc83398151915290608001610533565b6009818154811061069b57600080fd5b6000918252602090912001546001600160a01b0316905081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190612299565b6001600160a01b0316336001600160a01b0316146107935760405162461bcd60e51b815260206004820152600a60248201526927a7262cafa0a226a4a760b11b604482015260640161049f565b600d54806107d95760405162461bcd60e51b81526020600482015260136024820152721393d7d49154555154d517d513d7d49154d155606a1b604482015260640161049f565b6107e5600c60006121b6565b6000600d819055600e8190555b818110156108465760006011600083600f5461080e9190612728565b8152602081019190915260400160002080549115156101000261ff00199092169190911790558061083e8161273f565b9150506107f2565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a057600080fd5b505afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d891906123df565b6040518281527f605f3f824643ee56deaf2717c1581f7ad3df423365aede8e2d771b6b3a30fd2b9060200160405180910390a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561096757600080fd5b505afa15801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190612299565b6001600160a01b0316336001600160a01b0316146109ee5760405162461bcd60e51b815260206004820152600c60248201526b27a7262cafa6a0a720a3a2a960a11b604482015260640161049f565b80610a255760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b604482015260640161049f565b600a8190556040518181527f9f3fa8c139076940687248e93aed7dda099cf9a90cc38c428cf3d5b6b642fdd490602001610533565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab357600080fd5b505afa158015610ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aeb9190612299565b6001600160a01b0316336001600160a01b031614610b1b5760405162461bcd60e51b815260040161049f9061264a565b600b54610b29906002612709565b81511015610b6b5760405162461bcd60e51b815260206004820152600f60248201526e105494905657d513d3d7d4d3505313608a1b604482015260640161049f565b8051610b7e9060099060208401906121d4565b507f4b806663ee384a0ada322e70cdf3fd2046424181359f2470a97a6f0cec328e9c816040516105339190612570565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0757600080fd5b505afa158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f9190612299565b6001600160a01b0316336001600160a01b031614610c6f5760405162461bcd60e51b815260040161049f9061264a565b610e10811015610c915760405162461bcd60e51b815260040161049f90612627565b62093a80811115610cb45760405162461bcd60e51b815260040161049f90612604565b600681905560408051818152600d918101919091526c1c995c5d595cdd1cd4dd185c9d609a1b6060820152602081018290526000805160206127dc83398151915290608001610533565b600c8181548110610d0e57600080fd5b600091825260209091200154905081565b60008281526005602052604090205482906001600160a01b03163314610d985760405162461bcd60e51b815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604482015267081c995c5d595cdd60c21b606482015260840161049f565b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a26000838152601060209081526040808320805490849055808452601183528184208251606081018452815460ff808216151583526101009091041615158186015260019190910154818401528251630ecce30160e31b815292519194909390926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692637667180892600480840193919291829003018186803b158015610e8957600080fd5b505afa158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec191906123df565b6020808401516040808601518151921583529282018a9052810188905260608101919091529091503390849083907f5e18490ff1cb10067b5d5b0aec04678191bb80c2d229a2578526c389270027bf9060800160405180910390a48160200151610f2d57505050505050565b6000838152601260209081526040822080546001810182558184529190922001869055600b5481541415611057576000610fb582805480602002602001604051908101604052809291908181526020018280548015610fab57602002820191906000526020600020905b815481526020019060010190808311610f97575b5050505050611719565b600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701819055604051909150859084907f2cc31a5acf549ee44228d82c08e88b92b9d332ad5193a2290a79345e113c0b4c9061102390869086906125bd565b60405180910390a36000858152601160209081526040808320805461ff001916905560129091528120611055916121b6565b505b505050505b505050565b600e541580801561110e57506006547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361a8c8c46040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c957600080fd5b505afa1580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110191906123df565b61110b9042612728565b10155b1561111e5761111b6117dd565b50565b8015801561113a5750600754600e546111379042612728565b10155b1561111b57600854600d5410156111535761111b6117dd565b600854600c541061111b57611166611a9d565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c357600080fd5b505afa1580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb9190612299565b6001600160a01b0316336001600160a01b03161461122b5760405162461bcd60e51b815260040161049f9061264a565b61123483610bae565b61123d826103de565b61105c8161053e565b6012602052816000526040600020818154811061126257600080fd5b90600052602060002001600091509150505481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112d057600080fd5b505afa1580156112e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113089190612299565b6001600160a01b0316336001600160a01b0316146113385760405162461bcd60e51b815260040161049f9061264a565b60095482106113795760405162461bcd60e51b815260206004820152600d60248201526c494e4445585f544f4f5f42494760981b604482015260640161049f565b6001600160a01b0381166113b95760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b604482015260640161049f565b80600983815481106113cd576113cd61279a565b60009182526020918290200180546001600160a01b0319166001600160a01b0393841617905560408051858152928416918301919091527f8323208263554cf72b3658bcdbd0f96f4ccf2c9c919fa30246aaee34537b5509910160405180910390a15050565b6008546007546114439190612709565b60065461145091906126af565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361a8c8c46040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a957600080fd5b505afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e191906123df565b6114eb9042612728565b10156115255760405162461bcd60e51b8152602060048201526009602482015268544f4f5f4541524c5960b81b604482015260640161049f565b600061152f611a9d565b60405190915081907f446b8726654d216fe9781583f0f34cc8ac84d240bb3ad5293c10e2ff831f1eb290600090a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b957600080fd5b505afa1580156115cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f19190612299565b6001600160a01b0316336001600160a01b0316146116405760405162461bcd60e51b815260206004820152600c60248201526b27a7262cafa6a0a720a3a2a960a11b604482015260640161049f565b60018110156116615760405162461bcd60e51b815260040161049f90612627565b61166c60028261275a565b6001146116a45760405162461bcd60e51b815260040161049f9060208082526004908201526322ab22a760e11b604082015260600190565b6009546116b3906002906126f5565b8111156116d25760405162461bcd60e51b815260040161049f90612604565b600b81905560408051818152600a91810191909152696d696e416e737765727360b01b6060820152602081018290526000805160206127dc83398151915290608001610533565b60006117288260008451611d54565b60028251611736919061275a565b1561176757816002835161174a91906126f5565b8151811061175a5761175a61279a565b60200260200101516117d7565b6002826002845161177891906126f5565b815181106117885761178861279a565b6020026020010151836001600286516117a191906126f5565b6117ab9190612728565b815181106117bb576117bb61279a565b60200260200101516117cd919061266e565b6117d791906126c7565b92915050565b60006117f3600a543063bda71d0460e01b611e17565b6009549091506000907f000000000000000000000000000000000000000000000000000000000000000061182f6002546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561187057600080fd5b505afa158015611884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a891906123df565b6118b291906126f5565b6118bc91906126f5565b905060405180606001604052806001151581526020016001151581526020018281525060116000600f600081546118f29061273f565b9182905550815260208082019290925260409081016000908120845181549486015161ffff1990951690151561ff0019161761010094151594909402939093178355920151600190910155600d80549161194b8361273f565b909155505042600e5560005b6009548110156119bd57600f546010600061199a6009858154811061197e5761197e61279a565b6000918252602090912001546001600160a01b03168787611e3c565b8152602081019190915260400160002055806119b58161273f565b915050611957565b50600f547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1a57600080fd5b505afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5291906123df565b600a5460095460408051928352602083019190915281018490527fb5f2943c67db1794f39a3b46b95086765f48c7e05d12851dc6607bcdb0bcc7a39060600160405180910390a35050565b600080600d819055506000600e8190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663faf33f296040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0957600080fd5b505afa158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4191906123df565b600854600c549192506000911015611b595781611bb2565b611bb2600c805480602002602001604051908101604052809291908181526020018280548015611ba857602002820191906000526020600020905b815481526020019060010190808311611b94575b5050505050611ecf565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637361a5448460008513611bf5576000611bf7565b845b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381600087803b158015611c3557600080fd5b505af1158015611c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6d91906123df565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b815260040160206040518083038186803b158015611cc857600080fd5b505afa158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0091906123df565b9350600f54847f263c5efc95bb2e2134e3fc52ae914fbd38e2381f37d95ae011a56f996578bf17600c8585604051611d3a939291906125df565b60405180910390a3611d4e600c60006121b6565b50505090565b808210611d6057505050565b60008290506000848281518110611d7957611d7961279a565b602002602001015190506000846001611d9291906126af565b90505b83811015611de45781868281518110611db057611db061279a565b60200260200101511215611dd457611dd48682611dcc8661273f565b955085611f2b565b611ddd8161273f565b9050611d95565b50611df0858584611f2b565b611dfb858584611d54565b611e1085611e0a8460016126af565b85611d54565b5050505050565b611e1f612239565b611e27612239565b611e3381868686611f9e565b95945050505050565b600454600090611e4d8160016126af565b600455835160408086015160808701515191516000936320214ca360e11b93611e859386938493923092918a916001916024016124e1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050611ec586838684611fe4565b9695505050505050565b60008060005b8351811015611f1757838181518110611ef057611ef061279a565b602002602001015182611f03919061266e565b915080611f0f8161273f565b915050611ed5565b508251611f2490826126c7565b9392505050565b828181518110611f3d57611f3d61279a565b6020026020010151838381518110611f5757611f5761279a565b6020026020010151848481518110611f7157611f7161279a565b60200260200101858481518110611f8a57611f8a61279a565b602090810291909101019190915252505050565b611fa6612239565b611fb68560800151610100612151565b50508284526001600160a01b03821660208501526001600160e01b031981166040850152835b949350505050565b6040516bffffffffffffffffffffffff193060601b1660208201526034810184905260009060540160408051808303601f1901815282825280516020918201206000818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600254604051630200057560e51b81526001600160a01b0390911690634000aea0906120a790889087908790600401612549565b602060405180830381600087803b1580156120c157600080fd5b505af11580156120d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f99190612382565b611fdc5760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261604482015262636c6560e81b606482015260840161049f565b60408051808201909152606081526000602082015261217160208361275a565b156121995761218160208361275a565b61218c906020612728565b61219690836126af565b91505b506020828101829052604080518085526000815290920101905290565b508054600082559060005260206000209081019061111b9190612274565b828054828255906000526020600020908101928215612229579160200282015b8281111561222957825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906121f4565b50612235929150612274565b5090565b6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b5b808211156122355760008155600101612275565b8035612294816127c6565b919050565b6000602082840312156122ab57600080fd5b8151611f24816127c6565b600060208083850312156122c957600080fd5b823567ffffffffffffffff808211156122e157600080fd5b818501915085601f8301126122f557600080fd5b813581811115612307576123076127b0565b8060051b604051601f19603f8301168101818110858211171561232c5761232c6127b0565b604052828152858101935084860182860187018a101561234b57600080fd5b600095505b838610156123755761236181612289565b855260019590950194938601938601612350565b5098975050505050505050565b60006020828403121561239457600080fd5b81518015158114611f2457600080fd5b6000602082840312156123b657600080fd5b5035919050565b600080604083850312156123d057600080fd5b50508035926020909101359150565b6000602082840312156123f157600080fd5b5051919050565b6000806040838503121561240b57600080fd5b82359150602083013561241d816127c6565b809150509250929050565b60008060006060848603121561243d57600080fd5b505081359360208301359350604090920135919050565b6000815480845260208085019450836000528060002060005b838110156124895781548752958201956001918201910161246d565b509495945050505050565b6000815180845260005b818110156124ba5760208185018101518683018201520161249e565b818111156124cc576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0389811682526020820189905260408201889052861660608201526001600160e01b03198516608082015260a0810184905260c0810183905261010060e0820181905260009061253a83820185612494565b9b9a5050505050505050505050565b60018060a01b0384168152826020820152606060408201526000611e336060830184612494565b6020808252825182820181905260009190848201906040850190845b818110156125b15783516001600160a01b03168352928401929184019160010161258c565b50909695505050505050565b6040815260006125d06040830185612454565b90508260208301529392505050565b6060815260006125f26060830186612454565b60208301949094525060400152919050565b602080825260099082015268082849eac8abe9a82b60bb1b604082015260600190565b6020808252600990820152682122a627abafa6a4a760b91b604082015260600190565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b600080821280156001600160ff1b03849003851316156126905761269061276e565b600160ff1b83900384128116156126a9576126a961276e565b50500190565b600082198211156126c2576126c261276e565b500190565b6000826126d6576126d6612784565b600160ff1b8214600019841416156126f0576126f061276e565b500590565b60008261270457612704612784565b500490565b60008160001904831182151516156127235761272361276e565b500290565b60008282101561273a5761273a61276e565b500390565b60006000198214156127535761275361276e565b5060010190565b60008261276957612769612784565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461111b57600080fdfe127735ae9d047cae55da37db2c8ee184c735aacd68cef068d4e70be6a41661d9a26469706673582212203d1844005c3375864fa038817201953d1c1500432c28e0855e0f81b4010e1e5c64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063a90d67a1116100f9578063cb9945a111610097578063e704fc5111610071578063e704fc51146103b1578063f5ed447c146103b9578063fbfa4b7f146103cc578063fc2a88c3146103d557600080fd5b8063cb9945a114610364578063ce43963214610377578063d5a28da31461038a57600080fd5b8063bda71d04116100d3578063bda71d041461032d578063bea1675814610340578063bef35b7914610349578063c591ff4c1461035157600080fd5b8063a90d67a114610308578063b006812c14610311578063b8feee641461032457600080fd5b806376ffb9bd1161016657806392c3c58b1161014057806392c3c58b146102c75780639496f9e3146102cf5780639dbc2686146102e2578063a5c2aafd146102f557600080fd5b806376ffb9bd1461022f57806381d12c58146102565780638645f7a8146102a757600080fd5b80632eb64ec4146101ae57806334fa54a1146101ca578063473d2f21146101df5780635614a211146101e857806358e7ec3c146101fb5780635b69a7d814610204575b600080fd5b6101b760065481565b6040519081526020015b60405180910390f35b6101dd6101d83660046123a4565b6103de565b005b6101b7600e5481565b6101dd6101f63660046123a4565b61053e565b6101b7600a5481565b6102176102123660046123a4565b61068b565b6040516001600160a01b0390911681526020016101c1565b6102177f000000000000000000000000000000000000000000000000000000000000000081565b61028a6102643660046123a4565b6011602052600090815260409020805460019091015460ff808316926101009004169083565b6040805193151584529115156020840152908201526060016101c1565b6101b76102b53660046123a4565b60106020526000908152604090205481565b6101dd6106b5565b6101dd6102dd3660046123a4565b61090e565b6101dd6102f03660046122b6565b610a5a565b6101dd6103033660046123a4565b610bae565b6101b760075481565b6101b761031f3660046123a4565b610cfe565b6101b7600d5481565b6101dd61033b3660046123bd565b610d1f565b6101b7600b5481565b6101dd611061565b6101dd61035f366004612428565b61116a565b6101b76103723660046123bd565b611246565b6101dd6103853660046123f8565b611277565b6101b77f000000000000000000000000000000000000000000000000000000000000000081565b6101dd611433565b6101dd6103c73660046123a4565b611560565b6101b760085481565b6101b7600f5481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043757600080fd5b505afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190612299565b6001600160a01b0316336001600160a01b0316146104a85760405162461bcd60e51b815260040161049f9061264a565b60405180910390fd5b610e108110156104ca5760405162461bcd60e51b815260040161049f90612627565b620151808111156104ed5760405162461bcd60e51b815260040161049f90612604565b600781905560408051818152600d918101919091526c7265717565737473457665727960981b6060820152602081018290526000805160206127dc833981519152906080015b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561059757600080fd5b505afa1580156105ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cf9190612299565b6001600160a01b0316336001600160a01b0316146105ff5760405162461bcd60e51b815260040161049f9061264a565b60038110156106205760405162461bcd60e51b815260040161049f90612627565b600a8111156106415760405162461bcd60e51b815260040161049f90612604565b600881905560408051818152600d918101919091526c1c995c5d595cdd1cd0dbdd5b9d609a1b6060820152602081018290526000805160206127dc83398151915290608001610533565b6009818154811061069b57600080fd5b6000918252602090912001546001600160a01b0316905081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190612299565b6001600160a01b0316336001600160a01b0316146107935760405162461bcd60e51b815260206004820152600a60248201526927a7262cafa0a226a4a760b11b604482015260640161049f565b600d54806107d95760405162461bcd60e51b81526020600482015260136024820152721393d7d49154555154d517d513d7d49154d155606a1b604482015260640161049f565b6107e5600c60006121b6565b6000600d819055600e8190555b818110156108465760006011600083600f5461080e9190612728565b8152602081019190915260400160002080549115156101000261ff00199092169190911790558061083e8161273f565b9150506107f2565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a057600080fd5b505afa1580156108b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d891906123df565b6040518281527f605f3f824643ee56deaf2717c1581f7ad3df423365aede8e2d771b6b3a30fd2b9060200160405180910390a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561096757600080fd5b505afa15801561097b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f9190612299565b6001600160a01b0316336001600160a01b0316146109ee5760405162461bcd60e51b815260206004820152600c60248201526b27a7262cafa6a0a720a3a2a960a11b604482015260640161049f565b80610a255760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b604482015260640161049f565b600a8190556040518181527f9f3fa8c139076940687248e93aed7dda099cf9a90cc38c428cf3d5b6b642fdd490602001610533565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab357600080fd5b505afa158015610ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aeb9190612299565b6001600160a01b0316336001600160a01b031614610b1b5760405162461bcd60e51b815260040161049f9061264a565b600b54610b29906002612709565b81511015610b6b5760405162461bcd60e51b815260206004820152600f60248201526e105494905657d513d3d7d4d3505313608a1b604482015260640161049f565b8051610b7e9060099060208401906121d4565b507f4b806663ee384a0ada322e70cdf3fd2046424181359f2470a97a6f0cec328e9c816040516105339190612570565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0757600080fd5b505afa158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f9190612299565b6001600160a01b0316336001600160a01b031614610c6f5760405162461bcd60e51b815260040161049f9061264a565b610e10811015610c915760405162461bcd60e51b815260040161049f90612627565b62093a80811115610cb45760405162461bcd60e51b815260040161049f90612604565b600681905560408051818152600d918101919091526c1c995c5d595cdd1cd4dd185c9d609a1b6060820152602081018290526000805160206127dc83398151915290608001610533565b600c8181548110610d0e57600080fd5b600091825260209091200154905081565b60008281526005602052604090205482906001600160a01b03163314610d985760405162461bcd60e51b815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604482015267081c995c5d595cdd60c21b606482015260840161049f565b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a26000838152601060209081526040808320805490849055808452601183528184208251606081018452815460ff808216151583526101009091041615158186015260019190910154818401528251630ecce30160e31b815292519194909390926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692637667180892600480840193919291829003018186803b158015610e8957600080fd5b505afa158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec191906123df565b6020808401516040808601518151921583529282018a9052810188905260608101919091529091503390849083907f5e18490ff1cb10067b5d5b0aec04678191bb80c2d229a2578526c389270027bf9060800160405180910390a48160200151610f2d57505050505050565b6000838152601260209081526040822080546001810182558184529190922001869055600b5481541415611057576000610fb582805480602002602001604051908101604052809291908181526020018280548015610fab57602002820191906000526020600020905b815481526020019060010190808311610f97575b5050505050611719565b600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701819055604051909150859084907f2cc31a5acf549ee44228d82c08e88b92b9d332ad5193a2290a79345e113c0b4c9061102390869086906125bd565b60405180910390a36000858152601160209081526040808320805461ff001916905560129091528120611055916121b6565b505b505050505b505050565b600e541580801561110e57506006547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361a8c8c46040518163ffffffff1660e01b815260040160206040518083038186803b1580156110c957600080fd5b505afa1580156110dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110191906123df565b61110b9042612728565b10155b1561111e5761111b6117dd565b50565b8015801561113a5750600754600e546111379042612728565b10155b1561111b57600854600d5410156111535761111b6117dd565b600854600c541061111b57611166611a9d565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c357600080fd5b505afa1580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb9190612299565b6001600160a01b0316336001600160a01b03161461122b5760405162461bcd60e51b815260040161049f9061264a565b61123483610bae565b61123d826103de565b61105c8161053e565b6012602052816000526040600020818154811061126257600080fd5b90600052602060002001600091509150505481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112d057600080fd5b505afa1580156112e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113089190612299565b6001600160a01b0316336001600160a01b0316146113385760405162461bcd60e51b815260040161049f9061264a565b60095482106113795760405162461bcd60e51b815260206004820152600d60248201526c494e4445585f544f4f5f42494760981b604482015260640161049f565b6001600160a01b0381166113b95760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b604482015260640161049f565b80600983815481106113cd576113cd61279a565b60009182526020918290200180546001600160a01b0319166001600160a01b0393841617905560408051858152928416918301919091527f8323208263554cf72b3658bcdbd0f96f4ccf2c9c919fa30246aaee34537b5509910160405180910390a15050565b6008546007546114439190612709565b60065461145091906126af565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361a8c8c46040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a957600080fd5b505afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e191906123df565b6114eb9042612728565b10156115255760405162461bcd60e51b8152602060048201526009602482015268544f4f5f4541524c5960b81b604482015260640161049f565b600061152f611a9d565b60405190915081907f446b8726654d216fe9781583f0f34cc8ac84d240bb3ad5293c10e2ff831f1eb290600090a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b957600080fd5b505afa1580156115cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f19190612299565b6001600160a01b0316336001600160a01b0316146116405760405162461bcd60e51b815260206004820152600c60248201526b27a7262cafa6a0a720a3a2a960a11b604482015260640161049f565b60018110156116615760405162461bcd60e51b815260040161049f90612627565b61166c60028261275a565b6001146116a45760405162461bcd60e51b815260040161049f9060208082526004908201526322ab22a760e11b604082015260600190565b6009546116b3906002906126f5565b8111156116d25760405162461bcd60e51b815260040161049f90612604565b600b81905560408051818152600a91810191909152696d696e416e737765727360b01b6060820152602081018290526000805160206127dc83398151915290608001610533565b60006117288260008451611d54565b60028251611736919061275a565b1561176757816002835161174a91906126f5565b8151811061175a5761175a61279a565b60200260200101516117d7565b6002826002845161177891906126f5565b815181106117885761178861279a565b6020026020010151836001600286516117a191906126f5565b6117ab9190612728565b815181106117bb576117bb61279a565b60200260200101516117cd919061266e565b6117d791906126c7565b92915050565b60006117f3600a543063bda71d0460e01b611e17565b6009549091506000907f000000000000000000000000000000000000000000000000000000000000000061182f6002546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a082319060240160206040518083038186803b15801561187057600080fd5b505afa158015611884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a891906123df565b6118b291906126f5565b6118bc91906126f5565b905060405180606001604052806001151581526020016001151581526020018281525060116000600f600081546118f29061273f565b9182905550815260208082019290925260409081016000908120845181549486015161ffff1990951690151561ff0019161761010094151594909402939093178355920151600190910155600d80549161194b8361273f565b909155505042600e5560005b6009548110156119bd57600f546010600061199a6009858154811061197e5761197e61279a565b6000918252602090912001546001600160a01b03168787611e3c565b8152602081019190915260400160002055806119b58161273f565b915050611957565b50600f547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1a57600080fd5b505afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5291906123df565b600a5460095460408051928352602083019190915281018490527fb5f2943c67db1794f39a3b46b95086765f48c7e05d12851dc6607bcdb0bcc7a39060600160405180910390a35050565b600080600d819055506000600e8190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663faf33f296040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0957600080fd5b505afa158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4191906123df565b600854600c549192506000911015611b595781611bb2565b611bb2600c805480602002602001604051908101604052809291908181526020018280548015611ba857602002820191906000526020600020905b815481526020019060010190808311611b94575b5050505050611ecf565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637361a5448460008513611bf5576000611bf7565b845b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381600087803b158015611c3557600080fd5b505af1158015611c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6d91906123df565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b815260040160206040518083038186803b158015611cc857600080fd5b505afa158015611cdc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0091906123df565b9350600f54847f263c5efc95bb2e2134e3fc52ae914fbd38e2381f37d95ae011a56f996578bf17600c8585604051611d3a939291906125df565b60405180910390a3611d4e600c60006121b6565b50505090565b808210611d6057505050565b60008290506000848281518110611d7957611d7961279a565b602002602001015190506000846001611d9291906126af565b90505b83811015611de45781868281518110611db057611db061279a565b60200260200101511215611dd457611dd48682611dcc8661273f565b955085611f2b565b611ddd8161273f565b9050611d95565b50611df0858584611f2b565b611dfb858584611d54565b611e1085611e0a8460016126af565b85611d54565b5050505050565b611e1f612239565b611e27612239565b611e3381868686611f9e565b95945050505050565b600454600090611e4d8160016126af565b600455835160408086015160808701515191516000936320214ca360e11b93611e859386938493923092918a916001916024016124e1565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050611ec586838684611fe4565b9695505050505050565b60008060005b8351811015611f1757838181518110611ef057611ef061279a565b602002602001015182611f03919061266e565b915080611f0f8161273f565b915050611ed5565b508251611f2490826126c7565b9392505050565b828181518110611f3d57611f3d61279a565b6020026020010151838381518110611f5757611f5761279a565b6020026020010151848481518110611f7157611f7161279a565b60200260200101858481518110611f8a57611f8a61279a565b602090810291909101019190915252505050565b611fa6612239565b611fb68560800151610100612151565b50508284526001600160a01b03821660208501526001600160e01b031981166040850152835b949350505050565b6040516bffffffffffffffffffffffff193060601b1660208201526034810184905260009060540160408051808303601f1901815282825280516020918201206000818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600254604051630200057560e51b81526001600160a01b0390911690634000aea0906120a790889087908790600401612549565b602060405180830381600087803b1580156120c157600080fd5b505af11580156120d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f99190612382565b611fdc5760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261604482015262636c6560e81b606482015260840161049f565b60408051808201909152606081526000602082015261217160208361275a565b156121995761218160208361275a565b61218c906020612728565b61219690836126af565b91505b506020828101829052604080518085526000815290920101905290565b508054600082559060005260206000209081019061111b9190612274565b828054828255906000526020600020908101928215612229579160200282015b8281111561222957825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906121f4565b50612235929150612274565b5090565b6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b5b808211156122355760008155600101612275565b8035612294816127c6565b919050565b6000602082840312156122ab57600080fd5b8151611f24816127c6565b600060208083850312156122c957600080fd5b823567ffffffffffffffff808211156122e157600080fd5b818501915085601f8301126122f557600080fd5b813581811115612307576123076127b0565b8060051b604051601f19603f8301168101818110858211171561232c5761232c6127b0565b604052828152858101935084860182860187018a101561234b57600080fd5b600095505b838610156123755761236181612289565b855260019590950194938601938601612350565b5098975050505050505050565b60006020828403121561239457600080fd5b81518015158114611f2457600080fd5b6000602082840312156123b657600080fd5b5035919050565b600080604083850312156123d057600080fd5b50508035926020909101359150565b6000602082840312156123f157600080fd5b5051919050565b6000806040838503121561240b57600080fd5b82359150602083013561241d816127c6565b809150509250929050565b60008060006060848603121561243d57600080fd5b505081359360208301359350604090920135919050565b6000815480845260208085019450836000528060002060005b838110156124895781548752958201956001918201910161246d565b509495945050505050565b6000815180845260005b818110156124ba5760208185018101518683018201520161249e565b818111156124cc576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0389811682526020820189905260408201889052861660608201526001600160e01b03198516608082015260a0810184905260c0810183905261010060e0820181905260009061253a83820185612494565b9b9a5050505050505050505050565b60018060a01b0384168152826020820152606060408201526000611e336060830184612494565b6020808252825182820181905260009190848201906040850190845b818110156125b15783516001600160a01b03168352928401929184019160010161258c565b50909695505050505050565b6040815260006125d06040830185612454565b90508260208301529392505050565b6060815260006125f26060830186612454565b60208301949094525060400152919050565b602080825260099082015268082849eac8abe9a82b60bb1b604082015260600190565b6020808252600990820152682122a627abafa6a4a760b91b604082015260600190565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b600080821280156001600160ff1b03849003851316156126905761269061276e565b600160ff1b83900384128116156126a9576126a961276e565b50500190565b600082198211156126c2576126c261276e565b500190565b6000826126d6576126d6612784565b600160ff1b8214600019841416156126f0576126f061276e565b500590565b60008261270457612704612784565b500490565b60008160001904831182151516156127235761272361276e565b500290565b60008282101561273a5761273a61276e565b500390565b60006000198214156127535761275361276e565b5060010190565b60008261276957612769612784565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461111b57600080fdfe127735ae9d047cae55da37db2c8ee184c735aacd68cef068d4e70be6a41661d9a26469706673582212203d1844005c3375864fa038817201953d1c1500432c28e0855e0f81b4010e1e5c64736f6c63430008070033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)974"
      },
      {
        "astId": 321,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1196"
      },
      {
        "astId": 327,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1054"
      },
      {
        "astId": 330,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2297,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "requestsStart",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2300,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "requestsEvery",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2303,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "requestsCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2306,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "oracles",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2308,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "job",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 2310,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "minAnswers",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2313,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "nextEpochValues",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_int256)dyn_storage"
      },
      {
        "astId": 2316,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "nextEpochValuesRequestCount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2318,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "nextEpochValuesLastRequest",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2320,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2324,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "requestIds",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2329,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "requests",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(Request)2341_storage)"
      },
      {
        "astId": 2334,
        "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
        "label": "requestAnswers",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_array(t_int256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)dyn_storage": {
        "base": "t_int256",
        "encoding": "dynamic_array",
        "label": "int256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)974": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1196": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1054": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_int256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_int256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Request)2341_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GTokenOpenPnlFeed.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)2341_storage"
      },
      "t_struct(Request)2341_storage": {
        "encoding": "inplace",
        "label": "struct GTokenOpenPnlFeed.Request",
        "members": [
          {
            "astId": 2336,
            "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
            "label": "initiated",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2338,
            "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
            "label": "active",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2340,
            "contract": "contracts/contracts/GTokenOpenPnlFeed.sol:GTokenOpenPnlFeed",
            "label": "linkFeePerNode",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}