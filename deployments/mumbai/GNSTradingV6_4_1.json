{
  "address": "0x2Fe2713B72B461116F614fFd6b33258618d10270",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "_oracleRewards",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPosDai",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marketOrdersTimeout",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "bypass",
          "type": "bool"
        }
      ],
      "name": "BypassTriggerLinkUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeDai",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterfaceV5.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.PendingMarketOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "ChainlinkCallbackTimeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "CouldNotCloseTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "MarketOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "byPassesLinkCost",
          "type": "bool"
        }
      ],
      "name": "NftOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSlippageP",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "SlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "TpUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_msgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bypassTriggerLink",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "cancelOpenLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "closeTradeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_order",
          "type": "uint256"
        }
      ],
      "name": "closeTradeMarketTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "call_data",
          "type": "bytes"
        }
      ],
      "name": "delegatedAction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "packed",
          "type": "uint256"
        }
      ],
      "name": "executeNftOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketOrdersTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPosDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeDai",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "internalType": "enum IGNSOracleRewardsV6_4_1.OpenLimitOrderType",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "slippageP",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "openTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_order",
          "type": "uint256"
        }
      ],
      "name": "openTradeMarketTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRewards",
      "outputs": [
        {
          "internalType": "contract IGNSOracleRewardsV6_4_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bypass",
          "type": "bool"
        }
      ],
      "name": "setBypassTriggerLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMarketOrdersTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMaxPosDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippageP",
          "type": "uint256"
        }
      ],
      "name": "updateOpenLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "updateSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "updateTp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf95517daf727f6c3b4a7cb8199a09cf395cb21fa1e4e837fe3ce4293d1859ebc",
  "receipt": {
    "to": null,
    "from": "0xd7D1dCba2c678ee7e049BD55176354E7C5bBdcCA",
    "contractAddress": "0x2Fe2713B72B461116F614fFd6b33258618d10270",
    "transactionIndex": 3,
    "gasUsed": "4683675",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000008000000000000000000000000000400000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000004000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000040000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000001000000000000000000000000000000000000000100000",
    "blockHash": "0x71a27e96d5a3ed1374a25677b13e56de4ca231285ee3c0a2e4debcf66c4e37ab",
    "transactionHash": "0xf95517daf727f6c3b4a7cb8199a09cf395cb21fa1e4e837fe3ce4293d1859ebc",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 46769260,
        "transactionHash": "0xf95517daf727f6c3b4a7cb8199a09cf395cb21fa1e4e837fe3ce4293d1859ebc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d7d1dcba2c678ee7e049bd55176354e7c5bbdcca",
          "0x00000000000000000000000004ba3ef4c023c1006019a0f9baf6e70455e41fcf"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001f33153f28d240000000000000000000000000000000000000000000000000072659e6d45cfe8e500000000000000000000000000000000000000000000004b1091aa37c8d4517900000000000000000000000000000000000000000000000070726d195342c4e500000000000000000000000000000000000000000000004b1284db8bbb617579",
        "logIndex": 6,
        "blockHash": "0x71a27e96d5a3ed1374a25677b13e56de4ca231285ee3c0a2e4debcf66c4e37ab"
      }
    ],
    "blockNumber": 46769260,
    "cumulativeGasUsed": "4879424",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x20dE1F4D1792453912A536011F26C06a5090ec34",
    "0x3df6f96c55B7111fdEEF05af1eE0Bb525038EaE5",
    "0x0593d5aE5EC5E56f434D558c6cEd709DbE9F6f74",
    "0x8f1a782d26b901686C66F6E8906978F255b24372",
    "0xd4Ea2aB16E29954c1fC9D17487b54b2c46F0cd74",
    "100000000000000000000000",
    30
  ],
  "numDeployments": 31,
  "solcInputHash": "3c7f3890fe0edbac3cd9d869577febbf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"_oracleRewards\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPosDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketOrdersTimeout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bypass\",\"type\":\"bool\"}],\"name\":\"BypassTriggerLinkUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.PendingMarketOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"ChainlinkCallbackTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CouldNotCloseTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"MarketOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"byPassesLinkCost\",\"type\":\"bool\"}],\"name\":\"NftOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSlippageP\",\"type\":\"uint256\"}],\"name\":\"OpenLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"SlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"TpUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bypassTriggerLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"cancelOpenLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"closeTradeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"closeTradeMarketTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call_data\",\"type\":\"bytes\"}],\"name\":\"delegatedAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packed\",\"type\":\"uint256\"}],\"name\":\"executeNftOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketOrdersTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPosDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"internalType\":\"enum IGNSOracleRewardsV6_4_1.OpenLimitOrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"openTradeMarketTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRewards\",\"outputs\":[{\"internalType\":\"contract IGNSOracleRewardsV6_4_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bypass\",\"type\":\"bool\"}],\"name\":\"setBypassTriggerLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMarketOrdersTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxPosDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippageP\",\"type\":\"uint256\"}],\"name\":\"updateOpenLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"updateSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"updateTp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GNSTradingV6_4_1.sol\":\"GNSTradingV6_4_1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/contracts/GNSTradingV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"../interfaces/GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"../interfaces/GNSReferralsInterfaceV6_2.sol\\\";\\nimport \\\"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\\\";\\nimport \\\"../interfaces/IGNSOracleRewardsV6_4_1.sol\\\";\\nimport \\\"../v6.2/Delegatable.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\nimport \\\"../libraries/TradeUtils.sol\\\";\\nimport \\\"../libraries/PackingUtils.sol\\\";\\n\\ncontract GNSTradingV6_4_1 is Delegatable {\\n    using TradeUtils for address;\\n    using PackingUtils for uint256;\\n\\n    // Contracts (constant)\\n    StorageInterfaceV5 public immutable storageT;\\n    IGNSOracleRewardsV6_4_1 public immutable oracleRewards;\\n    GNSPairInfosInterfaceV6 public immutable pairInfos;\\n    GNSReferralsInterfaceV6_2 public immutable referrals;\\n    GNSBorrowingFeesInterfaceV6_4 public immutable borrowingFees;\\n\\n    // Params (constant)\\n    uint private constant PRECISION = 1e10;\\n    uint private constant MAX_SL_P = 75; // -75% PNL\\n\\n    // Params (adjustable)\\n    uint public maxPosDai; // 1e18 (eg. 75000 * 1e18)\\n    uint public marketOrdersTimeout; // block (eg. 30)\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n\\n    mapping(address => bool) public bypassTriggerLink; // Doesn't have to pay link in executeNftOrder()\\n\\n    // Events\\n    event Done(bool done);\\n    event Paused(bool paused);\\n\\n    event NumberUpdated(string name, uint value);\\n    event BypassTriggerLinkUpdated(address user, bool bypass);\\n\\n    event MarketOrderInitiated(uint indexed orderId, address indexed trader, uint indexed pairIndex, bool open);\\n\\n    event OpenLimitPlaced(address indexed trader, uint indexed pairIndex, uint index);\\n    event OpenLimitUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newPrice,\\n        uint newTp,\\n        uint newSl,\\n        uint maxSlippageP\\n    );\\n    event OpenLimitCanceled(address indexed trader, uint indexed pairIndex, uint index);\\n\\n    event TpUpdated(address indexed trader, uint indexed pairIndex, uint index, uint newTp);\\n    event SlUpdated(address indexed trader, uint indexed pairIndex, uint index, uint newSl);\\n\\n    event NftOrderInitiated(uint orderId, address indexed trader, uint indexed pairIndex, bool byPassesLinkCost);\\n\\n    event ChainlinkCallbackTimeout(uint indexed orderId, StorageInterfaceV5.PendingMarketOrder order);\\n    event CouldNotCloseTrade(address indexed trader, uint indexed pairIndex, uint index);\\n\\n    constructor(\\n        StorageInterfaceV5 _storageT,\\n        IGNSOracleRewardsV6_4_1 _oracleRewards,\\n        GNSPairInfosInterfaceV6 _pairInfos,\\n        GNSReferralsInterfaceV6_2 _referrals,\\n        GNSBorrowingFeesInterfaceV6_4 _borrowingFees,\\n        uint _maxPosDai,\\n        uint _marketOrdersTimeout\\n    ) {\\n        require(\\n            address(_storageT) != address(0) &&\\n                address(_oracleRewards) != address(0) &&\\n                address(_pairInfos) != address(0) &&\\n                address(_referrals) != address(0) &&\\n                address(_borrowingFees) != address(0) &&\\n                _maxPosDai > 0 &&\\n                _marketOrdersTimeout > 0,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        storageT = _storageT;\\n        oracleRewards = _oracleRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        borrowingFees = _borrowingFees;\\n\\n        maxPosDai = _maxPosDai;\\n        marketOrdersTimeout = _marketOrdersTimeout;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n        _;\\n    }\\n    modifier notContract() {\\n        require(tx.origin == msg.sender);\\n        _;\\n    }\\n    modifier notDone() {\\n        require(!isDone, \\\"DONE\\\");\\n        _;\\n    }\\n\\n    // Manage params\\n    function setMaxPosDai(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        maxPosDai = value;\\n        emit NumberUpdated(\\\"maxPosDai\\\", value);\\n    }\\n\\n    function setMarketOrdersTimeout(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        marketOrdersTimeout = value;\\n        emit NumberUpdated(\\\"marketOrdersTimeout\\\", value);\\n    }\\n\\n    function setBypassTriggerLink(address user, bool bypass) external onlyGov {\\n        bypassTriggerLink[user] = bypass;\\n\\n        emit BypassTriggerLinkUpdated(user, bypass);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n        emit Paused(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n        emit Done(isDone);\\n    }\\n\\n    // Open new trade (MARKET/LIMIT)\\n    function openTrade(\\n        StorageInterfaceV5.Trade memory t,\\n        IGNSOracleRewardsV6_4_1.OpenLimitOrderType orderType, // LEGACY => market\\n        uint slippageP, // 1e10 (%)\\n        address referrer\\n    ) external notContract notDone {\\n        require(!isPaused, \\\"PAUSED\\\");\\n        require(t.openPrice * slippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n        require(t.openPrice > 0, \\\"PRICE_ZERO\\\");\\n\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        address sender = _msgSender();\\n\\n        require(\\n            storageT.openTradesCount(sender, t.pairIndex) +\\n                storageT.pendingMarketOpenCount(sender, t.pairIndex) +\\n                storageT.openLimitOrdersCount(sender, t.pairIndex) <\\n                storageT.maxTradesPerPair(),\\n            \\\"MAX_TRADES_PER_PAIR\\\"\\n        );\\n\\n        require(storageT.pendingOrderIdsCount(sender) < storageT.maxPendingMarketOrders(), \\\"MAX_PENDING_ORDERS\\\");\\n        require(t.positionSizeDai <= maxPosDai, \\\"ABOVE_MAX_POS\\\");\\n        require(t.positionSizeDai * t.leverage >= pairsStored.pairMinLevPosDai(t.pairIndex), \\\"BELOW_MIN_POS\\\");\\n\\n        // require(\\n        //     t.leverage > 0 &&\\n        //         t.leverage >= pairsStored.pairMinLeverage(t.pairIndex) &&\\n        //         t.leverage <= _pairMaxLeverage(pairsStored, t.pairIndex),\\n        //     \\\"LEVERAGE_INCORRECT\\\"\\n        // );\\n\\n        require(t.tp == 0 || (t.buy ? t.tp > t.openPrice : t.tp < t.openPrice), \\\"WRONG_TP\\\");\\n        require(t.sl == 0 || (t.buy ? t.sl < t.openPrice : t.sl > t.openPrice), \\\"WRONG_SL\\\");\\n\\n        (uint priceImpactP, ) = pairInfos.getTradePriceImpact(0, t.pairIndex, t.buy, t.positionSizeDai * t.leverage);\\n        require(priceImpactP * t.leverage <= pairInfos.maxNegativePnlOnOpenP(), \\\"PRICE_IMPACT_TOO_HIGH\\\");\\n\\n        // storageT.transferDai(sender, address(storageT), t.positionSizeDai);\\n\\n        if (orderType != IGNSOracleRewardsV6_4_1.OpenLimitOrderType.LEGACY) {\\n            // uint index = storageT.firstEmptyOpenLimitIndex(sender, t.pairIndex);\\n\\n            // storageT.storeOpenLimitOrder(\\n            //     StorageInterfaceV5.OpenLimitOrder(\\n            //         sender,\\n            //         t.pairIndex,\\n            //         index,\\n            //         t.positionSizeDai,\\n            //         0,\\n            //         t.buy,\\n            //         t.leverage,\\n            //         t.tp,\\n            //         t.sl,\\n            //         t.openPrice,\\n            //         t.openPrice,\\n            //         block.number,\\n            //         0\\n            //     )\\n            // );\\n\\n            // oracleRewards.setOpenLimitOrderType(sender, t.pairIndex, index, orderType);\\n\\n            // address c = storageT.callbacks();\\n            // c.setTradeLastUpdated(\\n            //     sender,\\n            //     t.pairIndex,\\n            //     index,\\n            //     TradingCallbacksV6_4.TradeType.LIMIT,\\n            //     ChainUtils.getBlockNumber()\\n            // );\\n            // c.setTradeData(sender, t.pairIndex, index, TradingCallbacksV6_4.TradeType.LIMIT, slippageP);\\n\\n            // emit OpenLimitPlaced(sender, t.pairIndex, index);\\n        } else {\\n            uint orderId = aggregator.getPrice(\\n                t.pairIndex,\\n                AggregatorInterfaceV6_4.OrderType.MARKET_OPEN,\\n                t.positionSizeDai * t.leverage,\\n                ChainUtils.getBlockNumber()\\n            );\\n\\n            storageT.storePendingMarketOrder(\\n                StorageInterfaceV5.PendingMarketOrder(\\n                    StorageInterfaceV5.Trade(\\n                        sender,\\n                        t.pairIndex,\\n                        0,\\n                        0,\\n                        t.positionSizeDai,\\n                        0,\\n                        t.buy,\\n                        t.leverage,\\n                        t.tp,\\n                        t.sl\\n                    ),\\n                    0,\\n                    t.openPrice,\\n                    slippageP,\\n                    0,\\n                    0\\n                ),\\n                orderId,\\n                true\\n            );\\n\\n            emit MarketOrderInitiated(orderId, sender, t.pairIndex, true);\\n        }\\n\\n        // referrals.registerPotentialReferrer(sender, referrer);\\n    }\\n\\n    // Close trade (MARKET)\\n    function closeTradeMarket(uint pairIndex, uint index) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\\n        StorageInterfaceV5.TradeInfo memory i = storageT.openTradesInfo(sender, pairIndex, index);\\n\\n        require(storageT.pendingOrderIdsCount(sender) < storageT.maxPendingMarketOrders(), \\\"MAX_PENDING_ORDERS\\\");\\n        require(!i.beingMarketClosed, \\\"ALREADY_BEING_CLOSED\\\");\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint orderId = storageT.priceAggregator().getPrice(\\n            pairIndex,\\n            AggregatorInterfaceV6_4.OrderType.MARKET_CLOSE,\\n            (t.initialPosToken * i.tokenPriceDai * t.leverage) / PRECISION,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        storageT.storePendingMarketOrder(\\n            StorageInterfaceV5.PendingMarketOrder(\\n                StorageInterfaceV5.Trade(sender, pairIndex, index, 0, 0, 0, false, 0, 0, 0),\\n                0,\\n                0,\\n                0,\\n                0,\\n                0\\n            ),\\n            orderId,\\n            false\\n        );\\n\\n        emit MarketOrderInitiated(orderId, sender, pairIndex, false);\\n    }\\n\\n    // Manage limit order (OPEN)\\n    function updateOpenLimitOrder(\\n        uint pairIndex,\\n        uint index,\\n        uint price, // PRECISION\\n        uint tp,\\n        uint sl,\\n        uint maxSlippageP\\n    ) external notContract notDone {\\n        require(price > 0, \\\"PRICE_ZERO\\\");\\n\\n        address sender = _msgSender();\\n        require(storageT.hasOpenLimitOrder(sender, pairIndex, index), \\\"NO_LIMIT\\\");\\n\\n        StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(sender, pairIndex, index);\\n\\n        require(tp == 0 || (o.buy ? tp > price : tp < price), \\\"WRONG_TP\\\");\\n        require(sl == 0 || (o.buy ? sl < price : sl > price), \\\"WRONG_SL\\\");\\n\\n        require(price * maxSlippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n\\n        _checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.OPEN);\\n\\n        o.minPrice = price;\\n        o.maxPrice = price;\\n        o.tp = tp;\\n        o.sl = sl;\\n\\n        storageT.updateOpenLimitOrder(o);\\n\\n        address c = storageT.callbacks();\\n        c.setTradeLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksV6_4.TradeType.LIMIT,\\n            ChainUtils.getBlockNumber()\\n        );\\n        c.setTradeData(sender, pairIndex, index, TradingCallbacksV6_4.TradeType.LIMIT, maxSlippageP);\\n\\n        emit OpenLimitUpdated(sender, pairIndex, index, price, tp, sl, maxSlippageP);\\n    }\\n\\n    function cancelOpenLimitOrder(uint pairIndex, uint index) external notContract notDone {\\n        address sender = _msgSender();\\n        require(storageT.hasOpenLimitOrder(sender, pairIndex, index), \\\"NO_LIMIT\\\");\\n\\n        StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(sender, pairIndex, index);\\n\\n        _checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.OPEN);\\n\\n        storageT.unregisterOpenLimitOrder(sender, pairIndex, index);\\n        storageT.transferDai(address(storageT), sender, o.positionSize);\\n\\n        emit OpenLimitCanceled(sender, pairIndex, index);\\n    }\\n\\n    // Manage limit order (TP/SL)\\n    function updateTp(uint pairIndex, uint index, uint newTp) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        _checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.TP);\\n\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        storageT.updateTp(sender, pairIndex, index, newTp);\\n        storageT.callbacks().setTpLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksV6_4.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit TpUpdated(sender, pairIndex, index, newTp);\\n    }\\n\\n    function updateSl(uint pairIndex, uint index, uint newSl) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        _checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.SL);\\n\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint maxSlDist = (t.openPrice * MAX_SL_P) / 100 / t.leverage;\\n\\n        require(\\n            newSl == 0 || (t.buy ? newSl >= t.openPrice - maxSlDist : newSl <= t.openPrice + maxSlDist),\\n            \\\"SL_TOO_BIG\\\"\\n        );\\n\\n        storageT.updateSl(sender, pairIndex, index, newSl);\\n        storageT.callbacks().setSlLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksV6_4.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit SlUpdated(sender, pairIndex, index, newSl);\\n    }\\n\\n    // Execute limit order\\n    function executeNftOrder(uint256 packed) external notContract notDone {\\n        (uint _orderType, address trader, uint pairIndex, uint index, , ) = packed.unpackExecuteNftOrder();\\n\\n        StorageInterfaceV5.LimitOrder orderType = StorageInterfaceV5.LimitOrder(_orderType);\\n        IGNSOracleRewardsV6_4_1.TriggeredLimitId memory triggeredLimitId = _checkNoPendingTrigger(\\n            trader,\\n            pairIndex,\\n            index,\\n            orderType\\n        );\\n\\n        StorageInterfaceV5.Trade memory t;\\n        bool isOpenLimit = orderType == StorageInterfaceV5.LimitOrder.OPEN;\\n\\n        if (isOpenLimit) {\\n            require(storageT.hasOpenLimitOrder(trader, pairIndex, index), \\\"NO_LIMIT\\\");\\n        } else {\\n            t = storageT.openTrades(trader, pairIndex, index);\\n\\n            require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n            if (orderType == StorageInterfaceV5.LimitOrder.LIQ) {\\n                if (t.sl > 0) {\\n                    uint liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                        GNSBorrowingFeesInterfaceV6_4.LiqPriceInput(\\n                            t.trader,\\n                            t.pairIndex,\\n                            t.index,\\n                            t.openPrice,\\n                            t.buy,\\n                            (t.initialPosToken *\\n                                storageT.openTradesInfo(t.trader, t.pairIndex, t.index).tokenPriceDai) / PRECISION,\\n                            t.leverage\\n                        )\\n                    );\\n\\n                    require(t.buy ? liqPrice > t.sl : liqPrice < t.sl, \\\"HAS_SL\\\");\\n                }\\n            } else {\\n                require(orderType != StorageInterfaceV5.LimitOrder.SL || t.sl > 0, \\\"NO_SL\\\");\\n                require(orderType != StorageInterfaceV5.LimitOrder.TP || t.tp > 0, \\\"NO_TP\\\");\\n            }\\n        }\\n\\n        address sender = _msgSender();\\n        bool byPassesLinkCost = bypassTriggerLink[sender];\\n\\n        uint leveragedPosDai;\\n\\n        if (isOpenLimit) {\\n            StorageInterfaceV5.OpenLimitOrder memory l = storageT.getOpenLimitOrder(trader, pairIndex, index);\\n\\n            uint _leveragedPosDai = l.positionSize * l.leverage;\\n            (uint priceImpactP, ) = pairInfos.getTradePriceImpact(0, l.pairIndex, l.buy, _leveragedPosDai);\\n\\n            require(priceImpactP * l.leverage <= pairInfos.maxNegativePnlOnOpenP(), \\\"PRICE_IMPACT_TOO_HIGH\\\");\\n\\n            if (!byPassesLinkCost) {\\n                leveragedPosDai = _leveragedPosDai;\\n            }\\n        } else if (!byPassesLinkCost) {\\n            leveragedPosDai =\\n                (t.initialPosToken * storageT.openTradesInfo(trader, pairIndex, index).tokenPriceDai * t.leverage) /\\n                PRECISION;\\n        }\\n\\n        if (leveragedPosDai > 0) {\\n            storageT.transferLinkToAggregator(sender, pairIndex, leveragedPosDai);\\n        }\\n\\n        uint orderId = _getPriceNftOrder(\\n            isOpenLimit,\\n            trader,\\n            pairIndex,\\n            index,\\n            isOpenLimit ? TradingCallbacksV6_4.TradeType.LIMIT : TradingCallbacksV6_4.TradeType.MARKET,\\n            orderType,\\n            leveragedPosDai\\n        );\\n\\n        StorageInterfaceV5.PendingNftOrder memory pendingNftOrder;\\n        pendingNftOrder.nftHolder = sender;\\n        pendingNftOrder.nftId = 0;\\n        pendingNftOrder.trader = trader;\\n        pendingNftOrder.pairIndex = pairIndex;\\n        pendingNftOrder.index = index;\\n        pendingNftOrder.orderType = orderType;\\n\\n        storageT.storePendingNftOrder(pendingNftOrder, orderId);\\n        oracleRewards.storeTrigger(triggeredLimitId);\\n\\n        emit NftOrderInitiated(orderId, trader, pairIndex, byPassesLinkCost);\\n    }\\n\\n    // Market timeout\\n    function openTradeMarketTimeout(uint _order) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT.reqID_pendingMarketOrder(_order);\\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        require(o.block > 0 && block.number >= o.block + marketOrdersTimeout, \\\"WAIT_TIMEOUT\\\");\\n        require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n        require(t.leverage > 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n        storageT.unregisterPendingMarketOrder(_order, true);\\n        storageT.transferDai(address(storageT), sender, t.positionSizeDai);\\n\\n        emit ChainlinkCallbackTimeout(_order, o);\\n    }\\n\\n    function closeTradeMarketTimeout(uint _order) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT.reqID_pendingMarketOrder(_order);\\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        require(o.block > 0 && block.number >= o.block + marketOrdersTimeout, \\\"WAIT_TIMEOUT\\\");\\n        require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n        require(t.leverage == 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n        storageT.unregisterPendingMarketOrder(_order, false);\\n\\n        (bool success, ) = address(this).delegatecall(\\n            abi.encodeWithSignature(\\\"closeTradeMarket(uint256,uint256)\\\", t.pairIndex, t.index)\\n        );\\n\\n        if (!success) {\\n            emit CouldNotCloseTrade(sender, t.pairIndex, t.index);\\n        }\\n\\n        emit ChainlinkCallbackTimeout(_order, o);\\n    }\\n\\n    // Helpers (private)\\n    function _checkNoPendingTrigger(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        StorageInterfaceV5.LimitOrder orderType\\n    ) private view returns (IGNSOracleRewardsV6_4_1.TriggeredLimitId memory triggeredLimitId) {\\n        triggeredLimitId = IGNSOracleRewardsV6_4_1.TriggeredLimitId(trader, pairIndex, index, orderType);\\n        require(\\n            !oracleRewards.triggered(triggeredLimitId) || oracleRewards.timedOut(triggeredLimitId),\\n            \\\"PENDING_TRIGGER\\\"\\n        );\\n    }\\n\\n    function _pairMaxLeverage(PairsStorageInterfaceV6 pairsStored, uint pairIndex) private view returns (uint) {\\n        uint max = TradingCallbacksV6_4(storageT.callbacks()).pairMaxLeverage(pairIndex);\\n        return max > 0 ? max : pairsStored.pairMaxLeverage(pairIndex);\\n    }\\n\\n    function _getPriceNftOrder(\\n        bool isOpenLimit,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType tradeType,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        uint leveragedPosDai\\n    ) private returns (uint orderId) {\\n        TradingCallbacksV6_4.LastUpdated memory lastUpdated = TradingCallbacksV6_4(storageT.callbacks())\\n            .tradeLastUpdated(trader, pairIndex, index, tradeType);\\n\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n        orderId = aggregator.getPrice(\\n            pairIndex,\\n            isOpenLimit ? AggregatorInterfaceV6_4.OrderType.LIMIT_OPEN : AggregatorInterfaceV6_4.OrderType.LIMIT_CLOSE,\\n            leveragedPosDai,\\n            isOpenLimit ? lastUpdated.limit : orderType == StorageInterfaceV5.LimitOrder.SL\\n                ? lastUpdated.sl\\n                : orderType == StorageInterfaceV5.LimitOrder.TP\\n                ? lastUpdated.tp\\n                : lastUpdated.created\\n        );\\n    }\\n}\",\"keccak256\":\"0xb9a267369d1045e84120b1bc894b789224a58b39941ed85afa33998b7d081055\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface ChainlinkFeedInterfaceV5{\\n    function latestRoundData() external view returns (uint80,int,uint,uint,uint80);\\n}\",\"keccak256\":\"0x4f39b41b3bdadfb7233fac30c60cedfd20d534ba536c0b016818dd01b47728b1\",\"license\":\"MIT\"},\"contracts/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface GNSBorrowingFeesInterfaceV6_4 {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(uint indexed pairIndex, uint16 indexed prevGroupIndex, uint16 indexed newGroupIndex);\\n    event GroupUpdated(uint16 indexed groupIndex, uint32 feePerBlock, uint72 maxOi, uint48 feeExponent);\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(uint indexed pairIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupAccFeesUpdated(uint16 indexed groupIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(LiqPriceInput calldata) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(BorrowingFeeInput memory) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(uint pairIndex, bool long, uint positionSizeDai) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\",\"keccak256\":\"0x45e49a29961376e50a705047ffcf736885fe69fa9be03e40140102544300cb2b\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface GNSPairInfosInterfaceV6 {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(address, uint, uint) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(address trader, uint pairIndex, uint index, bool long) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\",\"keccak256\":\"0x7f6341ee7fb757eba372d876035758b9f3ad043299353787ea9fd3964c53be4c\",\"license\":\"MIT\"},\"contracts/interfaces/GNSReferralsInterfaceV6_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface GNSReferralsInterfaceV6_2 {\\n    function registerPotentialReferrer(address trader, address referral) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeDai,\\n        uint pairOpenFeeP,\\n        uint tokenPriceDai\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(address trader) external view returns (address referrer);\\n}\",\"keccak256\":\"0xdb14be0f281b38f10b8a2a5e4bb58fd9290ac5580680e8d92cb717b61f38b962\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IGNSOracleRewardsV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {StorageInterfaceV5} from \\\"./StorageInterfaceV5.sol\\\";\\n\\ninterface IGNSOracleRewardsV6_4_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeTrigger(TriggeredLimitId calldata) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeOracleReward(TriggeredLimitId calldata, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n}\",\"keccak256\":\"0xfecddbf188240437e0730d4dd7fd0b6306d5a07049e1fc59a2cc0d95a1399108\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xe1c4eac213e8cc146ef165a92ff5b652c250d2340d4954b7647eed73e601757f\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0x1aba6c110d3893750103e30bd9556f785887576264ba70aa2c4f719eda7de3c4\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(uint) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosDai(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\",\"keccak256\":\"0x664be7bcc46917987f32350f6bdb4e925679875f828e8aef07f0f14c7a4d43d2\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\\n\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n\\n    function openTrades(address, uint, uint) external view returns (Trade memory);\\n\\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n\\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\",\"keccak256\":\"0xb878c2794b85f554cd41e925a457e789e71b2512fdc0e39ce4552c1194094fab\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x0b1aef35747e180443d65683c29cebff6cc9eaaac364f29f1a619f68b8df9b82\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (block.chainid == ARBITRUM_MAINNET || block.chainid == ARBITRUM_GOERLI) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(uint blockNumber) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\",\"keccak256\":\"0x0dc4bd22d718155e7f7471ffb0776c8df4fa0e192999c08aa3572a2f839319d4\",\"license\":\"MIT\"},\"contracts/libraries/PackingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n\\nlibrary PackingUtils {\\n    function pack(uint256[] memory values, uint256[] memory bitLengths) external pure returns (uint256 packed) {\\n        require(values.length == bitLengths.length, \\\"Mismatch in the lengths of values and bitLengths arrays\\\");\\n\\n        uint256 currentShift;\\n\\n        for (uint256 i; i < values.length; i++) {\\n            require(currentShift + bitLengths[i] <= 256, \\\"Packed value exceeds 256 bits\\\");\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            require(values[i] <= maxValue, \\\"Value too large for specified bit length\\\");\\n\\n            uint256 maskedValue = values[i] & maxValue;\\n            packed |= maskedValue << currentShift;\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack(uint256 packed, uint256[] memory bitLengths) external pure returns (uint256[] memory values) {\\n        values = new uint256[](bitLengths.length);\\n\\n        uint256 currentShift;\\n        for (uint256 i; i < bitLengths.length; i++) {\\n            require(currentShift + bitLengths[i] <= 256, \\\"Unpacked value exceeds 256 bits\\\");\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            uint256 mask = maxValue << currentShift;\\n            values[i] = (packed & mask) >> currentShift;\\n\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack256To64(uint256 packed) external pure returns (uint64 a, uint64 b, uint64 c, uint64 d) {\\n        a = uint64(packed);\\n        b = uint64(packed >> 64);\\n        c = uint64(packed >> 128);\\n        d = uint64(packed >> 192);\\n    }\\n\\n    // Function-specific unpacking utils\\n    function unpackExecuteNftOrder(\\n        uint256 packed\\n    ) external pure returns (uint256 a, address b, uint256 c, uint256 d, uint256 e, uint256 f) {\\n        a = packed & 0xFF; // 8 bits\\n        b = address(uint160(packed >> 8)); // 160 bits\\n        c = (packed >> 168) & 0xFFFF; // 16 bits\\n        d = (packed >> 184) & 0xFFFF; // 16 bits\\n        e = (packed >> 200) & 0xFFFF; // 16 bits\\n        f = (packed >> 216) & 0xFFFF; // 16 bits\\n    }\\n}\",\"keccak256\":\"0xdcd2340e726bdea11bbd2f77d8240e2641b12042b09038b6b4179d9c0784246b\",\"license\":\"MIT\"},\"contracts/libraries/TradeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\n\\nlibrary TradeUtils {\\n    function _getTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type\\n    )\\n        internal\\n        view\\n        returns (\\n            TradingCallbacksV6_4,\\n            TradingCallbacksV6_4.LastUpdated memory,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory\\n        )\\n    {\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        TradingCallbacksV6_4.LastUpdated memory l = callbacks.tradeLastUpdated(trader, pairIndex, index, _type);\\n\\n        return (callbacks, l, TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type));\\n    }\\n\\n    function setTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        uint32 b = uint32(blockNumber);\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        callbacks.setTradeLastUpdated(\\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\\n            TradingCallbacksV6_4.LastUpdated(b, b, b, b)\\n        );\\n    }\\n\\n    function setSlLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksV6_4 callbacks,\\n            TradingCallbacksV6_4.LastUpdated memory l,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.sl = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTpLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksV6_4 callbacks,\\n            TradingCallbacksV6_4.LastUpdated memory l,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.tp = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTradeData(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint maxSlippageP\\n    ) external {\\n        require(maxSlippageP <= type(uint40).max, \\\"OVERFLOW\\\");\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        callbacks.setTradeData(\\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\\n            TradingCallbacksV6_4.TradeData(uint40(maxSlippageP), 0)\\n        );\\n    }\\n}\",\"keccak256\":\"0x92d3284521659bf0fcd6c4f19405deea55167883384af672ca7f335c092c5da7\",\"license\":\"MIT\"},\"contracts/v6.2/Delegatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nabstract contract Delegatable {\\n    mapping(address => address) public delegations;\\n    address private senderOverride;\\n\\n    function setDelegate(address delegate) external {\\n        require(tx.origin == msg.sender, \\\"NO_CONTRACT\\\");\\n\\n        delegations[msg.sender] = delegate;\\n    }\\n\\n    function removeDelegate() external {\\n        delegations[msg.sender] = address(0);\\n    }\\n\\n    function delegatedAction(address trader, bytes calldata call_data) external returns (bytes memory) {\\n        require(delegations[trader] == msg.sender, \\\"DELEGATE_NOT_APPROVED\\\");\\n\\n        senderOverride = trader;\\n        (bool success, bytes memory result) = address(this).delegatecall(call_data);\\n        if (!success) {\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577 (return the original revert reason)\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n\\n        senderOverride = address(0);\\n\\n        return result;\\n    }\\n\\n    function _msgSender() public view returns (address) {\\n        if (senderOverride == address(0)) {\\n            return msg.sender;\\n        } else {\\n            return senderOverride;\\n        }\\n    }\\n}\",\"keccak256\":\"0xf67893f7af2b8332c01b808ba21439fd71de5a4853419d6774ea7c04d7c94c08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063934d1cf411610104578063b9b6573a116100a2578063ca5eb5e111610071578063ca5eb5e114610442578063d3dc753914610455578063d8defd151461047c578063fb4b71bb1461048f57600080fd5b8063b9b6573a146103e0578063be73fb99146103f3578063bffe348614610406578063c641558e1461042f57600080fd5b8063a2a3c0cb116100de578063a2a3c0cb146103a5578063ae8421e1146103b8578063b187bd26146103c0578063b81bfa05146103cd57600080fd5b8063934d1cf41461035f578063990382cf146103725780639a10cc321461038557600080fd5b8063410c0b7c116101715780636c53cc1c1161014b5780636c53cc1c1461031f5780638456cb5914610332578063876d3abd1461033a5780638f0622271461034d57600080fd5b8063410c0b7c146102dc5780634278bafe146102e5578063531cc965146102f857600080fd5b8063272300c9116101ad578063272300c914610247578063279a165c1461026e5780632c7c8f4e1461028557806336fb8b15146102b857600080fd5b8063119df25f146101d45780631346b0ff146101f957806316fff07414610220575b600080fd5b6101dc6104a2565b6040516001600160a01b0390911681526020015b60405180910390f35b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b61027760025481565b6040519081526020016101f0565b6102a861029336600461471c565b60056020526000908152604090205460ff1681565b60405190151581526020016101f0565b6102da33600090815260208190526040902080546001600160a01b0319169055565b005b61027760035481565b6102da6102f336600461475d565b6104ca565b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6102da61032d366004614c09565b6105f7565b6102da611241565b6102da610348366004614c09565b611350565b6004546102a890610100900460ff1681565b6102da61036d366004614c09565b611684565b6102da610380366004614c09565b6117de565b610398610393366004614796565b611b6f565b6040516101f09190614ef7565b6102da6103b3366004614c8f565b611caa565b6102da6122b9565b6004546102a89060ff1681565b6102da6103db366004614c09565b6123d2565b6102da6103ee366004614c8f565b61252f565b6102da610401366004614cd5565b61283b565b6101dc61041436600461471c565b6000602081905290815260409020546001600160a01b031681565b6102da61043d366004614d01565b612bea565b6102da61045036600461471c565b61315a565b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6102da61048a366004614cd5565b6131c6565b6102da61049d366004614b35565b6134ce565b6001546000906001600160a01b03166104ba57503390565b506001546001600160a01b031690565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b15801561052357600080fd5b505afa158015610537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055b9190614740565b6001600160a01b0316336001600160a01b0316146105945760405162461bcd60e51b815260040161058b90614f6c565b60405180910390fd5b6001600160a01b038216600081815260056020908152604091829020805460ff19168515159081179091558251938452908301527f3c0f648064e21cceb91d918a80bed80a58c69474a28d50fe3d9975b72be97c44910160405180910390a15050565b32331461060357600080fd5b600454610100900460ff161561062b5760405162461bcd60e51b815260040161058b90614f4e565b60405163cefbb3bd60e01b81526004810182905260009081908190819073__$0a787ca790b72760fa5f2fae68e461a66f$__9063cefbb3bd9060240160c06040518083038186803b15801561067f57600080fd5b505af4158015610693573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b79190614c3b565b5050935093509350935060008460038111156106d5576106d561526b565b905060006106e585858585614114565b905061074860405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b6000600384600381111561075e5761075e61526b565b149050801561082857604051636e6f99cd60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dcdf339a906107b7908a908a908a90600401614ea2565b60206040518083038186803b1580156107cf57600080fd5b505afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610807919061481b565b6108235760405162461bcd60e51b815260040161058b90614f2c565b610c2f565b6040516351d407ff60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3a80ffe90610878908a908a908a90600401614ea2565b6101406040518083038186803b15801561089157600080fd5b505afa1580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c99190614b18565b915060008260e00151116108ef5760405162461bcd60e51b815260040161058b90614f0a565b60028460038111156109035761090361526b565b1415610b7b57610120820151156108235760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663706faf3a6040518060e0016040528086600001516001600160a01b0316815260200186602001518152602001866040015181526020018660a0015181526020018660c00151151581526020016402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c8ff1d589600001518a602001518b604001516040518463ffffffff1660e01b81526004016109ef93929190614ea2565b60c06040518083038186803b158015610a0757600080fd5b505afa158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f9190614a98565b602001518860600151610a5291906151ef565b610a5c91906151cd565b815260e087810151602092830152604080519185901b6001600160e01b031916825283516001600160a01b031660048301529183015160248201529082015160448201526060820151606482015260808201511515608482015260a082015160a482015260c0919091015160c482015260e40160206040518083038186803b158015610ae757600080fd5b505afa158015610afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1f9190614c22565b90508260c00151610b37578261012001518110610b40565b82610120015181115b610b755760405162461bcd60e51b8152602060048201526006602482015265121054d7d4d360d21b604482015260640161058b565b50610c2f565b6001846003811115610b8f57610b8f61526b565b141580610ba157506000826101200151115b610bd55760405162461bcd60e51b81526020600482015260056024820152641393d7d4d360da1b604482015260640161058b565b6000846003811115610be957610be961526b565b141580610bfb57506000826101000151115b610c2f5760405162461bcd60e51b815260206004820152600560248201526404e4f5f54560dc1b604482015260640161058b565b6000610c396104a2565b6001600160a01b03811660009081526005602052604081205491925060ff909116908315610ed557604051632e21e28b60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b8878a2c90610cb4908e908e908e90600401614ea2565b6101a06040518083038186803b158015610ccd57600080fd5b505afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190614962565b905060008160c001518260600151610d1d91906151ef565b602083015160a0840151604051633f54af9960e11b81526000600482018190526024820193909352901515604482015260648101839052919250906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637ea95f3290608401604080518083038186803b158015610da357600080fd5b505afa158015610db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddb9190614cb1565b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f6cfc26040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3757600080fd5b505afa158015610e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6f9190614c22565b60c0840151610e7e90836151ef565b1115610ec45760405162461bcd60e51b81526020600482015260156024820152740a0a492868abe929aa08286a8bea89e9ebe90928e9605b1b604482015260640161058b565b84610ecd578193505b505050610faf565b81610faf576402540be4008560e001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c8ff1d58d8d8d6040518463ffffffff1660e01b8152600401610f3593929190614ea2565b60c06040518083038186803b158015610f4d57600080fd5b505afa158015610f61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f859190614a98565b602001518760600151610f9891906151ef565b610fa291906151ef565b610fac91906151cd565b90505b801561103857604051633348540360e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636690a806906110059086908d908690600401614ea2565b600060405180830381600087803b15801561101f57600080fd5b505af1158015611033573d6000803e3d6000fd5b505050505b6000611057858c8c8c8961104d576000611050565b60015b8d886142fe565b905061108f6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b6001600160a01b038086168252600060208301528c166040820152606081018b9052608081018a905260a081018960038111156110ce576110ce61526b565b908160038111156110e1576110e161526b565b90525060405163205fe86960e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063817fa1a490611132908490869060040161506a565b600060405180830381600087803b15801561114c57600080fd5b505af1158015611160573d6000803e3d6000fd5b505060405163e72353d560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063e72353d591506111b0908b906004016150ca565b600060405180830381600087803b1580156111ca57600080fd5b505af11580156111de573d6000803e3d6000fd5b505050508a8c6001600160a01b03167f50a583b02839381dff332433f1a37825291992d796b87483d7c51649ef504d4384876040516112299291909182521515602082015260400190565b60405180910390a35050505050505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b15801561129a57600080fd5b505afa1580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d29190614740565b6001600160a01b0316336001600160a01b0316146113025760405162461bcd60e51b815260040161058b90614f6c565b6004805460ff8082161560ff1990921682179092556040519116151581527f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2906020015b60405180910390a1565b32331461135c57600080fd5b600454610100900460ff16156113845760405162461bcd60e51b815260040161058b90614f4e565b600061138e6104a2565b60405163b66e6b0560e01b8152600481018490529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b66e6b05906024016101e06040518083038186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142d9190614a15565b8051602082015191925090158015906114575750600354826020015161145391906151b5565b4310155b6114925760405162461bcd60e51b815260206004820152600c60248201526b15d0525517d512535153d55560a21b604482015260640161058b565b826001600160a01b031681600001516001600160a01b0316146114e85760405162461bcd60e51b815260206004820152600e60248201526d2727aa2faca7aaa92fa7a92222a960911b604482015260640161058b565b60008160e00151116115365760405162461bcd60e51b815260206004820152601760248201527657524f4e475f4d41524b45545f4f524445525f5459504560481b604482015260640161058b565b604051630195728b60e71b815260048101859052600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cab9458090604401600060405180830381600087803b15801561159f57600080fd5b505af11580156115b3573d6000803e3d6000fd5b50505050608081015160405163373873db60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830181905290861660248301526044820192909252636e70e7b690606401600060405180830381600087803b15801561162e57600080fd5b505af1158015611642573d6000803e3d6000fd5b50505050837f3adaa586cdbe84dd24e45bd7dada6da933d7c2d1c7b4e4cd02fce033356decb183604051611676919061502e565b60405180910390a250505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b1580156116dd57600080fd5b505afa1580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117159190614740565b6001600160a01b0316336001600160a01b0316146117455760405162461bcd60e51b815260040161058b90614f6c565b6000811161177f5760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b604482015260640161058b565b600281905560408051818152600991810191909152686d6178506f7344616960b81b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab906080015b60405180910390a150565b3233146117ea57600080fd5b600454610100900460ff16156118125760405162461bcd60e51b815260040161058b90614f4e565b600061181c6104a2565b60405163b66e6b0560e01b8152600481018490529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b66e6b05906024016101e06040518083038186803b15801561188357600080fd5b505afa158015611897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bb9190614a15565b8051602082015191925090158015906118e5575060035482602001516118e191906151b5565b4310155b6119205760405162461bcd60e51b815260206004820152600c60248201526b15d0525517d512535153d55560a21b604482015260640161058b565b826001600160a01b031681600001516001600160a01b0316146119765760405162461bcd60e51b815260206004820152600e60248201526d2727aa2faca7aaa92fa7a92222a960911b604482015260640161058b565b60e0810151156119c25760405162461bcd60e51b815260206004820152601760248201527657524f4e475f4d41524b45545f4f524445525f5459504560481b604482015260640161058b565b604051630195728b60e71b815260048101859052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cab9458090604401600060405180830381600087803b158015611a2b57600080fd5b505af1158015611a3f573d6000803e3d6000fd5b505050602082015160408084015190516024810192909252604482015260009150309060640160408051601f198184030181529181526020820180516001600160e01b031663a2a3c0cb60e01b17905251611a9a9190614e42565b600060405180830381855af49150503d8060008114611ad5576040519150601f19603f3d011682016040523d82523d6000602084013e611ada565b606091505b5050905080611b30578160200151846001600160a01b03167f60e497734ddabcd7293fd91739aaf65cf525eb539c97be528125a235a89288d88460400151604051611b2791815260200190565b60405180910390a35b847f3adaa586cdbe84dd24e45bd7dada6da933d7c2d1c7b4e4cd02fce033356decb184604051611b60919061502e565b60405180910390a25050505050565b6001600160a01b03838116600090815260208190526040902054606091163314611bd35760405162461bcd60e51b81526020600482015260156024820152741111531151d0551157d393d517d054141493d59151605a1b604482015260640161058b565b600180546001600160a01b0319166001600160a01b03861617905560405160009081903090611c059087908790614e32565b600060405180830381855af49150503d8060008114611c40576040519150601f19603f3d011682016040523d82523d6000602084013e611c45565b606091505b509150915081611c9157604481511015611c5e57600080fd5b60048101905080806020019051810190611c789190614838565b60405162461bcd60e51b815260040161058b9190614ef7565b600180546001600160a01b031916905595945050505050565b323314611cb657600080fd5b600454610100900460ff1615611cde5760405162461bcd60e51b815260040161058b90614f4e565b6000611ce86104a2565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a3a80ffe8386866040518463ffffffff1660e01b8152600401611d3c93929190614ea2565b6101406040518083038186803b158015611d5557600080fd5b505afa158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8d9190614b18565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c8ff1d58487876040518463ffffffff1660e01b8152600401611de193929190614ea2565b60c06040518083038186803b158015611df957600080fd5b505afa158015611e0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e319190614a98565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b815260040160206040518083038186803b158015611e8c57600080fd5b505afa158015611ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec49190614c22565b60405163f7b3c6fd60e01b81526001600160a01b0385811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd9060240160206040518083038186803b158015611f2557600080fd5b505afa158015611f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5d9190614c22565b10611f9f5760405162461bcd60e51b81526020600482015260126024820152714d41585f50454e44494e475f4f524445525360701b604482015260640161058b565b8060a0015115611fe85760405162461bcd60e51b81526020600482015260146024820152731053149150511657d091525391d7d0d313d4d15160621b604482015260640161058b565b60008260e001511161200c5760405162461bcd60e51b815260040161058b90614f0a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b815260040160206040518083038186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f9190614740565b6001600160a01b0316636938c05d8760016402540be4008760e00151876020015189606001516120cf91906151ef565b6120d991906151ef565b6120e391906151cd565b6120eb6145a0565b6040518563ffffffff1660e01b815260040161210a949392919061510b565b602060405180830381600087803b15801561212457600080fd5b505af1158015612138573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215c9190614c22565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c76faf786040518060c00160405280604051806101400160405280896001600160a01b031681526020018b81526020018a81526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525081526020016000815260200160008152602001600081526020016000815260200160008152508360006040518463ffffffff1660e01b815260040161223793929190615043565b600060405180830381600087803b15801561225157600080fd5b505af1158015612265573d6000803e3d6000fd5b5050505085846001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a8660006040516122a9911515815260200190565b60405180910390a4505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b15801561231257600080fd5b505afa158015612326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234a9190614740565b6001600160a01b0316336001600160a01b03161461237a5760405162461bcd60e51b815260040161058b90614f6c565b6004805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888936113469390049091161515815260200190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b815260040160206040518083038186803b15801561242b57600080fd5b505afa15801561243f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124639190614740565b6001600160a01b0316336001600160a01b0316146124935760405162461bcd60e51b815260040161058b90614f6c565b600081116124cd5760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b604482015260640161058b565b600381905560408051818152601391810191909152721b585c9ad95d13dc99195c9cd51a5b595bdd5d606a1b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab906080016117d3565b32331461253b57600080fd5b600454610100900460ff16156125635760405162461bcd60e51b815260040161058b90614f4e565b600061256d6104a2565b604051636e6f99cd60e11b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dcdf339a906125c090849087908790600401614ea2565b60206040518083038186803b1580156125d857600080fd5b505afa1580156125ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612610919061481b565b61262c5760405162461bcd60e51b815260040161058b90614f2c565b604051632e21e28b60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b8878a2c9061267f90859088908890600401614ea2565b6101a06040518083038186803b15801561269857600080fd5b505afa1580156126ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d09190614962565b90506126df8285856003614114565b5060405163b4b0f56760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b4b0f5679061273090859088908890600401614ea2565b600060405180830381600087803b15801561274a57600080fd5b505af115801561275e573d6000803e3d6000fd5b50505050606081015160405163373873db60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830181905290851660248301526044820192909252636e70e7b690606401600060405180830381600087803b1580156127d957600080fd5b505af11580156127ed573d6000803e3d6000fd5b5050505083826001600160a01b03167ff1b38881d7f4b2b12141c5f39c5124545d6112532eb6afbe9630cdbde3ee53e98560405161282d91815260200190565b60405180910390a350505050565b32331461284757600080fd5b600454610100900460ff161561286f5760405162461bcd60e51b815260040161058b90614f4e565b60006128796104a2565b90506128888185856001614114565b506040516351d407ff60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3a80ffe906128dc90859089908990600401614ea2565b6101406040518083038186803b1580156128f557600080fd5b505afa158015612909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292d9190614b18565b905060008160e00151116129535760405162461bcd60e51b815260040161058b90614f0a565b60008160e001516064604b8460a0015161296d91906151ef565b61297791906151cd565b61298191906151cd565b90508315806129c057508160c001516129ac57808260a001516129a491906151b5565b8411156129c0565b808260a001516129bc919061520e565b8410155b6129f95760405162461bcd60e51b815260206004820152600a602482015269534c5f544f4f5f42494760b01b604482015260640161058b565b60405163a354418160e01b81526001600160a01b0384811660048301526024820188905260448201879052606482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a354418190608401600060405180830381600087803b158015612a7157600080fd5b505af1158015612a85573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae157600080fd5b505afa158015612af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b199190614740565b6001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__63a6b8633d90918589896000612b4b6145a0565b6040518763ffffffff1660e01b8152600401612b6c96959493929190614e5e565b60006040518083038186803b158015612b8457600080fd5b505af4158015612b98573d6000803e3d6000fd5b505060408051888152602081018890528993506001600160a01b03871692507f1fc4a6c7ffe506697979b8ed54dc4135cd1ecd26a2745f70b760a2492222b316910160405180910390a3505050505050565b323314612bf657600080fd5b600454610100900460ff1615612c1e5760405162461bcd60e51b815260040161058b90614f4e565b60008411612c5b5760405162461bcd60e51b815260206004820152600a60248201526950524943455f5a45524f60b01b604482015260640161058b565b6000612c656104a2565b604051636e6f99cd60e11b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dcdf339a90612cb89084908b908b90600401614ea2565b60206040518083038186803b158015612cd057600080fd5b505afa158015612ce4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d08919061481b565b612d245760405162461bcd60e51b815260040161058b90614f2c565b604051632e21e28b60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b8878a2c90612d779085908c908c90600401614ea2565b6101a06040518083038186803b158015612d9057600080fd5b505afa158015612da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc89190614962565b9050841580612de757508060a00151612de357858510612de7565b8585115b612e1e5760405162461bcd60e51b8152602060048201526008602482015267057524f4e475f54560c41b604482015260640161058b565b831580612e3b57508060a00151612e3757858411612e3b565b8584105b612e725760405162461bcd60e51b815260206004820152600860248201526715d493d391d7d4d360c21b604482015260640161058b565b600019612e7f84886151ef565b10612eb75760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640161058b565b612ec48289896003614114565b506101208101869052610140810186905260e081018590526101008101849052604051635bb3b04560e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b767608a90612f30908490600401614f8e565b600060405180830381600087803b158015612f4a57600080fd5b505af1158015612f5e573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b815260040160206040518083038186803b158015612fbc57600080fd5b505afa158015612fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff49190614740565b905073__$f600c6c046224cd62da9c8e7a0d00fc8b2$__6395ecbbea6001600160a01b038316858c8c60016130276145a0565b6040518763ffffffff1660e01b815260040161304896959493929190614e5e565b60006040518083038186803b15801561306057600080fd5b505af4158015613074573d6000803e3d6000fd5b50506040516325f40ef960e01b815273__$f600c6c046224cd62da9c8e7a0d00fc8b2$__92506325f40ef991506130c3906001600160a01b0385169087908e908e906001908c90600401614e5e565b60006040518083038186803b1580156130db57600080fd5b505af41580156130ef573d6000803e3d6000fd5b5050604080518b8152602081018b905290810189905260608101889052608081018790528b92506001600160a01b03861691507f710a8db87f04e82a9de40076812593a965f4aa48693196d2144c07ff9710e8909060a00160405180910390a3505050505050505050565b3233146131975760405162461bcd60e51b815260206004820152600b60248201526a1393d7d0d3d395149050d560aa1b604482015260640161058b565b33600090815260208190526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b3233146131d257600080fd5b600454610100900460ff16156131fa5760405162461bcd60e51b815260040161058b90614f4e565b60006132046104a2565b90506132138185856000614114565b506040516351d407ff60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3a80ffe9061326790859089908990600401614ea2565b6101406040518083038186803b15801561328057600080fd5b505afa158015613294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b89190614b18565b905060008160e00151116132de5760405162461bcd60e51b815260040161058b90614f0a565b604051637fdb96f360e01b81526001600160a01b0383811660048301526024820187905260448201869052606482018590527f00000000000000000000000000000000000000000000000000000000000000001690637fdb96f390608401600060405180830381600087803b15801561335657600080fd5b505af115801561336a573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b815260040160206040518083038186803b1580156133c657600080fd5b505afa1580156133da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133fe9190614740565b6001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__6339e765e4909184888860006134306145a0565b6040518763ffffffff1660e01b815260040161345196959493929190614e5e565b60006040518083038186803b15801561346957600080fd5b505af415801561347d573d6000803e3d6000fd5b505060408051878152602081018790528893506001600160a01b03861692507f7e06a81c7a47891ccc7455b5ccb2ed850e32bb655ccda67eb3ebaaeed83242a4910160405180910390a35050505050565b3233146134da57600080fd5b600454610100900460ff16156135025760405162461bcd60e51b815260040161058b90614f4e565b60045460ff161561353e5760405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b604482015260640161058b565b600019828560a0015161355191906151ef565b106135895760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640161058b565b60008460a00151116135ca5760405162461bcd60e51b815260206004820152600a60248201526950524943455f5a45524f60b01b604482015260640161058b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b815260040160206040518083038186803b15801561362557600080fd5b505afa158015613639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365d9190614740565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b815260040160206040518083038186803b15801561369a57600080fd5b505afa1580156136ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d29190614740565b905060006136de6104a2565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f65d9dbe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561373957600080fd5b505afa15801561374d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137719190614c22565b6020880151604051634bf3ccad60e11b81526001600160a01b03848116600483015260248201929092527f0000000000000000000000000000000000000000000000000000000000000000909116906397e7995a9060440160206040518083038186803b1580156137e157600080fd5b505afa1580156137f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138199190614c22565b6020890151604051639c8912f160e01b81526001600160a01b03858116600483015260248201929092527f000000000000000000000000000000000000000000000000000000000000000090911690639c8912f19060440160206040518083038186803b15801561388957600080fd5b505afa15801561389d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c19190614c22565b60208a01516040516307218dad60e21b81526001600160a01b03868116600483015260248201929092527f000000000000000000000000000000000000000000000000000000000000000090911690631c8636b49060440160206040518083038186803b15801561393157600080fd5b505afa158015613945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139699190614c22565b61397391906151b5565b61397d91906151b5565b106139c05760405162461bcd60e51b815260206004820152601360248201527226a0ac2faa2920a222a9afa822a92fa820a4a960691b604482015260640161058b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b815260040160206040518083038186803b158015613a1957600080fd5b505afa158015613a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a519190614c22565b60405163f7b3c6fd60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd9060240160206040518083038186803b158015613ab257600080fd5b505afa158015613ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aea9190614c22565b10613b2c5760405162461bcd60e51b81526020600482015260126024820152714d41585f50454e44494e475f4f524445525360701b604482015260640161058b565b60025487608001511115613b725760405162461bcd60e51b815260206004820152600d60248201526c41424f56455f4d41585f504f5360981b604482015260640161058b565b602087015160405163066c581160e11b815260048101919091526001600160a01b03831690630cd8b0229060240160206040518083038186803b158015613bb857600080fd5b505afa158015613bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf09190614c22565b8760e001518860800151613c0491906151ef565b1015613c425760405162461bcd60e51b815260206004820152600d60248201526c42454c4f575f4d494e5f504f5360981b604482015260640161058b565b6101008701511580613c7657508660c00151613c69578660a0015187610100015110613c76565b8660a00151876101000151115b613cad5760405162461bcd60e51b8152602060048201526008602482015267057524f4e475f54560c41b604482015260640161058b565b6101208701511580613ce157508660c00151613cd4578660a0015187610120015111613ce1565b8660a00151876101200151105b613d185760405162461bcd60e51b815260206004820152600860248201526715d493d391d7d4d360c21b604482015260640161058b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ea95f3260008a602001518b60c001518c60e001518d60800151613d6991906151ef565b6040516001600160e01b031960e087901b16815260048101949094526024840192909252151560448301526064820152608401604080518083038186803b158015613db357600080fd5b505afa158015613dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613deb9190614cb1565b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f6cfc26040518163ffffffff1660e01b815260040160206040518083038186803b158015613e4757600080fd5b505afa158015613e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e7f9190614c22565b60e0890151613e8e90836151ef565b1115613ed45760405162461bcd60e51b81526020600482015260156024820152740a0a492868abe929aa08286a8bea89e9ebe90928e9605b1b604482015260640161058b565b6000876002811115613ee857613ee861526b565b14613ef25761410a565b6000846001600160a01b0316636938c05d8a6020015160008c60e001518d60800151613f1e91906151ef565b613f266145a0565b6040518563ffffffff1660e01b8152600401613f45949392919061510b565b602060405180830381600087803b158015613f5f57600080fd5b505af1158015613f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f979190614c22565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c76faf786040518060c00160405280604051806101400160405280886001600160a01b031681526020018e60200151815260200160008152602001600081526020018e608001518152602001600081526020018e60c00151151581526020018e60e0015181526020018e610100015181526020018e61012001518152508152602001600081526020018c60a0015181526020018a81526020016000815260200160008152508360016040518463ffffffff1660e01b815260040161408a93929190615043565b600060405180830381600087803b1580156140a457600080fd5b505af11580156140b8573d6000803e3d6000fd5b505050508860200151836001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a866001604051614100911515815260200190565b60405180910390a4505b5050505050505050565b61413c6040805160808101825260008082526020820181905291810182905290606082015290565b6040518060800160405280866001600160a01b031681526020018581526020018481526020018360038111156141745761417461526b565b905260405163108c3d4960e11b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906321187a92906141c59084906004016150ca565b60206040518083038186803b1580156141dd57600080fd5b505afa1580156141f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614215919061481b565b15806142b85750604051633f1b72bf60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fc6dcafc906142689084906004016150ca565b60206040518083038186803b15801561428057600080fd5b505afa158015614294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142b8919061481b565b6142f65760405162461bcd60e51b815260206004820152600f60248201526e2822a72224a723afaa2924a3a3a2a960891b604482015260640161058b565b949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b815260040160206040518083038186803b15801561435957600080fd5b505afa15801561436d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143919190614740565b6001600160a01b0316639bd24d83898989896040518563ffffffff1660e01b81526004016143c29493929190614ec3565b60806040518083038186803b1580156143da57600080fd5b505afa1580156143ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061441291906148e5565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b815260040160206040518083038186803b15801561446f57600080fd5b505afa158015614483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144a79190614740565b9050806001600160a01b0316636938c05d898c6144c55760036144c8565b60025b878e61451b5760018a60038111156144e2576144e261526b565b146145115760008a60038111156144fb576144fb61526b565b1461450a578660600151614521565b8651614521565b8660200151614521565b86604001515b6040518563ffffffff1660e01b81526004016145409493929190615136565b602060405180830381600087803b15801561455a57600080fd5b505af115801561456e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145929190614c22565b9a9950505050505050505050565b600061a4b14614806145b4575062066eed46145b156146305760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156145f357600080fd5b505afa158015614607573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061462b9190614c22565b905090565b504390565b8035614640816152aa565b919050565b8051614640816152aa565b8035614640816152bf565b8051614640816152bf565b80356003811061464057600080fd5b6000610140828403121561468857600080fd5b614690615167565b905061469b82614645565b81526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a08201526146db60c0830161465b565b60c082015260e082015160e082015261010080830151818301525061012080830151818301525092915050565b805163ffffffff8116811461464057600080fd5b60006020828403121561472e57600080fd5b8135614739816152aa565b9392505050565b60006020828403121561475257600080fd5b8151614739816152aa565b6000806040838503121561477057600080fd5b823561477b816152aa565b9150602083013561478b816152bf565b809150509250929050565b6000806000604084860312156147ab57600080fd5b83356147b6816152aa565b9250602084013567ffffffffffffffff808211156147d357600080fd5b818601915086601f8301126147e757600080fd5b8135818111156147f657600080fd5b87602082850101111561480857600080fd5b6020830194508093505050509250925092565b60006020828403121561482d57600080fd5b8151614739816152bf565b60006020828403121561484a57600080fd5b815167ffffffffffffffff8082111561486257600080fd5b818401915084601f83011261487657600080fd5b81518181111561488857614888615281565b604051601f8201601f19908116603f011681019083821181831017156148b0576148b0615281565b816040528281528760208487010111156148c957600080fd5b6148da836020830160208801615225565b979650505050505050565b6000608082840312156148f757600080fd5b6040516080810181811067ffffffffffffffff8211171561491a5761491a615281565b60405261492683614708565b815261493460208401614708565b602082015261494560408401614708565b604082015261495660608401614708565b60608201529392505050565b60006101a0828403121561497557600080fd5b61497d615191565b61498683614645565b8152602083015160208201526040830151604082015260608301516060820152608083015160808201526149bc60a0840161465b565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b60006101e08284031215614a2857600080fd5b60405160c0810181811067ffffffffffffffff82111715614a4b57614a4b615281565b604052614a588484614675565b81526101408301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b600060c08284031215614aaa57600080fd5b60405160c0810181811067ffffffffffffffff82111715614acd57614acd615281565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a0830151614b0c816152bf565b60a08201529392505050565b60006101408284031215614b2b57600080fd5b6147398383614675565b6000806000808486036101a0811215614b4d57600080fd5b61014080821215614b5d57600080fd5b614b65615167565b9150614b7087614635565b82526020870135602083015260408701356040830152606087013560608301526080870135608083015260a087013560a0830152614bb060c08801614650565b60c083015260e087013560e0830152610100808801358184015250610120808801358184015250819550614be5818801614666565b945050506101608501359150614bfe6101808601614635565b905092959194509250565b600060208284031215614c1b57600080fd5b5035919050565b600060208284031215614c3457600080fd5b5051919050565b60008060008060008060c08789031215614c5457600080fd5b865195506020870151614c66816152aa565b6040880151606089015160808a015160a0909a0151989b929a5090989097909650945092505050565b60008060408385031215614ca257600080fd5b50508035926020909101359150565b60008060408385031215614cc457600080fd5b505080516020909101519092909150565b600080600060608486031215614cea57600080fd5b505081359360208301359350604090920135919050565b60008060008060008060c08789031215614d1a57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60008151808452614d5c816020860160208601615225565b601f01601f19169290920160200192915050565b60028110614d8057614d8061526b565b9052565b805180516001600160a01b031683526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c0810151614dd860c085018215159052565b5060e081810151908401526101008082015190840152610120908101519083015260208101516101408301526040810151610160830152606081015161018083015260808101516101a083015260a001516101c090910152565b8183823760009101908152919050565b60008251614e54818460208701615225565b9190910192915050565b6001600160a01b03878116825286166020820152604081018590526060810184905260c08101614e916080830185614d70565b8260a0830152979650505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0385168152602081018490526040810183905260808101614eee6060830184614d70565b95945050505050565b6020815260006147396020830184614d44565b6020808252600890820152674e4f5f545241444560c01b604082015260600190565b6020808252600890820152671393d7d31253525560c21b604082015260600190565b602080825260049082015263444f4e4560e01b604082015260600190565b602080825260089082015267474f565f4f4e4c5960c01b604082015260600190565b81516001600160a01b031681526101a081016020830151602083015260408301516040830152606083015160608301526080830151608083015260a0830151614fdb60a084018215159052565b5060c0838101519083015260e08084015190830152610100808401519083015261012080840151908301526101408084015190830152610160808401519083015261018092830151929091019190915290565b6101e0810161503d8284614d84565b92915050565b61022081016150528286614d84565b836101e0830152821515610200830152949350505050565b82516001600160a01b0390811682526020808501519083015260408085015190911690820152606080840151908201526080808401519082015260a083015160e08201906150b781615297565b60a083015260c090910191909152919050565b81516001600160a01b031681526020808301519082015260408083015190820152606082015160808201906150fe81615297565b8060608401525092915050565b8481526080810161511b85615297565b84602083015283604083015282606083015295945050505050565b8481526080810161514685615297565b84602083015283604083015263ffffffff8316606083015295945050505050565b604051610140810167ffffffffffffffff8111828210171561518b5761518b615281565b60405290565b6040516101a0810167ffffffffffffffff8111828210171561518b5761518b615281565b600082198211156151c8576151c8615255565b500190565b6000826151ea57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561520957615209615255565b500290565b60008282101561522057615220615255565b500390565b60005b83811015615240578181015183820152602001615228565b8381111561524f576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600481106152a7576152a761526b565b50565b6001600160a01b03811681146152a757600080fd5b80151581146152a757600080fdfea264697066735822122011151ae7f6df62c494e0ff109f7d6ce6f33522814846bc03b7e1d1fa223123a664736f6c63430008070033",
  "libraries": {
    "PackingUtils": "0x5aed3A370E240F7A4888b0f25a6dDc25d110155D",
    "TradeUtils": "0xfAE70874F6fBC8667bfFe79B8eA99DaD1b1a1138"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4416,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "delegations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4418,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "senderOverride",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 41,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "maxPosDai",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 43,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "marketOrdersTimeout",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 45,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "isPaused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 47,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "isDone",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 51,
        "contract": "contracts/contracts/GNSTradingV6_4_1.sol:GNSTradingV6_4_1",
        "label": "bypassTriggerLink",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}